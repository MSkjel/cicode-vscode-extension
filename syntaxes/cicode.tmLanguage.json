{
  "name": "Cicode",
  "scopeName": "source.cicode",
  "fileTypes": [
    "ci"
  ],
  "patterns": [
    {
      "begin": "(?i)^\\s*(?:(int|real|long|ulong|string|object|module|quality|timestamp)\\s+)?function\\b(?:\\s+(\\w+))?",
      "beginCaptures": {
        "1": {
          "name": "storage.type.cicode"
        },
        "2": {
          "name": "entity.name.function.cicode"
        },
        "0": {
          "name": "keyword.declaration.function.cicode"
        }
      },
      "end": "(?i)^\\s*end\\b",
      "endCaptures": {
        "0": {
          "name": "keyword.declaration.function.cicode"
        }
      },
      "applyEndPatternLast": true,
      "patterns": [
        {
          "include": "#controlBlocks"
        },
        {
          "include": "$self"
        }
      ],
      "name": "meta.function.cicode"
    },
    {
      "match": "\\b(?i:(then|else|do|to|until|goto|break|continue|exit|abort|raise|return|except|finally|select|case))\\b",
      "name": "keyword.control.cicode"
    },
    {
      "match": "\\b(?i:(and|or|xor|not|div|mod|shl|shr|bitand|bitor))\\b",
      "name": "keyword.operator.cicode"
    },
    {
      "match": "\\b(?i:(module|global|private|const))\\b",
      "name": "storage.modifier.cicode"
    },
    {
      "match": "\\b([A-Za-z_]\\w*)\\s*\\(",
      "captures": {
        "1": {
          "name": "entity.name.function.call.cicode"
        }
      },
      "name": "meta.function-call.cicode"
    },
    {
      "match": "\\b(?i:(boolean|int|real|long|ulong|string|object|module|quality|timestamp))\\b",
      "name": "storage.type.cicode"
    },
    {
      "match": "\\b0[xX][0-9a-fA-F]{1,16}\\b",
      "name": "constant.numeric.hex.cicode"
    },
    {
      "match": "\\b(\\d+)|(\\d*\\.\\d+([eE][\\-+]?\\d+)?)\\b",
      "name": "constant.numeric.cicode"
    },
    {
      "match": "\\b(?i:(true|false))\\b",
      "name": "constant.language.cicode"
    },
    {
      "begin": "(//|!)",
      "beginCaptures": {
        "0": {
          "name": "punctuation.definition.comment.cicode"
        }
      },
      "end": "$",
      "name": "comment.line.cicode"
    },
    {
      "begin": "/\\*",
      "end": "\\*/",
      "name": "comment.block.cicode"
    },
    {
      "begin": "\"",
      "end": "\"",
      "name": "string.quoted.double.cicode",
      "patterns": [
        {
          "match": "\\^.",
          "name": "constant.character.escape.cicode"
        }
      ]
    },
    {
      "begin": "'",
      "end": "'",
      "name": "string.quoted.single.cicode",
      "patterns": [
        {
          "match": "\\^.",
          "name": "constant.character.escape.cicode"
        }
      ]
    }
  ],
  "repository": {
    "controlBlocks": {
      "patterns": [
        {
          "begin": "\\b(?i:if)\\b",
          "beginCaptures": {
            "0": {
              "name": "keyword.control.cicode"
            }
          },
          "end": "(?i)^\\s*end\\b",
          "endCaptures": {
            "0": {
              "name": "keyword.control.cicode"
            }
          },
          "applyEndPatternLast": true,
          "patterns": [
            {
              "include": "#controlBlocks"
            },
            {
              "include": "$self"
            }
          ],
          "name": "meta.block.if.cicode"
        },
        {
          "begin": "\\b(?i:for)\\b",
          "beginCaptures": {
            "0": {
              "name": "keyword.control.cicode"
            }
          },
          "end": "(?i)^\\s*end\\b",
          "endCaptures": {
            "0": {
              "name": "keyword.control.cicode"
            }
          },
          "applyEndPatternLast": true,
          "patterns": [
            {
              "include": "#controlBlocks"
            },
            {
              "include": "$self"
            }
          ],
          "name": "meta.block.for.cicode"
        },
        {
          "begin": "\\b(?i:while)\\b",
          "beginCaptures": {
            "0": {
              "name": "keyword.control.cicode"
            }
          },
          "end": "(?i)^\\s*end\\b",
          "endCaptures": {
            "0": {
              "name": "keyword.control.cicode"
            }
          },
          "applyEndPatternLast": true,
          "patterns": [
            {
              "include": "#controlBlocks"
            },
            {
              "include": "$self"
            }
          ],
          "name": "meta.block.while.cicode"
        },
        {
          "begin": "\\b(?i:repeat)\\b",
          "beginCaptures": {
            "0": {
              "name": "keyword.control.cicode"
            }
          },
          "end": "(?i)^\\s*end\\b",
          "endCaptures": {
            "0": {
              "name": "keyword.control.cicode"
            }
          },
          "applyEndPatternLast": true,
          "patterns": [
            {
              "include": "#controlBlocks"
            },
            {
              "include": "$self"
            }
          ],
          "name": "meta.block.repeat.cicode"
        },
        {
          "begin": "\\b(?i:try)\\b",
          "beginCaptures": {
            "0": {
              "name": "keyword.control.cicode"
            }
          },
          "end": "(?i)^\\s*end\\b",
          "endCaptures": {
            "0": {
              "name": "keyword.control.cicode"
            }
          },
          "applyEndPatternLast": true,
          "patterns": [
            {
              "include": "#controlBlocks"
            },
            {
              "include": "$self"
            }
          ],
          "name": "meta.block.try.cicode"
        },
        {
          "begin": "\\b(?i:select\\s+case)\\b",
          "beginCaptures": {
            "0": {
              "name": "keyword.control.cicode"
            }
          },
          "end": "(?i)^\\s*end\\s+select\\b",
          "endCaptures": {
            "0": {
              "name": "keyword.control.cicode"
            }
          },
          "applyEndPatternLast": true,
          "patterns": [
            {
              "begin": "^\\s*(?i:case)\\b",
              "beginCaptures": {
                "0": {
                  "name": "keyword.control.cicode"
                }
              },
              "end": "(?=^\\s*(?:(?i:case)\\b|(?i:end\\s+select)\\b))",
              "applyEndPatternLast": true,
              "patterns": [
                {
                  "include": "#controlBlocks"
                },
                {
                  "include": "$self"
                }
              ],
              "name": "meta.case.clause.cicode"
            },
            {
              "include": "#controlBlocks"
            },
            {
              "include": "$self"
            }
          ],
          "name": "meta.block.select.case.cicode"
        },
        {
          "begin": "\\b(?i:(case|except|finally))\\b",
          "beginCaptures": {
            "1": {
              "name": "keyword.control.cicode"
            }
          },
          "end": "(?=^\\s*(?:(?i:case)\\b|(?i:end)\\b|(?i:end\\s+select)\\b))",
          "applyEndPatternLast": true,
          "patterns": [
            {
              "include": "#controlBlocks"
            },
            {
              "include": "$self"
            }
          ],
          "name": "meta.block.middle.cicode"
        }
      ]
    }
  },
  "foldingStartMarker": "(?i)^\\s*(?:(\\w+\\s+)?function\\b|if\\b|for\\b|while\\b|repeat\\b|try\\b|select\\s+case\\b)",
  "foldingStopMarker": "(?i)^\\s*(end\\b|end\\s+select\\b)"
}