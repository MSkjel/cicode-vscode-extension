{
  "abs": {
    "name": "Abs",
    "returnType": "UNKNOWN",
    "params": [
      "Number"
    ],
    "doc": "Calculates the absolute (positive) value of a number."
  },
  "acccontrol": {
    "name": "AccControl",
    "returnType": "UNKNOWN",
    "params": [
      "sName",
      "nMode [",
      "sClusterName]"
    ],
    "doc": "Controls accumulators, for example, motor run hours. You can reset the values of Run Time, Totalizer Inc, and Number of Starts (defined in the Accumulator database), re-read these values from the I/O device, or flush pending writes of these values to the I/O device."
  },
  "accumbrowseclose": {
    "name": "AccumBrowseClose",
    "returnType": "UNKNOWN",
    "params": [
      "iSession"
    ],
    "doc": "The AccumBrowseClose function terminates an active data browse session and cleans up all resources associated with the session."
  },
  "accumbrowsefirst": {
    "name": "AccumBrowseFirst",
    "returnType": "UNKNOWN",
    "params": [
      "iSession"
    ],
    "doc": "The AccumBrowseFirst function places the data browse cursor at the first record."
  },
  "accumbrowsegetfield": {
    "name": "AccumBrowseGetField",
    "returnType": "UNKNOWN",
    "params": [
      "LONG Session",
      "STRING FieldName"
    ],
    "doc": "The AccumBrowseGetField function retrieves the value of the specified field from the record the data browse cursor is currently referencing."
  },
  "accumbrowsenext": {
    "name": "AccumBrowseNext",
    "returnType": "UNKNOWN",
    "params": [
      "iSession"
    ],
    "doc": "The AccumBrowseNext function moves the data browse cursor forward one record."
  },
  "accumbrowsenumrecords": {
    "name": "AccumBrowseNumRecords",
    "returnType": "UNKNOWN",
    "params": [
      "iSession"
    ],
    "doc": "The AccumBrowseNumRecords function returns the number of records that match the filter criteria."
  },
  "accumbrowseopen": {
    "name": "AccumBrowseOpen",
    "returnType": "UNKNOWN",
    "params": [
      "STRING Filter",
      "STRING Fields [",
      "STRING Clusters]"
    ],
    "doc": "The AccumBrowseOpen function initiates a new browse session and returns a handle to the new session that can be used in subsequent data browse function calls."
  },
  "accumbrowseprev": {
    "name": "AccumBrowsePrev",
    "returnType": "UNKNOWN",
    "params": [
      "iSession"
    ],
    "doc": "The AccumBrowsePrev function moves the data browse cursor back one record."
  },
  "alarmackrec": {
    "name": "AlarmAckRec",
    "returnType": "UNKNOWN",
    "params": [
      "LONG Record [",
      "STRING ClusterName]"
    ],
    "doc": "Acknowledges alarms by record number on both the primary and standby alarm servers."
  },
  "alarmacktag": {
    "name": "AlarmAckTag",
    "returnType": "UNKNOWN",
    "params": [
      "STRING Tag",
      "[",
      "STRING ClusterName]"
    ],
    "doc": "Acknowledge a specified alarm."
  },
  "alarmack": {
    "name": "AlarmAck",
    "returnType": "UNKNOWN",
    "params": [
      "INT Mode",
      "INT Value [",
      "STRING ClusterName]"
    ],
    "doc": "Acknowledges alarms. You can acknowledge the alarm where the cursor is positioned, one or more alarm lists on the active page, a whole category of alarms, or alarms of a particular priority."
  },
  "alarmactive": {
    "name": "AlarmActive",
    "returnType": "UNKNOWN",
    "params": [
      "Type [",
      "sClusterName]"
    ],
    "doc": "Determines if any alarms are active in the user's area."
  },
  "alarmcatgetformat": {
    "name": "AlarmCatGetFormat",
    "returnType": "UNKNOWN",
    "params": [
      "INT Category [",
      "INT Type]"
    ],
    "doc": "Returns the display format string of the specified alarm category."
  },
  "alarmclear": {
    "name": "AlarmClear",
    "returnType": "UNKNOWN",
    "params": [
      "Mode",
      "Value [",
      "ClusterName]"
    ],
    "doc": "Clears an acknowledged (and off) alarm from the active alarm list."
  },
  "alarmclearrec": {
    "name": "AlarmClearRec",
    "returnType": "UNKNOWN",
    "params": [
      "Record [",
      "ClusterName]"
    ],
    "doc": "Clears an alarm by its record number on both the primary and standby alarms servers."
  },
  "alarmcleartag": {
    "name": "AlarmClearTag",
    "returnType": "UNKNOWN",
    "params": [
      "STRING Tag",
      "[",
      "STRING ClusterName]"
    ],
    "doc": "Clears alarms by tag on both the primary and standby alarms servers."
  },
  "alarmcomment": {
    "name": "AlarmComment",
    "returnType": "UNKNOWN",
    "params": [
      "STRING Comment[",
      "INT An]"
    ],
    "doc": "Allows an operator to add a comment to a selected alarm summary or SOE entry during runtime. You would normally call this function from a keyboard command."
  },
  "alarmcommentrecid": {
    "name": "AlarmCommentRecID",
    "returnType": "UNKNOWN",
    "params": [
      "sComment",
      "sRecID",
      "nListType",
      "sCluster"
    ],
    "doc": "Allows an operator to add a comment to a selected alarm summary or SOE entry during runtime. You would normally call this function from a keyboard command."
  },
  "alarmcount": {
    "name": "AlarmCount",
    "returnType": "UNKNOWN",
    "params": [
      "INT Type [",
      "STRING FilterCriteria [",
      "LONG KeepAliveSeconds [",
      "INT CachedMode]]]"
    ],
    "doc": "Counts the available alarms for the selected filter criteria."
  },
  "alarmcountequipment": {
    "name": "AlarmCountEquipment",
    "returnType": "UNKNOWN",
    "params": [
      "INT Type [",
      "STRING EquipmentFilter",
      "[STRING FilterCriteria [",
      "LONG KeepAliveSeconds [",
      "INT CachedMode",
      "[INT IncludingReference]]]]]"
    ],
    "doc": "Counts the available alarms for the given equipments in conjunction with the selected filter criteria."
  },
  "alarmdelete": {
    "name": "AlarmDelete",
    "returnType": "UNKNOWN",
    "params": [
      "Mode",
      "Value [",
      "ClusterName]"
    ],
    "doc": "Deletes alarm summary entries that are currently displayed."
  },
  "alarmdisable": {
    "name": "AlarmDisable",
    "returnType": "UNKNOWN",
    "params": [
      "INT Mode",
      "INT Value [",
      "STRING ClusterName [",
      "INT EndTime [",
      "STRING Comment]]]"
    ],
    "doc": "Disables alarms. You can disable the alarm where the cursor is positioned, one or more alarm lists on the active page, a whole category of alarms, or alarms of a particular priority."
  },
  "alarmdisablerec": {
    "name": "AlarmDisableRec",
    "returnType": "UNKNOWN",
    "params": [
      "LONG Record [",
      "STRING ClusterName [",
      "INT EndTime [",
      "STRING Comment]]]"
    ],
    "doc": "Disables alarms by record number on both the Primary and Standby Alarms Servers."
  },
  "alarmdisabletag": {
    "name": "AlarmDisableTag",
    "returnType": "UNKNOWN",
    "params": [
      "STRING Tag",
      "[",
      "STRING ClusterName] [",
      "INT EndTime [",
      "STRING Comment]]]"
    ],
    "doc": "Disables alarms by Tag on both the Primary and Standby Alarms Servers."
  },
  "alarmdsp": {
    "name": "AlarmDsp",
    "returnType": "UNKNOWN",
    "params": [
      "INT AN",
      "Count [",
      "INT Type] [",
      "STRING ClusterName] [",
      "INT NoDraw] [",
      "STRING CallbackFunc]"
    ],
    "doc": "Displays an alarm list, starting at a specified AN and then on subsequent ANs."
  },
  "alarmdspclusteradd": {
    "name": "AlarmDspClusterAdd",
    "returnType": "UNKNOWN",
    "params": [
      "nAN",
      "sClusterName"
    ],
    "doc": "Adds a cluster to a client's alarm list. Alarms in the specified cluster (that correspond to the mode set in AlarmDsp) will be added to the alarm list at the AN number."
  },
  "alarmdspclusterinuse": {
    "name": "AlarmDspClusterInUse",
    "returnType": "UNKNOWN",
    "params": [
      "nAN",
      "sClusterName"
    ],
    "doc": "Determines if a cluster is included in a client's alarm list."
  },
  "alarmdspclusterremove": {
    "name": "AlarmDspClusterRemove",
    "returnType": "UNKNOWN",
    "params": [
      "nAN",
      "sClusterName"
    ],
    "doc": "Removes a cluster from a client's alarms list. Alarms for the specified cluster will be removed from the alarms list at the AN number."
  },
  "alarmdsplast": {
    "name": "AlarmDspLast",
    "returnType": "UNKNOWN",
    "params": [
      "nAN [",
      "nCount] [",
      "nType] [",
      "sClusterName] [",
      "iNoDraw] [",
      "sCallbackFunc]"
    ],
    "doc": "Displays the latest  alarms, at a specified AN with the cluster name. Use this function to display the last alarms."
  },
  "alarmdspnext": {
    "name": "AlarmDspNext",
    "returnType": "UNKNOWN",
    "params": [
      "INT AN"
    ],
    "doc": "Displays the next page of alarms. This function pages down (scrolls) the alarms displayed by the AlarmDsp() function. You would normally call this function from a keyboard command."
  },
  "alarmdspprev": {
    "name": "AlarmDspPrev",
    "returnType": "UNKNOWN",
    "params": [
      "INT AN"
    ],
    "doc": "Displays the previous page of alarms. This function pages up (scrolls) the alarms displayed by the AlarmDsp() function. You would normally call this function from a keyboard command."
  },
  "alarmenable": {
    "name": "AlarmEnable",
    "returnType": "UNKNOWN",
    "params": [
      "INT Mode",
      "INT Value [",
      "STRING ClusterName [",
      "INT bAcknowledge]]"
    ],
    "doc": "Enables an alarm on the active alarm list. You can enable the alarm where the cursor is positioned, one or more alarm lists on the active page, a whole category of alarms, or alarms of a particular priority."
  },
  "alarmenablerec": {
    "name": "AlarmEnableRec",
    "returnType": "UNKNOWN",
    "params": [
      "INT Record [",
      "STRING ClusterName [",
      "INT bAcknowledge]]"
    ],
    "doc": "Enables alarms by record number on both the Primary and Standby Alarms Servers."
  },
  "alarmenabletag": {
    "name": "AlarmEnableTag",
    "returnType": "UNKNOWN",
    "params": [
      "STRING Tag [",
      "STRING ClusterName [",
      "INT bAcknowledge]]"
    ],
    "doc": "Enables alarms by Tag on both the Primary and Standby Alarms Servers."
  },
  "alarmeventque": {
    "name": "AlarmEventQue",
    "returnType": "UNKNOWN",
    "params": [],
    "doc": "Opens the alarm event queue. The Alarms Server writes events into this queue as they are processed. These events include activated, reset, acknowledged, enabled and disabled alarms."
  },
  "alarmfilterclose": {
    "name": "AlarmFilterClose",
    "returnType": "UNKNOWN",
    "params": [
      "STRING FilterName"
    ],
    "doc": "This function removes the named filter from memory."
  },
  "alarmfiltereditappend": {
    "name": "AlarmFilterEditAppend",
    "returnType": "UNKNOWN",
    "params": [
      "INT hSession",
      "STRING FilterCriteria"
    ],
    "doc": "The AlarmFilterEditAppend function takes a session handle and a filter expression as parameters. It appends the provided expression to the current filter session content without any validation."
  },
  "alarmfiltereditappendequipment": {
    "name": "AlarmFilterEditAppendEquipment",
    "returnType": "UNKNOWN",
    "params": [
      "INT hSession",
      "STRING EquipmentFilter",
      "STRING Ref"
    ],
    "doc": "The AlarmFilterEditAppendEquipment function takes a session handle and a filter expression as parameters. It appends the provided expression to the current filter session content without any validation."
  },
  "alarmfiltereditclose": {
    "name": "AlarmFilterEditClose",
    "returnType": "UNKNOWN",
    "params": [
      "INT hSession"
    ],
    "doc": "The AlmFilterEditClose function removes the session from the memory. The filter is not reset and is valid until a new filter is created and applied."
  },
  "alarmfiltereditcommit": {
    "name": "AlarmFilterEditCommit",
    "returnType": "UNKNOWN",
    "params": [
      "INT hSession"
    ],
    "doc": "The AlarmFilterEditCommit function takes a session handle as parameter. It validate the filter created in this session and, if valid, applies this filter to the list associated with the session."
  },
  "alarmfiltereditfirst": {
    "name": "AlarmFilterEditFirst",
    "returnType": "UNKNOWN",
    "params": [
      "INT hSession"
    ],
    "doc": "This function takes a session handle parameter.  It gets the first part of the filter."
  },
  "alarmfiltereditlast": {
    "name": "AlarmFilterEditLast",
    "returnType": "UNKNOWN",
    "params": [
      "hSession"
    ],
    "doc": "This function takes a session handle parameter.  It gets the last part of the filter."
  },
  "alarmfiltereditnext": {
    "name": "AlarmFilterEditNext",
    "returnType": "UNKNOWN",
    "params": [
      "INT hSession"
    ],
    "doc": "This function takes a session handle parameter.  It gets the next part of the filter."
  },
  "alarmfiltereditopen": {
    "name": "AlarmFilterEditOpen",
    "returnType": "UNKNOWN",
    "params": [
      "STRING FilterName or INT AN or INT -1 [",
      "INT AutoCloseMode]"
    ],
    "doc": "The AlmFilterEditOpen function creates a session for the historical list (or lists) associated with the provided animation number (AN) or FilterName or all alarm lists displayed on the page via (-1) option."
  },
  "alarmfiltereditprev": {
    "name": "AlarmFilterEditPrev",
    "returnType": "UNKNOWN",
    "params": [
      "INT hSession"
    ],
    "doc": "This function takes a session handle parameter.  It gets the previous part of the filter."
  },
  "alarmfiltereditset": {
    "name": "AlarmFilterEditSet",
    "returnType": "UNKNOWN",
    "params": [
      "INT hSession",
      "STRING FilterCriteria"
    ],
    "doc": "The AlarmFilterEditSet function takes a session handle and a filter expression as parameters. It replaces the current filter session content by the provided expression without any validation."
  },
  "alarmfilterform": {
    "name": "AlarmFilterForm",
    "returnType": "UNKNOWN",
    "params": [
      "INT nIndex",
      "INT nMode = 0",
      "INT nDebug = 0",
      "STRING nFilterSrc = \"-1\""
    ],
    "doc": "Displays a form for specifying filtering criteria for either an alarm list or a named filter. This function uses the AlarmFilterEdit family of Cicode functions to set the filter."
  },
  "alarmfilteropen": {
    "name": "AlarmFilterOpen",
    "returnType": "UNKNOWN",
    "params": [
      "STRING FilterName",
      "INT OpenMode [",
      "INT AutoCloseMode]"
    ],
    "doc": "This function creates a named filter. The filter is initialized with empty content (matches all alarms). If unable to open the named filter  an error code is returned."
  },
  "alarmfirstcatrec": {
    "name": "AlarmFirstCatRec",
    "returnType": "UNKNOWN",
    "params": [
      "INT Category",
      "INT Type [",
      "INT Area] [",
      "STRING ClusterName]"
    ],
    "doc": "Searches for the first occurrence of an alarm category and type. You can search all areas, the current area only, or specify an area to limit the search."
  },
  "alarmfirstprirec": {
    "name": "AlarmFirstPriRec",
    "returnType": "UNKNOWN",
    "params": [
      "INT Priority",
      "INT Type [",
      "INT Area] [",
      "STRING ClusterName]"
    ],
    "doc": "Searches for the first occurrence of an alarm priority and type. You can search all areas, the current area only, or specify an area to limit the search."
  },
  "alarmfirsttagrec": {
    "name": "AlarmFirstTagRec",
    "returnType": "UNKNOWN",
    "params": [
      "STRING Tag",
      "STRING Name",
      "STRING Description [",
      "STRING ClusterName]"
    ],
    "doc": "Searches for the first occurrence of an alarm tag, name, and description."
  },
  "alarmgetdelay": {
    "name": "AlarmGetDelay",
    "returnType": "UNKNOWN",
    "params": [
      "Type"
    ],
    "doc": "Gets the delay setting for the alarm the cursor is currently positioned over."
  },
  "alarmgetdelayrec": {
    "name": "AlarmGetDelayRec",
    "returnType": "UNKNOWN",
    "params": [
      "LONG Record",
      "INT Type [",
      "STRING ClusterName]"
    ],
    "doc": "Gets the delay setting for an alarm via the alarm record number."
  },
  "alarmgetdsp": {
    "name": "AlarmGetDsp",
    "returnType": "UNKNOWN",
    "params": [
      "INT AN",
      "STRING Field"
    ],
    "doc": "Gets field data from the alarm record that is displayed at the specified AN."
  },
  "alarmgetfieldrec": {
    "name": "AlarmGetFieldRec",
    "returnType": "UNKNOWN",
    "params": [
      "LONG Record",
      "STRING Field [",
      "INT Ver [",
      "STRING ClusterName]]"
    ],
    "doc": "Gets the contents of the specified field in the specified alarm record."
  },
  "alarmgetfiltername": {
    "name": "AlarmGetFilterName",
    "returnType": "UNKNOWN",
    "params": [
      "INT An"
    ],
    "doc": "Retrieves the name of the  linked named filter for the supplied An. If empty text, there is currently no linked named filter."
  },
  "alarmgetinfo": {
    "name": "AlarmGetInfo",
    "returnType": "UNKNOWN",
    "params": [
      "INT AN",
      "INT Type [",
      "STRING ClusterName]"
    ],
    "doc": "Gets data on the alarm list displayed at a specified AN. Use this function to display the current alarm list information on an alarm page. If only one alarm list has been configured on an alarm page, modes 2 and 3 of this function return the current alarm page information."
  },
  "alarmgetorderbykey": {
    "name": "AlarmGetOrderbyKey",
    "returnType": "UNKNOWN",
    "params": [
      "nAN"
    ],
    "doc": "Retrieves the list of key(s) that are used to determine the order of the alarm list. These keys can be set by the AlarmSetInfo() function."
  },
  "alarmgetthreshold": {
    "name": "AlarmGetThreshold",
    "returnType": "UNKNOWN",
    "params": [
      "Type"
    ],
    "doc": "Gets the threshold of the analog alarm where the cursor is positioned."
  },
  "alarmgetthresholdrec": {
    "name": "AlarmGetThresholdRec",
    "returnType": "UNKNOWN",
    "params": [
      "LONG Record",
      "INT Type [",
      "STRING ClusterName]"
    ],
    "doc": "Gets the threshold of analog alarms by the alarm record number."
  },
  "alarmhelp": {
    "name": "AlarmHelp",
    "returnType": "UNKNOWN",
    "params": [],
    "doc": "Displays the alarm help page (associated with the alarm) where the cursor is positioned. You can assign a help page to each alarm when you define it (using the Digital Alarms or the Analog Alarms database, depending on the type of alarm). You need to also define the help page in the Pages database."
  },
  "alarmlistcreate": {
    "name": "AlarmListCreate",
    "returnType": "UNKNOWN",
    "params": [
      "INT nAN",
      "INT alarm_type",
      "INT width",
      "INT height",
      "INT rowheight",
      "INT drawheader [",
      "STRING sCluster [",
      "STRING sFormat [",
      "INT hFontRow [",
      "INT hFontHeader]]]]"
    ],
    "doc": "Creates an alarms list at a specified AN."
  },
  "alarmlistdestroy": {
    "name": "AlarmListDestroy",
    "returnType": "UNKNOWN",
    "params": [
      "INT nAN"
    ],
    "doc": "Destroys an alarms list at a specified AN."
  },
  "alarmlistdisplay": {
    "name": "AlarmListDisplay",
    "returnType": "UNKNOWN",
    "params": [
      "INT nAN"
    ],
    "doc": "Displays an alarms list at a specified AN."
  },
  "alarmlistfill": {
    "name": "AlarmListFill",
    "returnType": "UNKNOWN",
    "params": [
      "INT nAN"
    ],
    "doc": "Fills an alarms list at a specified AN to be used by another routine."
  },
  "alarmnextcatrec": {
    "name": "AlarmNextCatRec",
    "returnType": "UNKNOWN",
    "params": [
      "LONG Record",
      "INT Category",
      "INTType [",
      "INT Area] [",
      "STRING ClusterName]"
    ],
    "doc": "Searches for the next occurrence of an alarm category and type, commencing with the specified alarm record identifier (returned from the previous search through the AlarmFirstCatRec function)."
  },
  "alarmnextprirec": {
    "name": "AlarmNextPriRec",
    "returnType": "UNKNOWN",
    "params": [
      "LONG Record",
      "INT Priority",
      "INT Type [",
      "INT Area] [",
      "STRING ClusterName]"
    ],
    "doc": "Searches for the next occurrence of an alarm of a specified priority and type, commencing with the specified alarm record identifier (returned from the previous search through the AlarmFirstPriRec() function)."
  },
  "alarmnexttagrec": {
    "name": "AlarmNextTagRec",
    "returnType": "UNKNOWN",
    "params": [
      "LONG Record",
      "STRING Tag",
      "STRING Name",
      "VDescription [",
      "STRING ClusterName]"
    ],
    "doc": "Searches for the next occurrence of an alarm tag, name, and description, starting with the alarm record identifier (returned from the previous search through the AlarmFirstTagRec() function)."
  },
  "alarmnotifyvarchange": {
    "name": "AlarmNotifyVarChange",
    "returnType": "UNKNOWN",
    "params": [
      "Tag",
      "Value",
      "Timestamp [",
      "TimestampMS] [",
      "sClusterName] [",
      "bSync]"
    ],
    "doc": "This function is used to provide time-stamped digital and time-stamped analog alarms with data. When called, it notifies the alarm server that the specified variable tag has changed."
  },
  "alarmqueryfirstrec": {
    "name": "AlarmQueryFirstRec",
    "returnType": "UNKNOWN",
    "params": [
      "Group",
      "nType",
      "Area",
      "QueryType [",
      "sClusterName]"
    ],
    "doc": "Searches for the first occurrence of an alarm category (or priority) and type. This is a wrapper function of AlarmFirstCatRec and AlarmFirstPriRec."
  },
  "alarmquerynextrec": {
    "name": "AlarmQueryNextRec",
    "returnType": "UNKNOWN",
    "params": [
      "Record",
      "Group",
      "nType",
      "Area",
      "QueryType [",
      "sClusterName]"
    ],
    "doc": "Searches for the next occurrence of an alarm category (or priority) and type, commencing with the specified alarm record identifier (returned from the previous search through the alarm query functions)."
  },
  "alarmresetquery": {
    "name": "AlarmResetQuery",
    "returnType": "UNKNOWN",
    "params": [
      "STRING FilterSrc"
    ],
    "doc": "Clears the filter of the specified filter source. Used to reset the filter set up by the Cicode function AlarmFilterForm()."
  },
  "alarmsetdelay": {
    "name": "AlarmSetDelay",
    "returnType": "UNKNOWN",
    "params": [
      "Type",
      "Value"
    ],
    "doc": "Changes the delay setting for an alarm (that is Delay, High High Delay, Deviation Delay, etc.). This function acts on the alarm that the cursor is positioned over. Use this function during runtime to change the delay values that were specified in the alarms database."
  },
  "alarmsetdelayrec": {
    "name": "AlarmSetDelayRec",
    "returnType": "UNKNOWN",
    "params": [
      "LONG Record",
      "INT Type",
      "INT Value",
      "STRING ClusterName"
    ],
    "doc": "Changes the delay setting for an alarm (that is Delay, High High Delay, Deviation Delay, etc.) by the alarm record number. You can only call this function on an alarms server for local alarms, or on a redundant server if one has been configured."
  },
  "alarmsetinfo": {
    "name": "AlarmSetInfo",
    "returnType": "UNKNOWN",
    "params": [
      "INT AN",
      "INT Type",
      "STRING Value"
    ],
    "doc": "Controls different aspects of the alarm list displayed at a specified AN. Currently applies only to non-hardware alarm lists."
  },
  "alarmsetthreshold": {
    "name": "AlarmSetThreshold",
    "returnType": "UNKNOWN",
    "params": [
      "Type",
      "Value"
    ],
    "doc": "Changes the thresholds (that is High High, Low etc.) of analog alarms. This function acts on the analog alarm where the cursor is positioned. Use this function to change (at run time) the threshold values that were specified in the Analog Alarms database."
  },
  "alarmsetthresholdrec": {
    "name": "AlarmSetThresholdRec",
    "returnType": "UNKNOWN",
    "params": [
      "LONG Record",
      "INT Type",
      "STRING Value [",
      "STRING ClusterName]"
    ],
    "doc": "Changes the threshold (that is High High, Low etc.) of analog alarms by the alarm record number. You can call this function only on an Alarms Server for alarms on that server, or on the redundant server (if a redundant server is configured)."
  },
  "alarmsplit": {
    "name": "AlarmSplit",
    "returnType": "UNKNOWN",
    "params": [
      "[INT AN]"
    ],
    "doc": "Splits an alarm summary entry which has no Off time. The current entry will be given an off time equal to the time when AlarmSplit() is called, and the new entry will have the same On time, with empty Off time."
  },
  "alarmsumappend": {
    "name": "AlarmSumAppend",
    "returnType": "UNKNOWN",
    "params": [
      "sTag [",
      "ClusterName",
      "OnTime",
      "OnMilli",
      "bRedundant=true]"
    ],
    "doc": "Appends a new blank record to the alarm summary. Use this function to add new alarm summary entries, either for actual alarms or as special user summary entries."
  },
  "alarmsumcommit": {
    "name": "AlarmSumCommit",
    "returnType": "UNKNOWN",
    "params": [
      "Index [",
      "ClusterName]"
    ],
    "doc": "Commits the alarm summary entry to the Summary Device specified in the alarm category of the entry."
  },
  "alarmsumdelete": {
    "name": "AlarmSumDelete",
    "returnType": "UNKNOWN",
    "params": [
      "Index [",
      "ClusterName]"
    ],
    "doc": "Deletes an alarm summary entry. You identify the alarm summary entry by the Index, returned by one of the alarm summary search functions."
  },
  "alarmsumfind": {
    "name": "AlarmSumFind",
    "returnType": "UNKNOWN",
    "params": [
      "Record",
      "OnTime [",
      "ClusterName]"
    ],
    "doc": "Finds the alarm summary index for an alarm that you specify by the alarm record identifier and alarm activation time (OnTime)."
  },
  "alarmsumfirst": {
    "name": "AlarmSumFirst",
    "returnType": "UNKNOWN",
    "params": [
      "[ClusterName]"
    ],
    "doc": "Gets the index of the oldest alarm summary entry."
  },
  "alarmsumget": {
    "name": "AlarmSumGet",
    "returnType": "UNKNOWN",
    "params": [
      "Index",
      "sField [",
      "ClusterName]"
    ],
    "doc": "Gets field data from an alarm summary entry. The data is returned as a string. You identify the alarm summary entry by the Index, returned by one of the alarm summary search functions."
  },
  "alarmsumlast": {
    "name": "AlarmSumLast",
    "returnType": "UNKNOWN",
    "params": [
      "[ClusterName]"
    ],
    "doc": "Gets the index of the most recent alarm summary entry."
  },
  "alarmsumnext": {
    "name": "AlarmSumNext",
    "returnType": "UNKNOWN",
    "params": [
      "Index [",
      "ClusterName]"
    ],
    "doc": "Gets the index of the next alarm summary entry, that is, the entry that occurred later than the entry specified by Index."
  },
  "alarmsumprev": {
    "name": "AlarmSumPrev",
    "returnType": "UNKNOWN",
    "params": [
      "Index [",
      "ClusterName]"
    ],
    "doc": "Gets the index of the previous alarm summary entry, that is, the entry that occurred before the entry specified by Index."
  },
  "alarmsumset": {
    "name": "AlarmSumSet",
    "returnType": "UNKNOWN",
    "params": [
      "Index",
      "sField",
      "sData [",
      "ClusterName]"
    ],
    "doc": "Sets field information in an alarm summary entry. You identify the alarm summary entry by the Index, returned by one of the alarm summary search functions."
  },
  "alarmsumsplit": {
    "name": "AlarmSumSplit",
    "returnType": "UNKNOWN",
    "params": [
      "Index [",
      "ClusterName",
      "OnTime",
      "OnMilli",
      "bRedundant=true]"
    ],
    "doc": "Splits the alarm summary entry identified by index."
  },
  "alarmsumtype": {
    "name": "AlarmSumType",
    "returnType": "UNKNOWN",
    "params": [
      "Index [",
      "ClusterName]"
    ],
    "doc": "Retrieves a value that indicates a specified alarm's type, that is whether it's a digital alarm, an analog alarm, hardware alarm, etc."
  },
  "almbrowseack": {
    "name": "AlmBrowseAck",
    "returnType": "UNKNOWN",
    "params": [
      "LONG iSession"
    ],
    "doc": "The AlmBrowseAck function acknowledges the alarm tag at the current cursor position in an active data browse session."
  },
  "almbrowseclose": {
    "name": "AlmBrowseClose",
    "returnType": "UNKNOWN",
    "params": [
      "LONG iSession"
    ],
    "doc": "The AlmBrowseClose function terminates an active data browse session and cleans up resources associated with the session."
  },
  "almbrowsedisable": {
    "name": "AlmBrowseDisable",
    "returnType": "UNKNOWN",
    "params": [
      "INT iSession [",
      "INT EndTime [",
      "STRING Comment]]"
    ],
    "doc": "The AlmBrowseDisable function disables the alarm tag at the current cursor position in an active data browse session."
  },
  "almbrowseenable": {
    "name": "AlmBrowseEnable",
    "returnType": "UNKNOWN",
    "params": [
      "INT iSession [",
      "INT bAcknowledge]"
    ],
    "doc": "The AlmBrowseEnable function enables the alarm tag at the current cursor position in an active data browse session."
  },
  "almbrowsefirst": {
    "name": "AlmBrowseFirst",
    "returnType": "UNKNOWN",
    "params": [
      "LONG iSession"
    ],
    "doc": "The AlmBrowseFirst function places the data browse cursor at the first record."
  },
  "almbrowsegetfield": {
    "name": "AlmBrowseGetField",
    "returnType": "UNKNOWN",
    "params": [
      "LONG iSession",
      "STRING FieldName"
    ],
    "doc": "The AlmBrowseGetField function retrieves the value of the specified field from the record the data browse cursor is currently referencing."
  },
  "almbrowsenext": {
    "name": "AlmBrowseNext",
    "returnType": "UNKNOWN",
    "params": [
      "LONG iSession"
    ],
    "doc": "The AlmBrowseNext function moves the data browse cursor forward one record."
  },
  "almbrowsenumrecords": {
    "name": "AlmBrowseNumRecords",
    "returnType": "UNKNOWN",
    "params": [
      "LONG iSession"
    ],
    "doc": "The AlmBrowseNumRecords function returns the number of records that match the filter criteria."
  },
  "almbrowseopen": {
    "name": "AlmBrowseOpen",
    "returnType": "UNKNOWN",
    "params": [
      "Filter",
      "STRING Fields [",
      "STRING Clusters [",
      "INT AutoCloseMode]]"
    ],
    "doc": "The AlmBrowseOpen function initiates a new browse session and returns a handle to the new session that can be used in subsequent data browse function calls. Use this function to browse all configured alarms."
  },
  "almbrowseprev": {
    "name": "AlmBrowsePrev",
    "returnType": "UNKNOWN",
    "params": [
      "LONG iSession"
    ],
    "doc": "The AlmBrowsePrev function moves the data browse cursor back one record."
  },
  "almsummaryack": {
    "name": "AlmSummaryAck",
    "returnType": "UNKNOWN",
    "params": [
      "LONG Session"
    ],
    "doc": "The AlmSummaryAck function acknowledges the alarm in the active alarm list which is linked to the current entry of the alarm summary browse session."
  },
  "almsummaryclear": {
    "name": "AlmSummaryClear",
    "returnType": "UNKNOWN",
    "params": [
      "LONG Session"
    ],
    "doc": "The AlmSummaryClear function clears the latched alarm at the current cursor position in an active data browse session. A latched alarm is an alarm which is OFF and acknowledged when [Alarm]AckHold is set to 1."
  },
  "almsummaryclose": {
    "name": "AlmSummaryClose",
    "returnType": "UNKNOWN",
    "params": [
      "LONG iSession"
    ],
    "doc": "The AlmSummaryClose function terminates an active data browse session and cleans up all resources associated with the session."
  },
  "almsummarycommit": {
    "name": "AlmSummaryCommit",
    "returnType": "UNKNOWN",
    "params": [
      "iSession"
    ],
    "doc": "The AlmSummaryCommit function triggers the actual write of the value for the field previously specified by AlmSummarySetFieldValue."
  },
  "almsummarydelete": {
    "name": "AlmSummaryDelete",
    "returnType": "UNKNOWN",
    "params": [
      "LONG iSession"
    ],
    "doc": "The AlmSummaryDelete function deletes the record in the filtered list that the cursor is currently referencing. The cursor moves to the next available entry in the data browse session after the current alarm summary is deleted."
  },
  "almsummarydeleteall": {
    "name": "AlmSummaryDeleteAll",
    "returnType": "UNKNOWN",
    "params": [
      "LONG iSession"
    ],
    "doc": "The AlmSummaryDeleteAll function deletes every record from the filtered list source."
  },
  "almsummarydisable": {
    "name": "AlmSummaryDisable",
    "returnType": "UNKNOWN",
    "params": [
      "INT iSession [",
      "INT EndTime [",
      "STRING Comment]]"
    ],
    "doc": "The AlmSummaryDisable function disables the alarm at the current cursor position in an active data browse session."
  },
  "almsummaryenable": {
    "name": "AlmSummaryEnable",
    "returnType": "UNKNOWN",
    "params": [
      "INT iSession [",
      "INT bAcknowledge]"
    ],
    "doc": "The AlmSummaryEnable function enables the alarm at the current cursor position in an active data browse session."
  },
  "almsummaryfirst": {
    "name": "AlmSummaryFirst",
    "returnType": "UNKNOWN",
    "params": [
      "LONG iSession"
    ],
    "doc": "The AlmSummaryFirst function places the data browse cursor at the first record."
  },
  "almsummarygetfield": {
    "name": "AlmSummaryGetField",
    "returnType": "UNKNOWN",
    "params": [
      "LONG iSession",
      "STRING sFieldName"
    ],
    "doc": "The AlmSummaryGetField function retrieves the value of the specified field from the record the data browse cursor is currently referencing."
  },
  "almsummarylast": {
    "name": "AlmSummaryLast",
    "returnType": "UNKNOWN",
    "params": [
      "LONG iSession"
    ],
    "doc": "The AlmSummaryLast function places the data browse cursor at the most recent summary record from the last cluster of the available browsing cluster list."
  },
  "almsummarynext": {
    "name": "AlmSummaryNext",
    "returnType": "UNKNOWN",
    "params": [
      "LONG iSession"
    ],
    "doc": "The AlmSummaryNext function moves the data browse cursor forward one record."
  },
  "almsummarynumrecords": {
    "name": "AlmSummaryNumRecords",
    "returnType": "UNKNOWN",
    "params": [
      "LONG iSession"
    ],
    "doc": "The AlmSummaryNumRecords function retrieves the number of records in an alarm summary browse session."
  },
  "almsummaryopen": {
    "name": "AlmSummaryOpen",
    "returnType": "UNKNOWN",
    "params": [
      "STRING Filter",
      "STRING Fields [",
      "STRING Clusters [",
      "INT RowLimit",
      "[",
      "INT AutoCloseMode]]]"
    ],
    "doc": "The AlmSummaryOpen function initiates a new browse session and returns a handle to the new session that can be used in subsequent data browse function calls."
  },
  "almsummaryprev": {
    "name": "AlmSummaryPrev",
    "returnType": "UNKNOWN",
    "params": [
      "LONG Session"
    ],
    "doc": "The AlmSummaryPrev function moves the data browse cursor back one record."
  },
  "almsummarysetfieldvalue": {
    "name": "AlmSummarySetFieldValue",
    "returnType": "UNKNOWN",
    "params": [
      "iSession",
      "sFieldname",
      "sFieldValue"
    ],
    "doc": "The AlmSummarySetFieldValue function sets a new value for the specified field for the record the data browse cursor is currently referencing. The value is not committed until a call to AlmSummaryCommit is made."
  },
  "almtagsack": {
    "name": "AlmTagsAck",
    "returnType": "UNKNOWN",
    "params": [
      "iSession"
    ],
    "doc": "This command is now deprecated. Use AlmBrowseAck instead."
  },
  "almtagsclear": {
    "name": "AlmTagsClear",
    "returnType": "UNKNOWN",
    "params": [
      "iSession"
    ],
    "doc": "This command is now deprecated. Use the AlmBrowseClear function instead."
  },
  "almtagsclose": {
    "name": "AlmTagsClose",
    "returnType": "UNKNOWN",
    "params": [
      "iSession"
    ],
    "doc": "This command is now deprecated. Use AlmBrowseClose function instead."
  },
  "almtagsdisable": {
    "name": "AlmTagsDisable",
    "returnType": "UNKNOWN",
    "params": [
      "INT iSession [",
      "INT EndTime [",
      "STRING Comment]]"
    ],
    "doc": "This command is now deprecated. Use AlmBrowseDisable function instead."
  },
  "almtagsenable": {
    "name": "AlmTagsEnable",
    "returnType": "UNKNOWN",
    "params": [
      "INT iSession [",
      "INT bAcknowledge]"
    ],
    "doc": "This command is now deprecated. Use AlmBrowseEnable function instead."
  },
  "almtagsfirst": {
    "name": "AlmTagsFirst",
    "returnType": "UNKNOWN",
    "params": [
      "iSession"
    ],
    "doc": "This command is now deprecated. Use AlmBrowseFirst function instead."
  },
  "almtagsgetfield": {
    "name": "AlmTagsGetField",
    "returnType": "UNKNOWN",
    "params": [
      "iSession",
      "sFieldName"
    ],
    "doc": "This command is now deprecated. Use AlmBrowseGetField function instead."
  },
  "almtagsnext": {
    "name": "AlmTagsNext",
    "returnType": "UNKNOWN",
    "params": [
      "iSession"
    ],
    "doc": "This command is now deprecated. Use AlmBrowseNext function instead."
  },
  "almtagsnumrecords": {
    "name": "AlmTagsNumRecords",
    "returnType": "UNKNOWN",
    "params": [
      "iSession"
    ],
    "doc": "This command is now deprecated. Use AlmBrowseNumRecords function instead."
  },
  "almtagsopen": {
    "name": "AlmTagsOpen",
    "returnType": "UNKNOWN",
    "params": [
      "sFilter",
      "sFields [",
      "sClusters]"
    ],
    "doc": "This command is now deprecated. Use AlmBrowseOpen function instead."
  },
  "almtagsprev": {
    "name": "AlmTagsPrev",
    "returnType": "UNKNOWN",
    "params": [
      "iSession"
    ],
    "doc": "This command is now deprecated. Use AlmBrowsePrev function instead."
  },
  "anbyname": {
    "name": "AnByName",
    "returnType": "UNKNOWN",
    "params": [
      "sName"
    ],
    "doc": "Retrieves the animation point number of an ActiveX object."
  },
  "arccos": {
    "name": "ArcCos",
    "returnType": "UNKNOWN",
    "params": [
      "Number"
    ],
    "doc": "Calculates the arccosine of an angle."
  },
  "arcsin": {
    "name": "ArcSin",
    "returnType": "UNKNOWN",
    "params": [
      "Number"
    ],
    "doc": "Calculates the arcsine of an angle."
  },
  "arctan": {
    "name": "ArcTan",
    "returnType": "UNKNOWN",
    "params": [
      "Number"
    ],
    "doc": "Calculates the arctangent of an angle."
  },
  "areacheck": {
    "name": "AreaCheck",
    "returnType": "UNKNOWN",
    "params": [
      "Area"
    ],
    "doc": "Determines whether the current user has access to a specified area."
  },
  "arraycopy": {
    "name": "ArrayCopy",
    "returnType": "UNKNOWN",
    "params": [
      "INT hArray"
    ],
    "doc": "Calculates the absolute (positive) value of a number."
  },
  "arraycreate": {
    "name": "ArrayCreate",
    "returnType": "UNKNOWN",
    "params": [
      "STRING sArrayName",
      "INT x [",
      "INT y [",
      "INT z]]"
    ],
    "doc": "Calculates the absolute (positive) value of a number."
  },
  "arraycreatebyan": {
    "name": "ArrayCreateByAn",
    "returnType": "UNKNOWN",
    "params": [
      "INT nAN",
      "INT x [",
      "INT y [",
      "INT z]]"
    ],
    "doc": "Calculates the absolute (positive) value of a number."
  },
  "arraydestroy": {
    "name": "ArrayDestroy",
    "returnType": "UNKNOWN",
    "params": [
      "INT hArray"
    ],
    "doc": "Calculates the absolute (positive) value of a number."
  },
  "arraydestroybyan": {
    "name": "ArrayDestroyByAn",
    "returnType": "UNKNOWN",
    "params": [
      "INT nAN"
    ],
    "doc": "Calculates the absolute (positive) value of a number."
  },
  "arrayexists": {
    "name": "ArrayExists",
    "returnType": "UNKNOWN",
    "params": [
      "INT hArray"
    ],
    "doc": "Calculates the absolute (positive) value of a number."
  },
  "arrayexistsbyan": {
    "name": "ArrayExistsByAn",
    "returnType": "UNKNOWN",
    "params": [
      "INT nAN"
    ],
    "doc": "Calculates the absolute (positive) value of a number."
  },
  "arrayfillfromalarmdatabyan": {
    "name": "ArrayFillFromAlarmDataByAn",
    "returnType": "UNKNOWN",
    "params": [
      "INT hAN"
    ],
    "doc": "Calculates the absolute (positive) value of a number."
  },
  "arraygetarraybyan": {
    "name": "ArrayGetArrayByAn",
    "returnType": "UNKNOWN",
    "params": [
      "INT nAN"
    ],
    "doc": "Calculates the absolute (positive) value of a number."
  },
  "arraygetinfo": {
    "name": "ArrayGetInfo",
    "returnType": "UNKNOWN",
    "params": [
      "INT hArray",
      "INT nType"
    ],
    "doc": "Calculates the absolute (positive) value of a number."
  },
  "arraygetint": {
    "name": "ArrayGetInt",
    "returnType": "UNKNOWN",
    "params": [
      "INT hArray",
      "INT x [",
      "INT y [",
      "INT z]]"
    ],
    "doc": "Calculates the absolute (positive) value of a number."
  },
  "arraygetintbyan": {
    "name": "ArrayGetIntByAn",
    "returnType": "UNKNOWN",
    "params": [
      "INT nAN",
      "INT x [",
      "INT y [",
      "INT z]]"
    ],
    "doc": "Calculates the absolute (positive) value of a number."
  },
  "arraygetmapname": {
    "name": "ArrayGetMapName",
    "returnType": "UNKNOWN",
    "params": [
      "INT hArray"
    ],
    "doc": "Retrieves the name of the map associated with an array."
  },
  "arraygetmapnamebyan": {
    "name": "ArrayGetMapNameByAn",
    "returnType": "UNKNOWN",
    "params": [
      "INT nAN"
    ],
    "doc": "Retrieves the name of the map for an array associated with a specified AN."
  },
  "arraygetstring": {
    "name": "ArrayGetString",
    "returnType": "UNKNOWN",
    "params": [
      "INT hArray",
      "INT x [",
      "INT y [",
      "INT z]]"
    ],
    "doc": "Calculates the absolute (positive) value of a number."
  },
  "arraygetstringbyan": {
    "name": "ArrayGetStringByAn",
    "returnType": "UNKNOWN",
    "params": [
      "INT nAN",
      "INT x [",
      "INT y [",
      "INT z]]"
    ],
    "doc": "Calculates the absolute (positive) value of a number."
  },
  "arrayisdirty": {
    "name": "ArrayIsDirty",
    "returnType": "UNKNOWN",
    "params": [
      "INT hArray"
    ],
    "doc": "Calculates the absolute (positive) value of a number."
  },
  "arraysetint": {
    "name": "ArraySetInt",
    "returnType": "UNKNOWN",
    "params": [
      "INT hArray",
      "INT nValue",
      "INT x [",
      "INT y [",
      "INT z]]"
    ],
    "doc": "Calculates the absolute (positive) value of a number."
  },
  "arraysetintbyan": {
    "name": "ArraySetIntByAn",
    "returnType": "UNKNOWN",
    "params": [
      "INT nAN",
      "INT nValue",
      "INT x [",
      "INT y [",
      "INT z]]"
    ],
    "doc": "Calculates the absolute (positive) value of a number."
  },
  "arraysetisdirty": {
    "name": "ArraySetIsDirty",
    "returnType": "UNKNOWN",
    "params": [
      "INT hArray",
      "INT IsDirty"
    ],
    "doc": "Calculates the absolute (positive) value of a number."
  },
  "arraysetstring": {
    "name": "ArraySetString",
    "returnType": "UNKNOWN",
    "params": [
      "INT hArray",
      "STRING sValue",
      "INT x [",
      "INT y [",
      "INT z]]"
    ],
    "doc": "Calculates the absolute (positive) value of a number."
  },
  "arraysetstringbyan": {
    "name": "ArraySetStringByAn",
    "returnType": "UNKNOWN",
    "params": [
      "INT nAN",
      "STRING sValue",
      "INT x [",
      "INT y [",
      "INT z]]"
    ],
    "doc": "Calculates the absolute (positive) value of a number."
  },
  "arrayswap": {
    "name": "ArraySwap",
    "returnType": "UNKNOWN",
    "params": [
      "INT hArray1",
      "INT hArray2"
    ],
    "doc": "Calculates the absolute (positive) value of a number."
  },
  "ass": {
    "name": "Ass",
    "returnType": "UNKNOWN",
    "params": [
      "hWin",
      "nArg",
      "sTag",
      "nMode [",
      "sClusterName]"
    ],
    "doc": "Associates a variable tag or equipment with a Super Genie."
  },
  "asschain": {
    "name": "AssChain",
    "returnType": "UNKNOWN",
    "params": [
      "hDest",
      "hSource",
      "nMode"
    ],
    "doc": "Chains the associations from the current Super Genie to a new Super Genie. Use this function to display a new Super Genie when you already have one displayed. The new Super Genie will inherit the associations of the first Super Genie."
  },
  "asschainpage": {
    "name": "AssChainPage",
    "returnType": "UNKNOWN",
    "params": [
      "sPage"
    ],
    "doc": "Chains the associations from the current Super Genie to a new Super Genie, and displays the new Super Genie (in the current window)."
  },
  "asschainpopup": {
    "name": "AssChainPopUp",
    "returnType": "UNKNOWN",
    "params": [
      "sPage"
    ],
    "doc": "Chains the associations from the current Super Genie to a new Super Genie, and displays the new Super Genie in a new popup window."
  },
  "asschainwin": {
    "name": "AssChainWin",
    "returnType": "UNKNOWN",
    "params": [
      "sPage",
      "X",
      "Y",
      "Mode"
    ],
    "doc": "Chains the associations from the current Super Genie to a new Super Genie, and displays the new Super Genie in a new window. The new window will be of the same type as the current window. Use this function to display a new Super Genie in a new window when a Super Genie is already displayed. The new Super Genie will inherit the associations of the first."
  },
  "asschainwinfree": {
    "name": "AssChainWinFree",
    "returnType": "UNKNOWN",
    "params": [
      "sPage",
      "X",
      "Y",
      "Mode"
    ],
    "doc": "Stores the  associations on an existing Super Genie, closes it, then assigns the tags to a new window. This allows a Super Genie popup window to call another popup window, and close the parent popup."
  },
  "assequipreferences": {
    "name": "AssEquipReferences",
    "returnType": "UNKNOWN",
    "params": [
      "INT hwin",
      "STRING sClusterAndEquipment",
      "STRING sCategory"
    ],
    "doc": "Creates Super Genie associations for each equipment referenced by the specified equipment."
  },
  "assert": {
    "name": "Assert",
    "returnType": "UNKNOWN",
    "params": [
      "bCondition"
    ],
    "doc": "Verifies that the specified expression is TRUE. If then expression is FALSE, the current task will be halted. This is useful to help prevent the execution of code you do not want to run in the event an error has been detected."
  },
  "assgetproperty": {
    "name": "AssGetProperty",
    "returnType": "STRING",
    "params": [
      "sArg",
      "sProperty [",
      "iCachedMode]"
    ],
    "doc": "This function gets association information about the current Super Genie from the data source (that is, information about a variable tag that has been substituted into the Super Genie)."
  },
  "assgetscale": {
    "name": "AssGetScale",
    "returnType": "UNKNOWN",
    "params": [
      "sArg",
      "iPercent",
      "iEngUnits [",
      "iCached]"
    ],
    "doc": "Gets scale information about the tag references for the current Super Genie from the datasource (that is scale information about a variable tag that has been substituted into the Super Genie)."
  },
  "assinfo": {
    "name": "AssInfo",
    "returnType": "UNKNOWN",
    "params": [
      "sArg",
      "nType [",
      "iCachedMode]"
    ],
    "doc": "Gets association information about the current Super Genie (that is information about a variable tag that has been substituted into the Super Genie)."
  },
  "assinfoex": {
    "name": "AssInfoEx",
    "returnType": "UNKNOWN",
    "params": [
      "sArg",
      "nType [",
      "iCachedMode]"
    ],
    "doc": "Gets association information about the current Super Genie (that is information about a variable tag that has been substituted into the Super Genie)."
  },
  "assmetadata": {
    "name": "AssMetadata",
    "returnType": "UNKNOWN",
    "params": [
      "hWin [",
      "nAn]"
    ],
    "doc": "This non-blocking function performs Super Genie associations using the \"Name\" and \"Value\" fields defined on the Object Properties - Metadata tab, and matches it to the 'Name' field in the page associations table."
  },
  "assmetadatapage": {
    "name": "AssMetadataPage",
    "returnType": "UNKNOWN",
    "params": [
      "sPage [",
      "nAN]"
    ],
    "doc": "Uses the metadata information from the current object for the page associations for a new Super Genie page, and displays the new Super Genie (in the current page)."
  },
  "assmetadatapopup": {
    "name": "AssMetadataPopUp",
    "returnType": "UNKNOWN",
    "params": [
      "sPage [",
      "nAN]"
    ],
    "doc": "Uses the metadata information from the current animation point for the associations for a new Super Genie page, and displays the new Super Genie in a pop up window."
  },
  "assmetadatawin": {
    "name": "AssMetadataWin",
    "returnType": "UNKNOWN",
    "params": [
      "sPage",
      "INT x",
      "INT y",
      "INT mode [",
      "nAN]"
    ],
    "doc": "Uses the metadata information from the current animation-point for the associations for a new Super Genie page, and displays the new Super Genie in a new window."
  },
  "asspage": {
    "name": "AssPage",
    "returnType": "UNKNOWN",
    "params": [
      "sPage",
      "sTag1",
      "[sTag2..8]"
    ],
    "doc": "Associates up to eight variable tags or equipment.item tag references with a Super Genie and displays the Super Genie in the current window."
  },
  "asspopup": {
    "name": "AssPopUp",
    "returnType": "UNKNOWN",
    "params": [
      "sPage",
      "sTag1",
      "[sTag2..8]"
    ],
    "doc": "Associates up to eight variable tags or equipment.item tag references with a Super Genie and displays the Super Genie in a popup window."
  },
  "assscalestr": {
    "name": "AssScaleStr",
    "returnType": "UNKNOWN",
    "params": [
      "STRING Arg",
      "INT Percent",
      "INT EngUnits[",
      "INT CachedMode]"
    ],
    "doc": "Gets scale information about the associations of the current Super Genie (that is scale information about a variable tag that has been substituted into the Super Genie)."
  },
  "asstag": {
    "name": "AssTag",
    "returnType": "UNKNOWN",
    "params": [
      "nArg",
      "sTag [",
      "sClusterName]"
    ],
    "doc": "Associates a variable tag or equipment.item tag reference with a Super Genie."
  },
  "asstitle": {
    "name": "AssTitle",
    "returnType": "UNKNOWN",
    "params": [
      "[Mask] [",
      "Prefix] [",
      "Suffix]"
    ],
    "doc": "Sets the runtime window title to the tag name of the first variable substituted into the Super Genie."
  },
  "assvartags": {
    "name": "AssVarTags",
    "returnType": "UNKNOWN",
    "params": [
      "hWin",
      "nOffset",
      "sTag1",
      "[sTag2..8]"
    ],
    "doc": "Associates up to eight variable tags or equipment.item tag references with a Super Genie."
  },
  "asswin": {
    "name": "AssWin",
    "returnType": "UNKNOWN",
    "params": [
      "sPage",
      "X",
      "Y",
      "Mode",
      "sTag1",
      "[sTag2..8]"
    ],
    "doc": "Associates up to eight variable tags or equipment.item tag references with a Super Genie, and displays the Super Genie in a new window."
  },
  "asswinreplace": {
    "name": "AssWinReplace",
    "returnType": "UNKNOWN",
    "params": [
      "nTargetWindow"
    ],
    "doc": "Sets the runtime window title to the tag name of the first variable substituted into the Super Genie."
  },
  "beep": {
    "name": "Beep",
    "returnType": "UNKNOWN",
    "params": [
      "nSound"
    ],
    "doc": "Beeps the internal speaker or sound card (installed in the computer)."
  },
  "callevent": {
    "name": "CallEvent",
    "returnType": "UNKNOWN",
    "params": [
      "Window",
      "nType"
    ],
    "doc": "Simulates an event, triggering any OnEvent() function that has the same Type argument specified."
  },
  "chainevent": {
    "name": "ChainEvent",
    "returnType": "UNKNOWN",
    "params": [
      "hFn"
    ],
    "doc": "Calls an event function using the function handle. This creates a chain of event handlers from a single event."
  },
  "chartostr": {
    "name": "CharToStr",
    "returnType": "UNKNOWN",
    "params": [
      "ASCIICode"
    ],
    "doc": "Converts an ASCII code into a string."
  },
  "citectinfo": {
    "name": "CitectInfo",
    "returnType": "UNKNOWN",
    "params": [
      "sGroup",
      "sName",
      "sType"
    ],
    "doc": "Gets information about a Plant SCADA variable. This function returns internal statistics and other information about the runtime system."
  },
  "clipcopy": {
    "name": "ClipCopy",
    "returnType": "UNKNOWN",
    "params": [
      "sText"
    ],
    "doc": "Copies a string to the Windows clipboard. When the string is in the clipboard, you can paste it to any Windows program."
  },
  "clippaste": {
    "name": "ClipPaste",
    "returnType": "UNKNOWN",
    "params": [],
    "doc": "Pastes a string from the Windows clipboard."
  },
  "clipreadln": {
    "name": "ClipReadLn",
    "returnType": "UNKNOWN",
    "params": [],
    "doc": "Reads a single line of text from the Windows clipboard. With this function, you can read a block of text from the clipboard - line by line."
  },
  "clipsetmode": {
    "name": "ClipSetMode",
    "returnType": "UNKNOWN",
    "params": [
      "nMode"
    ],
    "doc": "Sets the format of data sent to the Windows clipboard."
  },
  "clipwriteln": {
    "name": "ClipWriteLn",
    "returnType": "UNKNOWN",
    "params": [
      "sText"
    ],
    "doc": "Writes a line of text to the Windows clipboard. With this function, you can write any amount of text to the clipboard."
  },
  "clusteractivate": {
    "name": "ClusterActivate",
    "returnType": "UNKNOWN",
    "params": [
      "ClusterName"
    ],
    "doc": "This function allows the user to activate an inactive cluster."
  },
  "clusterdeactivate": {
    "name": "ClusterDeactivate",
    "returnType": "UNKNOWN",
    "params": [
      "ClusterName"
    ],
    "doc": "This function allows the user to deactivate an active cluster."
  },
  "clusterfirst": {
    "name": "ClusterFirst",
    "returnType": "UNKNOWN",
    "params": [],
    "doc": "This function allows the user to retrieve the first configured cluster in the project."
  },
  "clustergetname": {
    "name": "ClusterGetName",
    "returnType": "UNKNOWN",
    "params": [
      "sPrimary",
      "sStandby",
      "nMode"
    ],
    "doc": "ClusterGetName is deprecated in this version of Plant SCADA."
  },
  "clusterisactive": {
    "name": "ClusterIsActive",
    "returnType": "UNKNOWN",
    "params": [
      "ClusterName"
    ],
    "doc": "This function allows the user to determine if a cluster is active."
  },
  "clusternext": {
    "name": "ClusterNext",
    "returnType": "UNKNOWN",
    "params": [
      "ClusterName"
    ],
    "doc": "This function allows the user to retrieve the next configured cluster in the project."
  },
  "clusterservertypes": {
    "name": "ClusterServerTypes",
    "returnType": "UNKNOWN",
    "params": [
      "ClusterName"
    ],
    "doc": "This function allows the user to determine which servers are defined for a given cluster."
  },
  "clustersetname": {
    "name": "ClusterSetName",
    "returnType": "UNKNOWN",
    "params": [
      "sPrimary",
      "sStandby",
      "nMode"
    ],
    "doc": "ClusterSetName is deprecated."
  },
  "clusterstatus": {
    "name": "ClusterStatus",
    "returnType": "UNKNOWN",
    "params": [
      "clusterName",
      "serverType"
    ],
    "doc": "This function allows the user to determine the connection status from the client to a server on a cluster."
  },
  "clusterswapactive": {
    "name": "ClusterSwapActive",
    "returnType": "UNKNOWN",
    "params": [
      "clusterNameA",
      "clusterNameB"
    ],
    "doc": "This function allows the user to deactivate an active cluster at the same time as activating an inactive cluster."
  },
  "codesetmode": {
    "name": "CodeSetMode",
    "returnType": "UNKNOWN",
    "params": [
      "nType",
      "Value"
    ],
    "doc": "Sets various execution modes for Cicode tasks in the current thread."
  },
  "codetrace": {
    "name": "CodeTrace",
    "returnType": "UNKNOWN",
    "params": [
      "hTask",
      "nMode"
    ],
    "doc": "Traces Cicode into the Kernel and the SYSLOG.DAT file. Use this function for finding bugs in your Cicode."
  },
  "comclose": {
    "name": "ComClose",
    "returnType": "UNKNOWN",
    "params": [
      "hPort"
    ],
    "doc": "Closes a communication port."
  },
  "comopen": {
    "name": "ComOpen",
    "returnType": "UNKNOWN",
    "params": [
      "sPort",
      "nMode"
    ],
    "doc": "Opens a communication port for access."
  },
  "comread": {
    "name": "ComRead",
    "returnType": "UNKNOWN",
    "params": [
      "hPort",
      "sBuffer",
      "iLength",
      "iTimeOut"
    ],
    "doc": "Reads characters from a communication port."
  },
  "comreset": {
    "name": "ComReset",
    "returnType": "UNKNOWN",
    "params": [
      "hPort"
    ],
    "doc": "Resets the communication port. This function can only be called from an I/O Server."
  },
  "comwrite": {
    "name": "ComWrite",
    "returnType": "UNKNOWN",
    "params": [
      "hPort",
      "sBuffer",
      "iLength",
      "iTimeOut"
    ],
    "doc": "Writes characters to a communication port."
  },
  "cos": {
    "name": "Cos",
    "returnType": "UNKNOWN",
    "params": [
      "Angle"
    ],
    "doc": "Calculates the trigonometric cosine of an angle."
  },
  "createcontrolobject": {
    "name": "CreateControlObject",
    "returnType": "UNKNOWN",
    "params": [
      "sClass",
      "sName",
      "x1",
      "y1",
      "x2",
      "y2",
      "sEventClass"
    ],
    "doc": "Creates a new instance of an ActiveX object."
  },
  "createobject": {
    "name": "CreateObject",
    "returnType": "UNKNOWN",
    "params": [
      "sClass"
    ],
    "doc": "Creates a new instance of an ActiveX object. If you use this function to create an ActiveX object, it will have no visual component (only the automation component will be created)."
  },
  "dateadd": {
    "name": "DateAdd",
    "returnType": "UNKNOWN",
    "params": [
      "Time",
      "AddTime"
    ],
    "doc": "Adds time (in seconds) to a time/date value."
  },
  "dateday": {
    "name": "DateDay",
    "returnType": "UNKNOWN",
    "params": [
      "Time"
    ],
    "doc": "Gets the day of the month from a time/date variable."
  },
  "dateinfo": {
    "name": "DateInfo",
    "returnType": "UNKNOWN",
    "params": [
      "nInfo",
      "nExtra"
    ],
    "doc": "Returns the date format currently used on the Plant SCADA Server."
  },
  "datemonth": {
    "name": "DateMonth",
    "returnType": "UNKNOWN",
    "params": [
      "Time"
    ],
    "doc": "Gets the month from a time/date variable."
  },
  "datesub": {
    "name": "DateSub",
    "returnType": "UNKNOWN",
    "params": [
      "Time",
      "SubTime"
    ],
    "doc": "Subtracts time (in seconds) from a time/date value."
  },
  "dateweekday": {
    "name": "DateWeekDay",
    "returnType": "UNKNOWN",
    "params": [
      "Time"
    ],
    "doc": "Gets the day of the week from a time/date variable."
  },
  "dateyear": {
    "name": "DateYear",
    "returnType": "UNKNOWN",
    "params": [
      "Time [",
      "Mode]"
    ],
    "doc": "Gets the year from a time/date variable."
  },
  "date": {
    "name": "Date",
    "returnType": "UNKNOWN",
    "params": [
      "[Format]"
    ],
    "doc": "Gets the current date in string format."
  },
  "ddeexec": {
    "name": "DDEExec",
    "returnType": "UNKNOWN",
    "params": [
      "sApplication",
      "sCommand"
    ],
    "doc": "Executes a command in an external Windows application running on the same computer. With this function, you can control other applications that support DDE."
  },
  "ddehexecute": {
    "name": "DDEhExecute",
    "returnType": "UNKNOWN",
    "params": [
      "Handle",
      "sCommand"
    ],
    "doc": "Executes a command in an external Windows application. You need to first start a conversation with the DDEhInitiate function, and use the handle returned by that function to identify the conversation."
  },
  "ddehgetlasterror": {
    "name": "DDEhGetLastError",
    "returnType": "UNKNOWN",
    "params": [
      "Handle"
    ],
    "doc": "Gets the latest error code issued from Windows for the conversation identified by the handle."
  },
  "ddehinitiate": {
    "name": "DDEhInitiate",
    "returnType": "UNKNOWN",
    "params": [
      "sApplication",
      "sDocument"
    ],
    "doc": "Starts a conversation with an external Windows application. When the data exchange is complete, you should terminate the conversation to free system resources."
  },
  "ddehpoke": {
    "name": "DDEhPoke",
    "returnType": "UNKNOWN",
    "params": [
      "Handle",
      "sItem",
      "sValue"
    ],
    "doc": "Writes a value to an external Windows application, for example, an Excel spreadsheet. The value is written once to the application. (To write the value dynamically, you need to call this function at the rate at which the data needs to be updated.)"
  },
  "ddehreadln": {
    "name": "DDEhReadLn",
    "returnType": "UNKNOWN",
    "params": [
      "Handle",
      "sTopic"
    ],
    "doc": "Reads a line of text from a DDE Conversion, for example, from an Excel spreadsheet. You need to first start a conversation with the DDEhInitiate function, and use the handle returned by that function to identify the conversation."
  },
  "ddehrequest": {
    "name": "DDEhRequest",
    "returnType": "UNKNOWN",
    "params": [
      "Handle",
      "sItem"
    ],
    "doc": "Reads a value from an external Windows application, for example, from an Excel spreadsheet. You need to first start a conversation with the DDEhInitiate function, and use the handle returned by that function to identify the conversation."
  },
  "ddehsetmode": {
    "name": "DDEhSetMode",
    "returnType": "UNKNOWN",
    "params": [
      "Handle",
      "sMode"
    ],
    "doc": "Set the mode of the DDE conversation. The default mode of a DDE conversation is to use TEXT data format - a simple string of data."
  },
  "ddehterminate": {
    "name": "DDEhTerminate",
    "returnType": "UNKNOWN",
    "params": [
      "Handle"
    ],
    "doc": "Closes the conversation identified by the handle, and frees the resources associated with that conversation. After you call this function, the handle is no longer valid."
  },
  "ddehwriteln": {
    "name": "DDEhWriteLn",
    "returnType": "UNKNOWN",
    "params": [
      "Handle",
      "sTopic",
      "sData"
    ],
    "doc": "Writes a line of text to the DDE conversation. With this function, you can write any amount of text to the DDE conversation."
  },
  "ddepost": {
    "name": "DDEPost",
    "returnType": "UNKNOWN",
    "params": [
      "sItem",
      "sValue"
    ],
    "doc": "Makes a Plant SCADA variable value available for DDE linking (that is posts a DDE link so that it can be read by other DDE compliant applications running on the same computer)."
  },
  "dderead": {
    "name": "DDERead",
    "returnType": "UNKNOWN",
    "params": [
      "sApplication",
      "sDocument",
      "sItem [",
      "Mode]"
    ],
    "doc": "Reads values from an external DDE compliant Windows application running on the same computer, (for example, from an Excel spreadsheet cell or a Word document)."
  },
  "ddewrite": {
    "name": "DDEWrite",
    "returnType": "UNKNOWN",
    "params": [
      "sApplication",
      "sDocument",
      "sItem",
      "sValue"
    ],
    "doc": "Writes a value to an external Windows application, for example, to an Excel spreadsheet."
  },
  "debugbreak": {
    "name": "DebugBreak",
    "returnType": "UNKNOWN",
    "params": [],
    "doc": "Causes a breakpoint exception error to occur (error number 342). This allows programmers to trap invalid states in their Cicode."
  },
  "debugmsg": {
    "name": "DebugMsg",
    "returnType": "UNKNOWN",
    "params": [
      "sMessage"
    ],
    "doc": "Provides in-line debug messages of user Cicode, to the Kernel, Debugger Debug window, and the SysLog.DAT file. This function can be enabled or disabled with the [Code]DebugMessage parameter or DebugMsgSet() function at runtime."
  },
  "debugmsgset": {
    "name": "DebugMsgSet",
    "returnType": "UNKNOWN",
    "params": [
      "nMode"
    ],
    "doc": "Enables/disables the DebugMsg() logging functionality. It also controls whether logging is enabled for the Assert() function. This function also sets the [Code]DebugMessage parameter appropriately."
  },
  "degtorad": {
    "name": "DegToRad",
    "returnType": "UNKNOWN",
    "params": [
      "Angle"
    ],
    "doc": "Converts an angle from degrees to radians."
  },
  "delayshutdown": {
    "name": "DelayShutdown",
    "returnType": "UNKNOWN",
    "params": [
      "Delay"
    ],
    "doc": "Terminates 's operation after the specified delay period (in milliseconds). This function is suitable to be called by the CTAPI."
  },
  "devappend": {
    "name": "DevAppend",
    "returnType": "UNKNOWN",
    "params": [
      "hDev"
    ],
    "doc": "Appends a blank record to the end of a device. After the record is appended, you can use the DevSetField() function to add data to fields in the record."
  },
  "devclose": {
    "name": "DevClose",
    "returnType": "UNKNOWN",
    "params": [
      "hDev",
      "Mode"
    ],
    "doc": "Closes a device. Any data in the buffer is flushed to the device before it is closed."
  },
  "devcontrol": {
    "name": "DevControl",
    "returnType": "UNKNOWN",
    "params": [
      "hDev",
      "Type [",
      "sData]"
    ],
    "doc": "Controls a dBASE or SQL device. You can pack a dBASE device to physically remove deleted records, or re-index a dBASE device to regenerate the keys."
  },
  "devcurr": {
    "name": "DevCurr",
    "returnType": "UNKNOWN",
    "params": [],
    "doc": "Gets the current device handle. You can only call this function in a report, to get the handle of the device where the report is logging. You can then use the other device functions (for example, DevPrint()) to access that logging device."
  },
  "devdelete": {
    "name": "DevDelete",
    "returnType": "UNKNOWN",
    "params": [
      "hDev"
    ],
    "doc": "Deletes the current record in a dBASE database device. The record is not physically deleted, but is marked for deletion."
  },
  "devdisable": {
    "name": "DevDisable",
    "returnType": "UNKNOWN",
    "params": [
      "sName",
      "State"
    ],
    "doc": "Disables (and re-enables) a device from all access, and discards any data written to the device. When a device is disabled, it cannot be opened, and data cannot be read from the device. Use this function to disable logging to a database or printer."
  },
  "deveof": {
    "name": "DevEOF",
    "returnType": "UNKNOWN",
    "params": [
      "hDev"
    ],
    "doc": "Gets the status of the end of file (EOF) flag for a device. When you use the DevPrev(), DevNext(), or DevSeek() function, the start or end of the device will eventually be reached, and the EOF flag will be set. Use this function to test the EOF flag."
  },
  "devfind": {
    "name": "DevFind",
    "returnType": "UNKNOWN",
    "params": [
      "hDev",
      "sFind",
      "sField"
    ],
    "doc": "Searches a device for a record that contains specified data in a specified field. The search starts at the current record and continues forward until the matched data is found or the end of the database is reached."
  },
  "devfirst": {
    "name": "DevFirst",
    "returnType": "UNKNOWN",
    "params": [
      "hDev"
    ],
    "doc": "Finds the first record in a device."
  },
  "devflush": {
    "name": "DevFlush",
    "returnType": "UNKNOWN",
    "params": [
      "hDev"
    ],
    "doc": "Flushes buffered data to the physical device."
  },
  "devgetfield": {
    "name": "DevGetField",
    "returnType": "UNKNOWN",
    "params": [
      "hDev",
      "sField"
    ],
    "doc": "Gets field data from the current record in a device."
  },
  "devhistory": {
    "name": "DevHistory",
    "returnType": "UNKNOWN",
    "params": [
      "hDev"
    ],
    "doc": "Renames a device file and any subsequent history files. The current device is closed and renamed as the first history file."
  },
  "devinfo": {
    "name": "DevInfo",
    "returnType": "UNKNOWN",
    "params": [
      "hDev",
      "nType"
    ],
    "doc": "Gets information on a device."
  },
  "devmodify": {
    "name": "DevModify",
    "returnType": "UNKNOWN",
    "params": [
      "sName",
      "Format",
      "Header",
      "FileName",
      "nType"
    ],
    "doc": "Modifies the attributes of a device. The device needs to be closed before you can modify a device."
  },
  "devnext": {
    "name": "DevNext",
    "returnType": "UNKNOWN",
    "params": [
      "hDev"
    ],
    "doc": "Gets the next record in a device."
  },
  "devopen": {
    "name": "DevOpen",
    "returnType": "UNKNOWN",
    "params": [
      "sName [",
      "nMode]"
    ],
    "doc": "Opens a device and returns the device handle."
  },
  "devprev": {
    "name": "DevPrev",
    "returnType": "UNKNOWN",
    "params": [
      "hDev"
    ],
    "doc": "Gets the previous record in a device."
  },
  "devprint": {
    "name": "DevPrint",
    "returnType": "UNKNOWN",
    "params": [
      "hGrp",
      "sData",
      "NewLine"
    ],
    "doc": "Prints free-format data to groups of devices."
  },
  "devread": {
    "name": "DevRead",
    "returnType": "UNKNOWN",
    "params": [
      "hDev",
      "Length"
    ],
    "doc": "Reads characters from a device."
  },
  "devreadln": {
    "name": "DevReadLn",
    "returnType": "UNKNOWN",
    "params": [
      "hDev"
    ],
    "doc": "Reads data from the current record of a device until the end of the line, or end of the record. If the device is record-based, the record number is incremented."
  },
  "devrecno": {
    "name": "DevRecNo",
    "returnType": "UNKNOWN",
    "params": [
      "hDev"
    ],
    "doc": "Gets the current record number of a device."
  },
  "devseek": {
    "name": "DevSeek",
    "returnType": "UNKNOWN",
    "params": [
      "hDev",
      "Offset"
    ],
    "doc": "Moves the device pointer to a specified position in the device."
  },
  "devsetfield": {
    "name": "DevSetField",
    "returnType": "UNKNOWN",
    "params": [
      "hDev",
      "sField",
      "sData"
    ],
    "doc": "Sets new field data in the current record in a device."
  },
  "devsize": {
    "name": "DevSize",
    "returnType": "UNKNOWN",
    "params": [
      "hDev"
    ],
    "doc": "Gets the size of a physical device."
  },
  "devwrite": {
    "name": "DevWrite",
    "returnType": "UNKNOWN",
    "params": [
      "hDev",
      "sData"
    ],
    "doc": "Writes a string to a device. If the device is free-format, the data is written to the device as specified."
  },
  "devwriteln": {
    "name": "DevWriteLn",
    "returnType": "UNKNOWN",
    "params": [
      "hDev",
      "sData"
    ],
    "doc": "Writes a string to a device. If the device is free-format, the data is written to the device, followed by a newline character."
  },
  "devzap": {
    "name": "DevZap",
    "returnType": "UNKNOWN",
    "params": [
      "hDev"
    ],
    "doc": "Zaps a device. If a database device is zapped, all records are deleted. If an ASCII file is zapped, the file is truncated to 0 (zero) length."
  },
  "displayruntimemanager": {
    "name": "DisplayRuntimeManager",
    "returnType": "UNKNOWN",
    "params": [],
    "doc": "This function will start Runtime Manager if it is not already running, otherwise it will just bring the Runtime Manager to the foreground."
  },
  "dllcall": {
    "name": "DLLCall",
    "returnType": "UNKNOWN",
    "params": [
      "hFunction",
      "sArgs"
    ],
    "doc": "Calls a DLL function, and passes a string of arguments to that function."
  },
  "dllcallex": {
    "name": "DLLCallEx",
    "returnType": "UNKNOWN",
    "params": [
      "hFunction",
      "vParameters"
    ],
    "doc": "Calls a DLL function, and passes the specified arguments to that function."
  },
  "dllclasscallmethod": {
    "name": "DllClassCallMethod",
    "returnType": "UNKNOWN",
    "params": [
      "OBJECT object",
      "STRING sMethod",
      "VARARGS args"
    ],
    "doc": "Use this function to call a method of a .Net object, passing in the method name and any arguments required for the matching prototype of the method."
  },
  "dllclasscreate": {
    "name": "DllClassCreate",
    "returnType": "UNKNOWN",
    "params": [
      "STRING sPath",
      "STRING sClass [",
      "vParameters Args]"
    ],
    "doc": "Use this function to instantiate a new .Net object by specifying the path, class and arguments required for the matching constructor of the class."
  },
  "dllclassdispose": {
    "name": "DllClassDispose",
    "returnType": "UNKNOWN",
    "params": [
      "OBJECT object"
    ],
    "doc": "Use this function to clean up resources used by the .Net object and any other objects created via the use of the object."
  },
  "dllclassgetproperty": {
    "name": "DllClassGetProperty",
    "returnType": "UNKNOWN",
    "params": [
      "OBJECT object",
      "STRING sProperty"
    ],
    "doc": "Use this function to get a property of the .Net object."
  },
  "dllclassisvalid": {
    "name": "DllClassIsValid",
    "returnType": "UNKNOWN",
    "params": [
      "OBJECT"
    ],
    "doc": "Use this function to validate the handle for the class returned from DllClassCreate."
  },
  "dllclasssetproperty": {
    "name": "DllClassSetProperty",
    "returnType": "UNKNOWN",
    "params": [
      "OBJECT object",
      "STRING sProperty",
      "VARIANT Value"
    ],
    "doc": "Use this function to set a property of the .Net object. The property may be of any type or an object itself."
  },
  "dllclose": {
    "name": "DLLClose",
    "returnType": "UNKNOWN",
    "params": [
      "hFunction"
    ],
    "doc": "Closes the link to a DLL function, and frees the memory allocated for that function link."
  },
  "dllopen": {
    "name": "DLLOpen",
    "returnType": "UNKNOWN",
    "params": [
      "sLib",
      "sName",
      "sArgs"
    ],
    "doc": "Opens a link to a DLL function, by loading the specified DLL library into memory and attaching it to the named function."
  },
  "driverinfo": {
    "name": "DriverInfo",
    "returnType": "UNKNOWN",
    "params": [
      "IODevice",
      "nType [",
      "sClusterName] [",
      "ServerName]"
    ],
    "doc": "Provides information about the driver for a specified I/O device."
  },
  "dspancreatecontrolobject": {
    "name": "DspAnCreateControlObject",
    "returnType": "UNKNOWN",
    "params": [
      "nAN",
      "sClass",
      "Width",
      "Height [",
      "sEventClass]"
    ],
    "doc": "Creates a new instance of an ActiveX object."
  },
  "dspanfree": {
    "name": "DspAnFree",
    "returnType": "UNKNOWN",
    "params": [
      "nAN"
    ],
    "doc": "Frees (removes) an AN from the current page. If an animation exists at the animation number, it is deleted before the AN is freed. Use this function to free existing ANs or ANs created with the DspAnNew() function."
  },
  "dspangetarea": {
    "name": "DspAnGetArea",
    "returnType": "UNKNOWN",
    "params": [
      "nAN"
    ],
    "doc": "Gets the area configured for an object at a specific AN (animation-point number). The area is returned as an integer."
  },
  "dspangetmetadata": {
    "name": "DspAnGetMetadata",
    "returnType": "UNKNOWN",
    "params": [
      "nAN",
      "sMetaName"
    ],
    "doc": "Retrieves the field value of the specified metadata entry."
  },
  "dspangetmetadataat": {
    "name": "DspAnGetMetadataAt",
    "returnType": "UNKNOWN",
    "params": [
      "nAN",
      "nIndex",
      "sField"
    ],
    "doc": "Retrieves metadata information at the specified index."
  },
  "dspangetpos": {
    "name": "DspAnGetPos",
    "returnType": "UNKNOWN",
    "params": [
      "nAN",
      "X",
      "Y [",
      "nMode]"
    ],
    "doc": "Gets the x and y coordinates of an AN, in pixels, relative to the top-left corner of the window."
  },
  "dspangetprivilege": {
    "name": "DspAnGetPrivilege",
    "returnType": "UNKNOWN",
    "params": [
      "nAN"
    ],
    "doc": "Gets the privileges configured for an object at a specific AN (animation-point number)."
  },
  "dspaninfo": {
    "name": "DspAnInfo",
    "returnType": "UNKNOWN",
    "params": [
      "nAN",
      "nType"
    ],
    "doc": "Gets information on an AN - the type or state of the animation that is currently displayed."
  },
  "dspaninrgn": {
    "name": "DspAnInRgn",
    "returnType": "UNKNOWN",
    "params": [
      "nAN",
      "One",
      "Two"
    ],
    "doc": "Checks if an AN is within a region bounded by two ANs."
  },
  "dspanmove": {
    "name": "DspAnMove",
    "returnType": "UNKNOWN",
    "params": [
      "nAN",
      "X",
      "Y"
    ],
    "doc": "Moves an AN to a new position. Any animation at this AN is also moved."
  },
  "dspanmoverel": {
    "name": "DspAnMoveRel",
    "returnType": "UNKNOWN",
    "params": [
      "nAN",
      "X",
      "Y"
    ],
    "doc": "Moves an AN relative to its current position. Any animation at this AN is also moved."
  },
  "dspannew": {
    "name": "DspAnNew",
    "returnType": "UNKNOWN",
    "params": [
      "X",
      "Y"
    ],
    "doc": "Creates an AN at the specified x and y coordinates."
  },
  "dspannewrel": {
    "name": "DspAnNewRel",
    "returnType": "UNKNOWN",
    "params": [
      "nAN",
      "X",
      "Y"
    ],
    "doc": "This function is only used for V3.xx and V4.xx animations, and was superseded by future releases."
  },
  "dspansetmetadata": {
    "name": "DspAnSetMetadata",
    "returnType": "UNKNOWN",
    "params": [
      "nAn",
      "sMetaName",
      "sValue"
    ],
    "doc": "Non-blocking function that sets the value of the specified metadata entry."
  },
  "dspansetmetadataat": {
    "name": "DspAnSetMetadataAt",
    "returnType": "UNKNOWN",
    "params": [
      "nAN",
      "nIndex",
      "sField",
      "sFieldValue"
    ],
    "doc": "Non-blocking function, that sets the value of a metadata entry."
  },
  "dspansetname": {
    "name": "DspAnSetName",
    "returnType": "UNKNOWN",
    "params": [
      "hAN",
      "sName"
    ],
    "doc": "Using a valid AN set the name of an animation object."
  },
  "dsparraybyan": {
    "name": "DspArrayByAn",
    "returnType": "UNKNOWN",
    "params": [
      "INT nAN"
    ],
    "doc": "Calculates the absolute (positive) value of a number."
  },
  "dspbar": {
    "name": "DspBar",
    "returnType": "UNKNOWN",
    "params": [
      "nAN",
      "Bar",
      "Value"
    ],
    "doc": "Displays a bar graph (on a graphics page) at a specified AN."
  },
  "dspbmp": {
    "name": "DspBmp",
    "returnType": "UNKNOWN",
    "params": [
      "nAN",
      "sFile",
      "Mode"
    ],
    "doc": "Displays a bitmap at a specified AN. This function allows you to display any bitmap file at run time."
  },
  "dspbutton": {
    "name": "DspButton",
    "returnType": "UNKNOWN",
    "params": [
      "nAN",
      "UpKey",
      "Name [",
      "hFont] [",
      "Width] [",
      "Height] [",
      "DownKey] [",
      "RepeatKey] [",
      "Style]"
    ],
    "doc": "Displays a button at a specified AN. When the button is selected, the key definition is put into the key command line."
  },
  "dspbuttonfn": {
    "name": "DspButtonFn",
    "returnType": "UNKNOWN",
    "params": [
      "nAN",
      "UpFunction",
      "Name [",
      "hFont] [",
      "Width] [",
      "Height] [",
      "DownFunction] [",
      "RepeatFunction]"
    ],
    "doc": "Displays a button at a specified AN. When the button is selected, a user function is called. If the width and height are 0 (zero), then the button adjusts to the size of the button sName."
  },
  "dspchart": {
    "name": "DspChart",
    "returnType": "UNKNOWN",
    "params": [
      "nAN",
      "Chart",
      "Value1 [",
      "Value2 ... Value8]"
    ],
    "doc": "Displays a chart at an AN. Charts are trend lines with markers on them."
  },
  "dspclearclip": {
    "name": "DspClearClip",
    "returnType": "UNKNOWN",
    "params": [
      "INT nAN"
    ],
    "doc": "Sets tool tip text associated with an AN. Any existing text associated with the AN will be replaced with the new text."
  },
  "dspcol": {
    "name": "DspCol",
    "returnType": "UNKNOWN",
    "params": [
      "nAN",
      "Color"
    ],
    "doc": "DspCol is deprecated in this version of Plant SCADA"
  },
  "dspdel": {
    "name": "DspDel",
    "returnType": "UNKNOWN",
    "params": [
      "nAN"
    ],
    "doc": "Deletes all objects from a specified AN."
  },
  "dspdelayrenderbegin": {
    "name": "DspDelayRenderBegin",
    "returnType": "UNKNOWN",
    "params": [],
    "doc": "Delays screen updating until DspDelayRenderEnd is called. This function should be used with DspDelayRenderEnd() to \"sandwich\" Cicode that will modify the appearance of a page."
  },
  "dspdelayrenderend": {
    "name": "DspDelayRenderEnd",
    "returnType": "UNKNOWN",
    "params": [],
    "doc": "Ends the screen update delay set by DspDelayRenderBegin. This function should be used with DspDelayRenderBegin() to \"sandwich\" Cicode that will modify the appearance of a page."
  },
  "dspdirty": {
    "name": "DspDirty",
    "returnType": "UNKNOWN",
    "params": [
      "nAN"
    ],
    "doc": "Forces Plant SCADA to update an AN. Normally, Plant SCADA updates the animation on the AN only if the data has changed."
  },
  "dsperror": {
    "name": "DspError",
    "returnType": "UNKNOWN",
    "params": [
      "String"
    ],
    "doc": "Displays an error message at the prompt AN on the operator's computer."
  },
  "dspfile": {
    "name": "DspFile",
    "returnType": "UNKNOWN",
    "params": [
      "nAN",
      "hFont",
      "Height",
      "Width"
    ],
    "doc": "Defines the screen attributes for displaying a text file. This function defines a \"window\" where the file will be displayed."
  },
  "dspfilegetinfo": {
    "name": "DspFileGetInfo",
    "returnType": "UNKNOWN",
    "params": [
      "nAN",
      "Type"
    ],
    "doc": "Gets the attributes of a file-to-screen display (used for displaying text files)."
  },
  "dspfilegetname": {
    "name": "DspFileGetName",
    "returnType": "UNKNOWN",
    "params": [
      "nAN"
    ],
    "doc": "Gets the name of the file being displayed in the display \"window\"."
  },
  "dspfilescroll": {
    "name": "DspFileScroll",
    "returnType": "UNKNOWN",
    "params": [
      "nAN",
      "Direction",
      "Characters"
    ],
    "doc": "Scrolls a file (displayed in the display \"window\") by a number of characters."
  },
  "dspfilesetname": {
    "name": "DspFileSetName",
    "returnType": "UNKNOWN",
    "params": [
      "nAN",
      "sName"
    ],
    "doc": "Sets the name of the file to display in the display \"window\"."
  },
  "dspfont": {
    "name": "DspFont",
    "returnType": "UNKNOWN",
    "params": [
      "FontType",
      "PixelSize",
      "ForeOnColor",
      "BackOnColor [",
      "ForeOffColor] [",
      "BackOffColor]"
    ],
    "doc": "Creates a font and returns a font handle."
  },
  "dspfonthnd": {
    "name": "DspFontHnd",
    "returnType": "UNKNOWN",
    "params": [
      "sName"
    ],
    "doc": "Gets the font handle of a font that is defined in the Fonts database."
  },
  "dspfullscreen": {
    "name": "DspFullScreen",
    "returnType": "UNKNOWN",
    "params": [
      "Mode"
    ],
    "doc": "Disables or enables the fullscreen mode of the currently active window."
  },
  "dspgetanbottom": {
    "name": "DspGetAnBottom",
    "returnType": "UNKNOWN",
    "params": [
      "nAN"
    ],
    "doc": "Gets the bottom extent of the object at the specified AN."
  },
  "dspgetancur": {
    "name": "DspGetAnCur",
    "returnType": "UNKNOWN",
    "params": [],
    "doc": "Gets the AN of the current graphics object."
  },
  "dspgetanextent": {
    "name": "DspGetAnExtent",
    "returnType": "UNKNOWN",
    "params": [
      "nAN",
      "Top",
      "Left",
      "Bottom",
      "Right"
    ],
    "doc": "Gets the extent of the object (the enclosing boundary) at the specified AN."
  },
  "dspgetanfirst": {
    "name": "DspGetAnFirst",
    "returnType": "UNKNOWN",
    "params": [],
    "doc": "Gets the first AN on the current page, based on the order in which the ANs were stored by Graphics Builder."
  },
  "dspgetanfromname": {
    "name": "DspGetAnFromName",
    "returnType": "UNKNOWN",
    "params": [
      "sName"
    ],
    "doc": "Name used to retrieve the AN of an object on the page."
  },
  "dspgetanfromnamerelative": {
    "name": "DspGetAnFromNameRelative",
    "returnType": "UNKNOWN",
    "params": [
      "hAN",
      "sName"
    ],
    "doc": "Name used to retrieve the AN of an object on the page."
  },
  "dspgetanfrompoint": {
    "name": "DspGetAnFromPoint",
    "returnType": "UNKNOWN",
    "params": [
      "X",
      "Y [",
      "PrevAN]"
    ],
    "doc": "Gets the AN of the object at a specified set of screen coordinates."
  },
  "dspgetanheight": {
    "name": "DspGetAnHeight",
    "returnType": "UNKNOWN",
    "params": [
      "nAN"
    ],
    "doc": "Gets the height of the object at a specified AN."
  },
  "dspgetanleft": {
    "name": "DspGetAnLeft",
    "returnType": "UNKNOWN",
    "params": [
      "nAN"
    ],
    "doc": "Gets the left extent of the object at the specified AN."
  },
  "dspgetannext": {
    "name": "DspGetAnNext",
    "returnType": "UNKNOWN",
    "params": [
      "nAN"
    ],
    "doc": "Returns the AN that follows the specified AN, based on the order in which the ANs were stored on a page by Graphics Builder."
  },
  "dspgetanright": {
    "name": "DspGetAnRight",
    "returnType": "UNKNOWN",
    "params": [
      "nAN"
    ],
    "doc": "Gets the right extent of the object at the specified AN."
  },
  "dspgetantop": {
    "name": "DspGetAnTop",
    "returnType": "UNKNOWN",
    "params": [
      "nAN"
    ],
    "doc": "Gets the top extent of the object at the specified AN."
  },
  "dspgetanwidth": {
    "name": "DspGetAnWidth",
    "returnType": "UNKNOWN",
    "params": [
      "nAN"
    ],
    "doc": "Gets the width of the object at a specified AN."
  },
  "dspgetenv": {
    "name": "DspGetEnv",
    "returnType": "UNKNOWN",
    "params": [
      "sName"
    ],
    "doc": "Gets a page environment variable."
  },
  "dspgetmetadatafromname": {
    "name": "DspGetMetadataFromName",
    "returnType": "UNKNOWN",
    "params": [
      "sName",
      "sMetaName"
    ],
    "doc": "Name used to retrieve the metadata of an object on the page."
  },
  "dspgetmetadatafromnamerelative": {
    "name": "DspGetMetadataFromNameRelative",
    "returnType": "UNKNOWN",
    "params": [
      "hAN",
      "sName",
      "sMetaName"
    ],
    "doc": "Name used to retrieve the metadata of an object on the page relative to a given AN."
  },
  "dspgetmouse": {
    "name": "DspGetMouse",
    "returnType": "UNKNOWN",
    "params": [
      "X",
      "Y"
    ],
    "doc": "Gets the x and y coordinates of the mouse position, relative to the top left corner of the window."
  },
  "dspgetmouseover": {
    "name": "DspGetMouseOver",
    "returnType": "UNKNOWN",
    "params": [
      "nAN"
    ],
    "doc": "Determines if the mouse is within the boundaries of a given AN."
  },
  "dspgetnamefroman": {
    "name": "DspGetNameFromAn",
    "returnType": "UNKNOWN",
    "params": [
      "hAN"
    ],
    "doc": "Using a valid AN the animation name of the object is returned."
  },
  "dspgetnearestan": {
    "name": "DspGetNearestAn",
    "returnType": "UNKNOWN",
    "params": [
      "X",
      "Y"
    ],
    "doc": "Gets the AN nearest to a specified x,y pixel location."
  },
  "dspgetparentan": {
    "name": "DspGetParentAn",
    "returnType": "UNKNOWN",
    "params": [
      "nAN"
    ],
    "doc": "Gets the parent animation number (if any), for the specified animation number. AN animation point will have a parent animation point if it corresponds to an object in a group."
  },
  "dspgetslider": {
    "name": "DspGetSlider",
    "returnType": "UNKNOWN",
    "params": [
      "nAN"
    ],
    "doc": "Gets the current position (value) of a slider at an AN. You can call this function in the slider event to find the new position of the slider."
  },
  "dspgettip": {
    "name": "DspGetTip",
    "returnType": "UNKNOWN",
    "params": [
      "nAN",
      "Mode"
    ],
    "doc": "Gets the tool tip text associated with an AN."
  },
  "dspgraybutton": {
    "name": "DspGrayButton",
    "returnType": "UNKNOWN",
    "params": [
      "nAN",
      "nMode"
    ],
    "doc": "Grays and disables a button. If the button is a symbol, the symbol is overwritten with a gray mask."
  },
  "dspinfo": {
    "name": "DspInfo",
    "returnType": "UNKNOWN",
    "params": [
      "hInfo",
      "Type",
      "Index"
    ],
    "doc": "Extracts individual pieces of object information from an AN."
  },
  "dspinfodestroy": {
    "name": "DspInfoDestroy",
    "returnType": "UNKNOWN",
    "params": [
      "hInfo"
    ],
    "doc": "Destroys an object information block created by DspInfoNew(). You should destroy an object information block when you no longer need it."
  },
  "dspinfofield": {
    "name": "DspInfoField",
    "returnType": "UNKNOWN",
    "params": [
      "hInfo",
      "sTag",
      "sField [",
      "sClusterName]"
    ],
    "doc": "Obtains static and real-time data from a variable tag. You get static data from the Variable Tags database."
  },
  "dspinfonew": {
    "name": "DspInfoNew",
    "returnType": "UNKNOWN",
    "params": [
      "nAN"
    ],
    "doc": "Creates an object information block. Use this function with the associated low-level animation information functions to get and process object information on an AN."
  },
  "dspinfovalid": {
    "name": "DspInfoValid",
    "returnType": "UNKNOWN",
    "params": [
      "hInfo"
    ],
    "doc": "Checks if an object information block handle is valid. An object information block handle becomes invalid after it is destroyed, or if the user closes the page it is associated with."
  },
  "dspisbuttongray": {
    "name": "DspIsButtonGray",
    "returnType": "UNKNOWN",
    "params": [
      "nAN"
    ],
    "doc": "Gets the current status of a button."
  },
  "dspkernel": {
    "name": "DspKernel",
    "returnType": "UNKNOWN",
    "params": [
      "nMode"
    ],
    "doc": "Displays the Kernel window and prompts the user to login as the 'kernel' user."
  },
  "dspmarkermove": {
    "name": "DspMarkerMove",
    "returnType": "UNKNOWN",
    "params": [
      "nAN",
      "hMarker",
      "Offset"
    ],
    "doc": "Moves a trend or chart marker to a specified position."
  },
  "dspmarkernew": {
    "name": "DspMarkerNew",
    "returnType": "UNKNOWN",
    "params": [
      "nAN",
      "Mode",
      "Color"
    ],
    "doc": "Creates a new trend marker. A trend marker is used to show cursor values or limits on a trend. You can use up to 10 markers on a single trend or chart."
  },
  "dspmci": {
    "name": "DspMCI",
    "returnType": "UNKNOWN",
    "params": [
      "sCommand"
    ],
    "doc": "Controls a multimedia device using MCI. The Media Control Interface (MCI) is a high-level command interface to multimedia devices and resource files."
  },
  "dspplaysound": {
    "name": "DspPlaySound",
    "returnType": "UNKNOWN",
    "params": [
      "sSoundname",
      "nMode"
    ],
    "doc": "Plays a waveform (sound)."
  },
  "dsppopupconfigmenu": {
    "name": "DspPopupConfigMenu",
    "returnType": "UNKNOWN",
    "params": [
      "hParent",
      "[",
      "bNonRecursive [",
      "XPos [",
      "YPos]]]"
    ],
    "doc": "Displays the contents of a menu node as a pop-up (context) menu, and run the command associated with the selected menu item."
  },
  "dsppopupmenu": {
    "name": "DspPopupMenu",
    "returnType": "UNKNOWN",
    "params": [
      "iMenuNumber",
      "sMenuItems [",
      "XPos] [",
      "YPos]"
    ],
    "doc": "Creates a popup menu consisting of a number of menu items."
  },
  "dsprichtext": {
    "name": "DspRichText",
    "returnType": "UNKNOWN",
    "params": [
      "nAN",
      "iHeight",
      "iWidth",
      "nMode"
    ],
    "doc": "Creates a Rich Text object of the given dimensions at the animation point nAN."
  },
  "dsprichtextedit": {
    "name": "DspRichTextEdit",
    "returnType": "UNKNOWN",
    "params": [
      "nAN",
      "bEdit"
    ],
    "doc": "Enables editing of the contents of the rich text object at nAN if nEdit = TRUE, and disables editing if nEdit = FALSE."
  },
  "dsprichtextenable": {
    "name": "DspRichTextEnable",
    "returnType": "UNKNOWN",
    "params": [
      "nAN",
      "bEnable"
    ],
    "doc": "Enables the rich text object at nAN if nEnable = TRUE, and disables the object if nEnable = FALSE. When the object is disabled, its contents cannot be selected or copied etc."
  },
  "dsprichtextgetinfo": {
    "name": "DspRichTextGetInfo",
    "returnType": "UNKNOWN",
    "params": [
      "nAN",
      "iType"
    ],
    "doc": "Retrieves size information about the rich text object at animation point nAN."
  },
  "dsprichtextload": {
    "name": "DspRichTextLoad",
    "returnType": "UNKNOWN",
    "params": [
      "nAN",
      "sFilename"
    ],
    "doc": "Loads a copy of the file Filename into the rich text object) at animation point nAN."
  },
  "dsprichtextpgscroll": {
    "name": "DspRichTextPgScroll",
    "returnType": "UNKNOWN",
    "params": [
      "nAN",
      "iDirection"
    ],
    "doc": "Scrolls the contents of the rich text object displayed at nAN, by one page length in the direction given in direction."
  },
  "dsprichtextprint": {
    "name": "DspRichTextPrint",
    "returnType": "UNKNOWN",
    "params": [
      "nAN",
      "sPortName"
    ],
    "doc": "Prints the contents of the rich text object at animation point nAN, to the port PortName."
  },
  "dsprichtextsave": {
    "name": "DspRichTextSave",
    "returnType": "UNKNOWN",
    "params": [
      "nAN",
      "sFilename"
    ],
    "doc": "Saves the contents of the rich text object at animation point nAN, to the file Filename."
  },
  "dsprichtextscroll": {
    "name": "DspRichTextScroll",
    "returnType": "UNKNOWN",
    "params": [
      "nAN",
      "iDirection",
      "iAmount"
    ],
    "doc": "Scrolls the contents of the rich text object displayed at nAN."
  },
  "dsprubend": {
    "name": "DspRubEnd",
    "returnType": "UNKNOWN",
    "params": [
      "x",
      "y",
      "cx",
      "cy"
    ],
    "doc": "Ends the rubber band selection, and returns the coordinates of the rubber band selection."
  },
  "dsprubmove": {
    "name": "DspRubMove",
    "returnType": "UNKNOWN",
    "params": [
      "x",
      "y"
    ],
    "doc": "Moves the rubber band selection to the new position. You need to first have defined a rubber band selection using the DspRubStart() and DspRubEnd() functions."
  },
  "dsprubsetclip": {
    "name": "DspRubSetClip",
    "returnType": "UNKNOWN",
    "params": [
      "x1",
      "y1",
      "x2",
      "y2"
    ],
    "doc": "Sets the clipping region for the rubber band display. If you enable the clipping region, the rubber band will not move outside of the clip region."
  },
  "dsprubstart": {
    "name": "DspRubStart",
    "returnType": "UNKNOWN",
    "params": [
      "x",
      "y",
      "nMode"
    ],
    "doc": "Starts the rubber band selection. Call this function when the left mouse button is pressed - the rubber band is displayed at the starting position."
  },
  "dspsetclip": {
    "name": "DspSetClip",
    "returnType": "UNKNOWN",
    "params": [
      "INT nAN",
      "INT nLeft",
      "INT nTop",
      "INT nRight",
      "INT nBottom"
    ],
    "doc": "Sets the clip rectangle for an AN, defined by the top, left, right and bottom."
  },
  "dspsetcurcolor": {
    "name": "DspSetCurColor",
    "returnType": "UNKNOWN",
    "params": [
      "INT CitectColor"
    ],
    "doc": "Sets tool tip text associated with an AN. Any existing text associated with the AN will be replaced with the new text."
  },
  "dspsetmetadatafromname": {
    "name": "DspSetMetadataFromName",
    "returnType": "UNKNOWN",
    "params": [
      "sName",
      "sMetaName",
      "sValue"
    ],
    "doc": "Name used to set the metadata of an object on the page."
  },
  "dspsetmetadatafromnamerelative": {
    "name": "DspSetMetadataFromNameRelative",
    "returnType": "UNKNOWN",
    "params": [
      "hAN",
      "sName",
      "sMetaName",
      "sValue"
    ],
    "doc": "Name used to set the metadata of an object on the page."
  },
  "dspsetslider": {
    "name": "DspSetSlider",
    "returnType": "UNKNOWN",
    "params": [
      "nAN",
      "nPos"
    ],
    "doc": "Sets the current position of a slider at the specified AN. You can use this function to move a slider, and adjust the value of the variable associated with the slider."
  },
  "dspsettip": {
    "name": "DspSetTip",
    "returnType": "UNKNOWN",
    "params": [
      "nAN",
      "sText"
    ],
    "doc": "Sets tool tip text associated with an AN. Any existing text associated with the AN will be replaced with the new text."
  },
  "dspsettooltipfont": {
    "name": "DspSetTooltipFont",
    "returnType": "UNKNOWN",
    "params": [
      "sName [",
      "nPointSize] [",
      "sAttribs]"
    ],
    "doc": "Sets the font for tool tip text."
  },
  "dspstatus": {
    "name": "DspStatus",
    "returnType": "UNKNOWN",
    "params": [
      "nAN",
      "nMode"
    ],
    "doc": "Determines whether the object at the specified AN will be grayed (hatch pattern) in the event communication attempts are unsuccessful."
  },
  "dspstr": {
    "name": "DspStr",
    "returnType": "UNKNOWN",
    "params": [
      "nAN",
      "sFont",
      "sText [",
      "iLength] [",
      "iAlignMode] [",
      "iLengthMode] [",
      "bTooltip]"
    ],
    "doc": "Displays a string at a specified AN."
  },
  "dspsym": {
    "name": "DspSym",
    "returnType": "UNKNOWN",
    "params": [
      "iAN",
      "sSymbol [",
      "iMode] [",
      "iType]"
    ],
    "doc": "Displays a symbol or a Genie at a specified AN. This dynamically displayed object  will disappear at page navigation."
  },
  "dspsymanm": {
    "name": "DspSymAnm",
    "returnType": "UNKNOWN",
    "params": [
      "nAN",
      "Sym1 [",
      "Sym2 ... Sym8] [",
      "iDisplayMode] [",
      "sSym9]"
    ],
    "doc": "Animates a series of symbols at an AN."
  },
  "dspsymanmex": {
    "name": "DspSymAnmEx",
    "returnType": "UNKNOWN",
    "params": [
      "nAN",
      "Mode",
      "Sym1 [",
      "Sym2 ... Sym9]"
    ],
    "doc": "Animates a series of symbols at an AN."
  },
  "dspsymatsize": {
    "name": "DspSymAtSize",
    "returnType": "UNKNOWN",
    "params": [
      "nAN",
      "sSym",
      "PositionX",
      "PositionY",
      "SizeX",
      "SizeY",
      "Mode [",
      "Type])"
    ],
    "doc": "Displays a symbol or a genie at the specified scale and offset from the AN position."
  },
  "dsptext": {
    "name": "DspText",
    "returnType": "UNKNOWN",
    "params": [
      "hAN",
      "iFont",
      "sText [",
      "iLength] [",
      "iAlignMode] [",
      "iLengthMode] [",
      "bTooltip]"
    ],
    "doc": "Displays text at a specified AN location. This function does the same operation as DspStr(), however it uses a font number rather than a font name."
  },
  "dsptipmode": {
    "name": "DspTipMode",
    "returnType": "UNKNOWN",
    "params": [
      "nMode"
    ],
    "doc": "Switches the display of tool tips on or off. This function overrides the setting in the [Page]TipHelp parameter."
  },
  "dsptrend": {
    "name": "DspTrend",
    "returnType": "UNKNOWN",
    "params": [
      "nAN",
      "Trend",
      "Value1 [",
      "Value2 ... Value8]"
    ],
    "doc": "Displays a trend at an AN. Values are plotted on the trend pens."
  },
  "dsptrendinfo": {
    "name": "DspTrendInfo",
    "returnType": "UNKNOWN",
    "params": [
      "hTrend",
      "Type",
      "AN"
    ],
    "doc": "Gets information on a trend definition."
  },
  "dumpkernel": {
    "name": "DumpKernel",
    "returnType": "UNKNOWN",
    "params": [
      "iMode",
      "sName"
    ],
    "doc": "Dumps Kernel data to the KERNEL.DAT file."
  },
  "engtogeneric": {
    "name": "EngToGeneric",
    "returnType": "UNKNOWN",
    "params": [
      "Value",
      "EngLow",
      "EngHigh"
    ],
    "doc": "Gets a variable in the Plant SCADA generic scale format. Plant SCADA uses this scale to display trends."
  },
  "entercriticalsection": {
    "name": "EnterCriticalSection",
    "returnType": "UNKNOWN",
    "params": [
      "sName"
    ],
    "doc": "Requests permission for the current thread to have access to a critical section (shared critical resource)."
  },
  "equipbrowseclose": {
    "name": "EquipBrowseClose",
    "returnType": "UNKNOWN",
    "params": [
      "LONG Session"
    ],
    "doc": "The EquipBrowseClose function terminates an active data browse session and cleans up resources associated with the session."
  },
  "equipbrowsefirst": {
    "name": "EquipBrowseFirst",
    "returnType": "UNKNOWN",
    "params": [
      "LONG Session"
    ],
    "doc": "The EquipBrowseFirst function places the data browse cursor at the first record."
  },
  "equipbrowsegetfield": {
    "name": "EquipBrowseGetField",
    "returnType": "UNKNOWN",
    "params": [
      "LONG Session",
      "STRING FieldName"
    ],
    "doc": "The EquipBrowseGetField function retrieves the value of the specified field from the record the data browse cursor is currently referencing."
  },
  "equipbrowsenext": {
    "name": "EquipBrowseNext",
    "returnType": "UNKNOWN",
    "params": [
      "LONG Session"
    ],
    "doc": "The EquipBrowseNext function moves the data browse cursor forward one record."
  },
  "equipbrowsenumrecords": {
    "name": "EquipBrowseNumRecords",
    "returnType": "UNKNOWN",
    "params": [
      "LONG Session"
    ],
    "doc": "The EquipBrowseNumRecords function returns the number of records that match the filter criteria."
  },
  "equipbrowseopen": {
    "name": "EquipBrowseOpen",
    "returnType": "UNKNOWN",
    "params": [
      "STRING Filter",
      "STRING Fields [",
      "STRING Clusters]"
    ],
    "doc": "The EquipBrowseOpen function initiates a new browse session and returns a handle to the new session that can be used in subsequent data browse function calls."
  },
  "equipbrowseprev": {
    "name": "EquipBrowsePrev",
    "returnType": "UNKNOWN",
    "params": [
      "LONG Session"
    ],
    "doc": "The EquipBrowsePrev function moves the data browse cursor back one record."
  },
  "equipcheckupdate": {
    "name": "EquipCheckUpdate",
    "returnType": "UNKNOWN",
    "params": [
      "INT Reload[",
      "STRING sCluster]"
    ],
    "doc": "The EquipCheckUpdate function checks if the equipment database file has been updated, and provides the facility to reload it."
  },
  "equipgetproperty": {
    "name": "EquipGetProperty",
    "returnType": "UNKNOWN",
    "params": [
      "STRING Name",
      "STRING Field",
      "INT Mode",
      "STRING Cluster"
    ],
    "doc": "This function reads a property of an equipment database record from the EQUIP.RDB database file."
  },
  "equiprefbrowseclose": {
    "name": "EquipRefBrowseClose",
    "returnType": "UNKNOWN",
    "params": [
      "LONG Session"
    ],
    "doc": "The EquipRefBrowseClose function terminates an active data browse session and cleans up resources associated with the session."
  },
  "equiprefbrowsefirst": {
    "name": "EquipRefBrowseFirst",
    "returnType": "UNKNOWN",
    "params": [
      "LONG Session"
    ],
    "doc": "The EquipRefBrowseFirst function places the data browse cursor at the first record."
  },
  "equiprefbrowsenext": {
    "name": "EquipRefBrowseNext",
    "returnType": "UNKNOWN",
    "params": [
      "LONG Session"
    ],
    "doc": "The EquipRefBrowseNext function moves the data browse cursor forward one record."
  },
  "equiprefbrowsenumrecords": {
    "name": "EquipRefBrowseNumRecords",
    "returnType": "UNKNOWN",
    "params": [
      "LONG Session"
    ],
    "doc": "The EquipRefBrowseNumRecords function returns the number of records that match the filter criteria."
  },
  "equiprefbrowseopen": {
    "name": "EquipRefBrowseOpen",
    "returnType": "UNKNOWN",
    "params": [
      "STRING Filter",
      "STRING Fields [",
      "STRING Sort]"
    ],
    "doc": "The EquipRefBrowseOpen function initiates a new browse session and returns a handle to the new session that can be used in subsequent reference browse function calls."
  },
  "equiprefbrowseprev": {
    "name": "EquipRefBrowsePrev",
    "returnType": "UNKNOWN",
    "params": [
      "LONG Session"
    ],
    "doc": "The EquipRefBrowsePrev function moves the data browse cursor back one record."
  },
  "equipsetproperty": {
    "name": "EquipSetProperty",
    "returnType": "UNKNOWN",
    "params": [
      "STRING Name",
      "STRING Field",
      "STRING Value",
      "STRING Cluster"
    ],
    "doc": "The EquipSetProperty function sets the property of an item of equipment."
  },
  "equipstatebrowseclose": {
    "name": "EquipStateBrowseClose",
    "returnType": "UNKNOWN",
    "params": [
      "LONG Session"
    ],
    "doc": "The EquipStateBrowseClose function terminates a browsing session and cleans up the resources used by the session."
  },
  "equipstatebrowsefirst": {
    "name": "EquipStateBrowseFirst",
    "returnType": "UNKNOWN",
    "params": [
      "LONG Session"
    ],
    "doc": "The EquipStateBrowseFirst function places the data browse cursor at the first record."
  },
  "equipstatebrowsegetfield": {
    "name": "EquipStateBrowseGetField",
    "returnType": "UNKNOWN",
    "params": [
      "LONG Session",
      "STRING Field"
    ],
    "doc": "The EquipStateBrowseGetField function returns the value of the particular field in a record to which the data browse cursor is currently referencing."
  },
  "equipstatebrowsenext": {
    "name": "EquipStateBrowseNext",
    "returnType": "UNKNOWN",
    "params": [
      "LONG Session"
    ],
    "doc": "The EquipStateBrowseNext function places the data browse cursor at the next available record."
  },
  "equipstatebrowsenumrecords": {
    "name": "EquipStateBrowseNumRecords",
    "returnType": "UNKNOWN",
    "params": [
      "LONG Session"
    ],
    "doc": "The EquipStateBrowseNumRecords function returns the number of records that match the current filter criteria."
  },
  "equipstatebrowseopen": {
    "name": "EquipStateBrowseOpen",
    "returnType": "UNKNOWN",
    "params": [
      "STRING Filter",
      "STRING Fields [",
      "STRING Clusters]"
    ],
    "doc": "The EquipStateBrowseOpen function initiates a new session for browsing the equipment states configured. It returns a handle for the browsing session which can be used for further browsing operations."
  },
  "equipstatebrowseprev": {
    "name": "EquipStateBrowsePrev",
    "returnType": "UNKNOWN",
    "params": [
      "LONG Session"
    ],
    "doc": "The EquipStateBrowsePrev function places the data browse cursor at the previous record."
  },
  "errcom": {
    "name": "ErrCom",
    "returnType": "UNKNOWN",
    "params": [],
    "doc": "Gets the communication status for the current Cicode task."
  },
  "errdrv": {
    "name": "ErrDrv",
    "returnType": "UNKNOWN",
    "params": [
      "sProtocol",
      "sField",
      "nError"
    ],
    "doc": "Gets a protocol-specific error message and native error code."
  },
  "errgethw": {
    "name": "ErrGetHw",
    "returnType": "UNKNOWN",
    "params": [
      "Device",
      "DeviceType"
    ],
    "doc": "Gets the current hardware error status for an I/O device."
  },
  "errhelp": {
    "name": "ErrHelp",
    "returnType": "UNKNOWN",
    "params": [
      "Error"
    ],
    "doc": "Displays information about a hardware error."
  },
  "errinfo": {
    "name": "ErrInfo",
    "returnType": "UNKNOWN",
    "params": [
      "nType"
    ],
    "doc": "Gets extended error information on the last error that was detected."
  },
  "errlog": {
    "name": "ErrLog",
    "returnType": "UNKNOWN",
    "params": [
      "Message"
    ],
    "doc": "Logs a message to the system log file."
  },
  "errmsg": {
    "name": "ErrMsg",
    "returnType": "UNKNOWN",
    "params": [
      "nError"
    ],
    "doc": "Gets the error message associated with a detected hardware error."
  },
  "errset": {
    "name": "ErrSet",
    "returnType": "UNKNOWN",
    "params": [
      "Mode"
    ],
    "doc": "Sets the error-checking mode."
  },
  "errsethw": {
    "name": "ErrSetHw",
    "returnType": "UNKNOWN",
    "params": [
      "Device",
      "Error",
      "DeviceType"
    ],
    "doc": "Sets the hardware error status for a hardware device."
  },
  "errsetlevel": {
    "name": "ErrSetLevel",
    "returnType": "UNKNOWN",
    "params": [
      "Level"
    ],
    "doc": "Sets the nesting error level to enable error checking inside a nested function (when error checking has been disabled)."
  },
  "errtrap": {
    "name": "ErrTrap",
    "returnType": "UNKNOWN",
    "params": [
      "Error",
      "bHalt"
    ],
    "doc": "Generates an error trap."
  },
  "exec": {
    "name": "Exec",
    "returnType": "UNKNOWN",
    "params": [
      "Command [",
      "Mode]"
    ],
    "doc": "Executes an application or PIF file."
  },
  "executedtspkg": {
    "name": "ExecuteDTSPkg",
    "returnType": "UNKNOWN",
    "params": [
      "sFileOrSQLSvrName [",
      "sPkgName] [",
      "sParam1",
      "...",
      "sParam5] [",
      "sPkgPwd] [",
      "sPkgVer] [",
      "sLogFile] [",
      "sSQLSvrUsr] [",
      "sSQLSvrPwd]"
    ],
    "doc": "Loads and executes a DTS (Data Transformation Services) package which initiates data transfer and transformations between OLE DB data sources."
  },
  "exp": {
    "name": "Exp",
    "returnType": "UNKNOWN",
    "params": [
      "Number"
    ],
    "doc": "Calculates the exponential of a number (natural logarithm base e)."
  },
  "fact": {
    "name": "Fact",
    "returnType": "UNKNOWN",
    "params": [
      "Number"
    ],
    "doc": "Calculates the factorial of a number."
  },
  "fileclose": {
    "name": "FileClose",
    "returnType": "UNKNOWN",
    "params": [
      "File"
    ],
    "doc": "Closes a file."
  },
  "filecopy": {
    "name": "FileCopy",
    "returnType": "UNKNOWN",
    "params": [
      "sSource",
      "sDest",
      "nMode"
    ],
    "doc": "Copies a file."
  },
  "filedelete": {
    "name": "FileDelete",
    "returnType": "UNKNOWN",
    "params": [
      "sName"
    ],
    "doc": "Deletes a file."
  },
  "fileeof": {
    "name": "FileEOF",
    "returnType": "UNKNOWN",
    "params": [
      "File"
    ],
    "doc": "Determines if the end of the file has been reached."
  },
  "fileexist": {
    "name": "FileExist",
    "returnType": "UNKNOWN",
    "params": [
      "sName"
    ],
    "doc": "Checks if a file exists."
  },
  "filefind": {
    "name": "FileFind",
    "returnType": "UNKNOWN",
    "params": [
      "sPath",
      "nMode"
    ],
    "doc": "Finds a file that matches a specified search criteria."
  },
  "filefindclose": {
    "name": "FileFindClose",
    "returnType": "UNKNOWN",
    "params": [],
    "doc": "Closes a find (started with FileFind) that did not run to completion."
  },
  "filegettime": {
    "name": "FileGetTime",
    "returnType": "UNKNOWN",
    "params": [
      "File"
    ],
    "doc": "Gets the time on a file."
  },
  "filemakepath": {
    "name": "FileMakePath",
    "returnType": "UNKNOWN",
    "params": [
      "sDrive",
      "sDir",
      "sFile",
      "sExt"
    ],
    "doc": "Creates a file path string from individual components."
  },
  "fileopen": {
    "name": "FileOpen",
    "returnType": "UNKNOWN",
    "params": [
      "sName",
      "nMode"
    ],
    "doc": "Opens a file and returns a file number that can be used by other file functions."
  },
  "fileprint": {
    "name": "FilePrint",
    "returnType": "UNKNOWN",
    "params": [
      "Devicename",
      "Filename"
    ],
    "doc": "Prints a file on a device."
  },
  "fileread": {
    "name": "FileRead",
    "returnType": "UNKNOWN",
    "params": [
      "File",
      "Length"
    ],
    "doc": "Reads a number of characters from a file."
  },
  "filereadblock": {
    "name": "FileReadBlock",
    "returnType": "UNKNOWN",
    "params": [
      "File",
      "Buffer",
      "Length"
    ],
    "doc": "Reads a number of characters from a file."
  },
  "filereadln": {
    "name": "FileReadLn",
    "returnType": "UNKNOWN",
    "params": [
      "File"
    ],
    "doc": "Reads a line from a file."
  },
  "filerename": {
    "name": "FileRename",
    "returnType": "UNKNOWN",
    "params": [
      "Oldname",
      "Newname"
    ],
    "doc": "Renames a file."
  },
  "filerichtextprint": {
    "name": "FileRichTextPrint",
    "returnType": "UNKNOWN",
    "params": [
      "sFilename",
      "sPortName"
    ],
    "doc": "Prints the rich text file sFilename to the printer given by sPortname."
  },
  "fileseek": {
    "name": "FileSeek",
    "returnType": "UNKNOWN",
    "params": [
      "File",
      "Offset"
    ],
    "doc": "Moves the file pointer to a specified position in a file."
  },
  "filesettime": {
    "name": "FileSetTime",
    "returnType": "UNKNOWN",
    "params": [
      "File",
      "iTime"
    ],
    "doc": "Sets the time on a file."
  },
  "filesize": {
    "name": "FileSize",
    "returnType": "UNKNOWN",
    "params": [
      "File"
    ],
    "doc": "Gets the size of a file."
  },
  "filesplitpath": {
    "name": "FileSplitPath",
    "returnType": "UNKNOWN",
    "params": [
      "sPath",
      "sDrive",
      "sDir",
      "sFile",
      "sExt"
    ],
    "doc": "Splits a file path into individual string components."
  },
  "filewrite": {
    "name": "FileWrite",
    "returnType": "UNKNOWN",
    "params": [
      "File",
      "String"
    ],
    "doc": "Writes a string to a file. The string is written at the current file position."
  },
  "filewriteblock": {
    "name": "FileWriteBlock",
    "returnType": "UNKNOWN",
    "params": [
      "File",
      "Buffer",
      "Length"
    ],
    "doc": "Writes a string or buffer to a file."
  },
  "filewriteln": {
    "name": "FileWriteLn",
    "returnType": "UNKNOWN",
    "params": [
      "File",
      "String"
    ],
    "doc": "Writes a string to a file, followed by a newline character."
  },
  "fmtclose": {
    "name": "FmtClose",
    "returnType": "UNKNOWN",
    "params": [
      "hFmt"
    ],
    "doc": "Closes a format template."
  },
  "fmtfieldhnd": {
    "name": "FmtFieldHnd",
    "returnType": "UNKNOWN",
    "params": [
      "hFmt",
      "Name"
    ],
    "doc": "Gets the handle of a field in a format template."
  },
  "fmtgetfield": {
    "name": "FmtGetField",
    "returnType": "UNKNOWN",
    "params": [
      "hFmt",
      "sName"
    ],
    "doc": "Gets field data from a format template."
  },
  "fmtgetfieldcount": {
    "name": "FmtGetFieldCount",
    "returnType": "UNKNOWN",
    "params": [
      "hFmt"
    ],
    "doc": "Retrieves the number of fields in a format object."
  },
  "fmtgetfieldhnd": {
    "name": "FmtGetFieldHnd",
    "returnType": "UNKNOWN",
    "params": [
      "hFmt",
      "hField"
    ],
    "doc": "Gets field data from a format template."
  },
  "fmtgetfieldname": {
    "name": "FmtGetFieldName",
    "returnType": "UNKNOWN",
    "params": [
      "hFmt",
      "hField"
    ],
    "doc": "Retrieves the name of a particular field in a format object."
  },
  "fmtgetfieldwidth": {
    "name": "FmtGetFieldWidth",
    "returnType": "UNKNOWN",
    "params": [
      "hFmt",
      "hField"
    ],
    "doc": "Retrieves the width of a particular field in a format object."
  },
  "fmtopen": {
    "name": "FmtOpen",
    "returnType": "UNKNOWN",
    "params": [
      "STRING Name",
      "STRING Format",
      "INT Mode"
    ],
    "doc": "Creates a format template. After you create a template, you can use it for formatting data into strings or extracting data from a string."
  },
  "fmtsetfield": {
    "name": "FmtSetField",
    "returnType": "UNKNOWN",
    "params": [
      "hFmt",
      "Name",
      "Data"
    ],
    "doc": "Sets data in a field of a format template."
  },
  "fmtsetfieldhnd": {
    "name": "FmtSetFieldHnd",
    "returnType": "UNKNOWN",
    "params": [
      "hFmt",
      "hField",
      "Data"
    ],
    "doc": "The fields you can build the formatted string with the FmtToStr() function."
  },
  "fmttostr": {
    "name": "FmtToStr",
    "returnType": "UNKNOWN",
    "params": [
      "hFmt"
    ],
    "doc": "Builds a formatted string from the current field data (in a format template)."
  },
  "formactive": {
    "name": "FormActive",
    "returnType": "UNKNOWN",
    "params": [
      "hForm"
    ],
    "doc": "Checks if a form is currently active (displayed on the screen)."
  },
  "formaddlist": {
    "name": "FormAddList",
    "returnType": "UNKNOWN",
    "params": [
      "sText"
    ],
    "doc": "Adds a text string to a list box or combo box."
  },
  "formbutton": {
    "name": "FormButton",
    "returnType": "UNKNOWN",
    "params": [
      "Col",
      "Row",
      "sText",
      "Fn",
      "Mode"
    ],
    "doc": "Adds a button to the current form."
  },
  "formcheckbox": {
    "name": "FormCheckBox",
    "returnType": "UNKNOWN",
    "params": [
      "Col",
      "Row",
      "sText",
      "sBuf"
    ],
    "doc": "Adds a check box to the current form."
  },
  "formcombobox": {
    "name": "FormComboBox",
    "returnType": "UNKNOWN",
    "params": [
      "Col",
      "Row",
      "Width",
      "Height",
      "sBuf [",
      "Mode]"
    ],
    "doc": "Adds a combo box to the current form."
  },
  "formcurr": {
    "name": "FormCurr",
    "returnType": "UNKNOWN",
    "params": [
      "hForm",
      "hField"
    ],
    "doc": "Gets the form and field handles for the current form and field. You should call this function only from within a callback function. You can then use the same callback function for all forms and fields, regardless of how the boxes, buttons, etc. on the forms are used. You should use this function with the FormGetInst() function."
  },
  "formdestroy": {
    "name": "FormDestroy",
    "returnType": "UNKNOWN",
    "params": [
      "hForm"
    ],
    "doc": "Destroys a form that is removes it from the screen."
  },
  "formedit": {
    "name": "FormEdit",
    "returnType": "UNKNOWN",
    "params": [
      "Col",
      "Row",
      "Text",
      "Width Height",
      "bReadOnly [",
      "maxTextLength]"
    ],
    "doc": "Adds an edit field to the current form. You should call this function only after the FormNew() function and before the FormRead() function. A user input/edit box is added to the form at the specified column and row position. The operator can enter or edit the text in the edit box. This text is then passed to this function as Text."
  },
  "formfield": {
    "name": "FormField",
    "returnType": "UNKNOWN",
    "params": [
      "Col",
      "Row",
      "Width",
      "Height",
      "Type",
      "Buffer",
      "Label",
      "Fn [",
      "maxTextLength]"
    ],
    "doc": "Adds a field control device (such as a button, check box, or edit field) to the current form."
  },
  "formgetcurrinst": {
    "name": "FormGetCurrInst",
    "returnType": "UNKNOWN",
    "params": [
      "iData",
      "sData"
    ],
    "doc": "Extracts data associated with a field (set by the FormSetInst() function). You should call this function only from within a field callback function. This function is the same as calling the FormCurr() function and then the FormGetInst() function."
  },
  "formgetdata": {
    "name": "FormGetData",
    "returnType": "UNKNOWN",
    "params": [
      "hForm"
    ],
    "doc": "Gets all data associated with a form and puts it into the output string buffers."
  },
  "formgetinst": {
    "name": "FormGetInst",
    "returnType": "UNKNOWN",
    "params": [
      "hForm",
      "hField",
      "iData",
      "sData"
    ],
    "doc": "Extracts the data associated with a field (set by the FormSetInst() function). You would normally use this function in a field callback function. It allows single callback functions to know that the form and field are associated."
  },
  "formgettext": {
    "name": "FormGetText",
    "returnType": "UNKNOWN",
    "params": [
      "hForm",
      "hField"
    ],
    "doc": "Gets the current text from a form field."
  },
  "formgoto": {
    "name": "FormGoto",
    "returnType": "UNKNOWN",
    "params": [
      "hForm"
    ],
    "doc": "Goes to a specified form. The form is displayed on top of all windows and the keyboard focus is set to this form."
  },
  "formgroupbox": {
    "name": "FormGroupBox",
    "returnType": "UNKNOWN",
    "params": [
      "Col",
      "Row",
      "Width",
      "Height [",
      "Text]"
    ],
    "doc": "Adds a group box to the current form."
  },
  "forminput": {
    "name": "FormInput",
    "returnType": "UNKNOWN",
    "params": [
      "Col",
      "Row",
      "Prompt",
      "Text",
      "Width [",
      "maxTextLength]"
    ],
    "doc": "Adds a prompt and edit field to the current form. You should call this function only after the FormNew() function and before the FormRead() function. When FormRead() is called, the form will display with the prompt and edit box. The operator's input is passed back as a string (Text)."
  },
  "formlistaddtext": {
    "name": "FormListAddText",
    "returnType": "UNKNOWN",
    "params": [
      "hForm",
      "hField",
      "Text"
    ],
    "doc": "Adds a new text entry to a combo box or a list box while the form is displayed."
  },
  "formlistbox": {
    "name": "FormListBox",
    "returnType": "UNKNOWN",
    "params": [
      "Col",
      "Row",
      "Width",
      "Height",
      "sBuf [",
      "Mode]"
    ],
    "doc": "Adds a list box to the current form."
  },
  "formlistdeletetext": {
    "name": "FormListDeleteText",
    "returnType": "UNKNOWN",
    "params": [
      "hForm",
      "hField",
      "Text"
    ],
    "doc": "Deletes an existing text entry from a combo box or a list box while the form is displayed."
  },
  "formlistselecttext": {
    "name": "FormListSelectText",
    "returnType": "UNKNOWN",
    "params": [
      "hForm",
      "hField",
      "Text"
    ],
    "doc": "Selects (highlights) a text entry in a Combo box or a List box while the form is displayed."
  },
  "formnew": {
    "name": "FormNew",
    "returnType": "UNKNOWN",
    "params": [
      "Title",
      "Width",
      "Height",
      "Mode"
    ],
    "doc": "Creates a new data entry form and defines its size and mode."
  },
  "formnumpad": {
    "name": "FormNumPad",
    "returnType": "UNKNOWN",
    "params": [
      "Title",
      "Input",
      "Mode"
    ],
    "doc": "Provides a keypad form for the operator to add numeric values."
  },
  "formopenfile": {
    "name": "FormOpenFile",
    "returnType": "UNKNOWN",
    "params": [
      "sTitle",
      "sFileName",
      "sFilter",
      "[bResetToDefault]"
    ],
    "doc": "Displays a File Open dialog box."
  },
  "formpassword": {
    "name": "FormPassword",
    "returnType": "UNKNOWN",
    "params": [
      "Col",
      "Row",
      "Prompt",
      "Password",
      "Width"
    ],
    "doc": "Adds both a password prompt and edit field to the current form. You should call this function only after the FormNew() function and before the FormRead() function. When FormRead() is called, the form will also display the password prompt and edit field."
  },
  "formposition": {
    "name": "FormPosition",
    "returnType": "UNKNOWN",
    "params": [
      "X",
      "Y",
      "Mode"
    ],
    "doc": "Sets the position of a form on the screen, before it is displayed."
  },
  "formprompt": {
    "name": "FormPrompt",
    "returnType": "UNKNOWN",
    "params": [
      "Col",
      "Row",
      "Prompt [",
      "Width] [",
      "Height]"
    ],
    "doc": "Adds a prompt field to the current form."
  },
  "formradiobutton": {
    "name": "FormRadioButton",
    "returnType": "UNKNOWN",
    "params": [
      "Col",
      "Row",
      "sText",
      "sBuf"
    ],
    "doc": "Adds a radio button to the current form, allowing the operator to make a selection from a multiple choice list."
  },
  "formread": {
    "name": "FormRead",
    "returnType": "UNKNOWN",
    "params": [
      "Mode"
    ],
    "doc": "Displays the current form (created with the FormNew() function), with all the fields that were added (with the form field functions)."
  },
  "formsaveasfile": {
    "name": "FormSaveAsFile",
    "returnType": "UNKNOWN",
    "params": [
      "sTitle",
      "sFileName",
      "sFilter [",
      "sDefExt]"
    ],
    "doc": "Displays a File Save As dialog box."
  },
  "formsecurepassword": {
    "name": "FormSecurePassword",
    "returnType": "UNKNOWN",
    "params": [
      "Col",
      "Row",
      "Prompt",
      "Password",
      "Width"
    ],
    "doc": "Adds both a password prompt and edit field to the current form."
  },
  "formselectprinter": {
    "name": "FormSelectPrinter",
    "returnType": "UNKNOWN",
    "params": [],
    "doc": "Displays the Select Printer dialog box."
  },
  "formsetdata": {
    "name": "FormSetData",
    "returnType": "UNKNOWN",
    "params": [
      "hForm"
    ],
    "doc": "Sets all the edit data from the string buffers into the form."
  },
  "formsetinst": {
    "name": "FormSetInst",
    "returnType": "UNKNOWN",
    "params": [
      "hForm",
      "hField",
      "iData",
      "sData"
    ],
    "doc": "Associates an integer and string value with each field on a form."
  },
  "formsettext": {
    "name": "FormSetText",
    "returnType": "UNKNOWN",
    "params": [
      "hForm",
      "hField",
      "Text"
    ],
    "doc": "Sets new field text on a field. This function allows you to change field text while the form is displayed."
  },
  "formwndhnd": {
    "name": "FormWndHnd",
    "returnType": "UNKNOWN",
    "params": [
      "hForm"
    ],
    "doc": "Gets the window handle for the given form."
  },
  "ftpclose": {
    "name": "FTPClose",
    "returnType": "UNKNOWN",
    "params": [
      "hndFTP"
    ],
    "doc": "Closes an FTP session."
  },
  "ftpfilecopy": {
    "name": "FTPFileCopy",
    "returnType": "UNKNOWN",
    "params": [
      "hndFTP",
      "sSrcPath",
      "sDestPath"
    ],
    "doc": "Copies a file from the FTP server to the Internet Display Client."
  },
  "ftpfilefind": {
    "name": "FTPFileFind",
    "returnType": "UNKNOWN",
    "params": [
      "hndFTP",
      "sPath"
    ],
    "doc": "Finds a file on the FTP server that matches a specified search criteria."
  },
  "ftpfilefindclose": {
    "name": "FTPFileFindClose",
    "returnType": "UNKNOWN",
    "params": [
      "hndFTP"
    ],
    "doc": "Closes a find (started with FTPFileFind) that did not run to completion."
  },
  "ftpopen": {
    "name": "FTPOpen",
    "returnType": "UNKNOWN",
    "params": [
      "[sIPAddress] [",
      "sUsername] [",
      "sPassword]"
    ],
    "doc": "Connects to an FTP server."
  },
  "fullname": {
    "name": "FullName",
    "returnType": "UNKNOWN",
    "params": [],
    "doc": "Gets the full name of the user who is currently logged on to the system. The user can be a Plant SCADA or a Windows user."
  },
  "fuzzyclose": {
    "name": "FuzzyClose",
    "returnType": "UNKNOWN",
    "params": [
      "hFuzzy"
    ],
    "doc": "Frees all memory and information for the specified instance."
  },
  "fuzzygetcodevalue": {
    "name": "FuzzyGetCodeValue",
    "returnType": "UNKNOWN",
    "params": [
      "hFuzzy",
      "iIOIndex",
      "NoHitFlag"
    ],
    "doc": "Gets a value for the specified input of the specified instance."
  },
  "fuzzygetshellvalue": {
    "name": "FuzzyGetShellValue",
    "returnType": "UNKNOWN",
    "params": [
      "hFuzzy",
      "iIOIndex",
      "NoHitFlag"
    ],
    "doc": "Gets a value for the specified input of the specified instance."
  },
  "fuzzyopen": {
    "name": "FuzzyOpen",
    "returnType": "UNKNOWN",
    "params": [
      "sFile"
    ],
    "doc": "This function loads a *.FTR file, allocates memory and creates a handle for this fuzzy instance."
  },
  "fuzzysetcodevalue": {
    "name": "FuzzySetCodeValue",
    "returnType": "UNKNOWN",
    "params": [
      "hFuzzy",
      "iIOIndex",
      "iCodeValue"
    ],
    "doc": "Sets a value for the specified input of the specified instance."
  },
  "fuzzysetshellvalue": {
    "name": "FuzzySetShellValue",
    "returnType": "UNKNOWN",
    "params": [
      "hFuzzy",
      "iIOIndex",
      "rShellValue"
    ],
    "doc": "Sets a value for the specified input of the specified instance."
  },
  "fuzzytrace": {
    "name": "FuzzyTrace",
    "returnType": "UNKNOWN",
    "params": [
      "hFuzzy",
      "TraceOn"
    ],
    "doc": "Controls the trace process (starting and stopping) of the specified instance."
  },
  "getarea": {
    "name": "GetArea",
    "returnType": "UNKNOWN",
    "params": [],
    "doc": "Gets the current logged-in areas."
  },
  "getbluevalue": {
    "name": "GetBlueValue",
    "returnType": "UNKNOWN",
    "params": [
      "nPackedRGB"
    ],
    "doc": "Returns the Blue component of a packed RGB color."
  },
  "getenv": {
    "name": "GetEnv",
    "returnType": "UNKNOWN",
    "params": [
      "sName"
    ],
    "doc": "Gets a DOS environment variable."
  },
  "getevent": {
    "name": "GetEvent",
    "returnType": "UNKNOWN",
    "params": [
      "nType"
    ],
    "doc": "Gets the function handle of the existing callback event handler."
  },
  "getgreenvalue": {
    "name": "GetGreenValue",
    "returnType": "UNKNOWN",
    "params": [
      "nPackedRGB"
    ],
    "doc": "Returns the green component of a packed RGB color."
  },
  "getlanguage": {
    "name": "GetLanguage",
    "returnType": "UNKNOWN",
    "params": [
      "INT iType"
    ],
    "doc": "Gets the language currently used on the display client."
  },
  "getlogging": {
    "name": "GetLogging",
    "returnType": "UNKNOWN",
    "params": [
      "Section",
      "Name"
    ],
    "doc": "Gets the current value for logging parameters."
  },
  "getpriv": {
    "name": "GetPriv",
    "returnType": "UNKNOWN",
    "params": [
      "Priv",
      "Area"
    ],
    "doc": "Checks if the current user has a privilege for a specified area."
  },
  "getredvalue": {
    "name": "GetRedValue",
    "returnType": "UNKNOWN",
    "params": [
      "nPackedRGB"
    ],
    "doc": "Returns the red component of a packed RGB color."
  },
  "getwintitle": {
    "name": "GetWinTitle",
    "returnType": "UNKNOWN",
    "params": [],
    "doc": "Returns the name of the active window as a string."
  },
  "grpclose": {
    "name": "GrpClose",
    "returnType": "UNKNOWN",
    "params": [
      "hGrp"
    ],
    "doc": "Closes a group."
  },
  "grpdelete": {
    "name": "GrpDelete",
    "returnType": "UNKNOWN",
    "params": [
      "hGrp",
      "Value"
    ],
    "doc": "Deletes a single element or all elements from a group."
  },
  "grpfirst": {
    "name": "GrpFirst",
    "returnType": "UNKNOWN",
    "params": [
      "hGrp"
    ],
    "doc": "Gets the value of the first element in a group."
  },
  "grpin": {
    "name": "GrpIn",
    "returnType": "UNKNOWN",
    "params": [
      "hGrp",
      "Value"
    ],
    "doc": "Determines if an element is in a group."
  },
  "grpinsert": {
    "name": "GrpInsert",
    "returnType": "UNKNOWN",
    "params": [
      "hGrp",
      "Value"
    ],
    "doc": "Adds an element (or another group) to a group."
  },
  "grpmath": {
    "name": "GrpMath",
    "returnType": "UNKNOWN",
    "params": [
      "hResult",
      "hOne",
      "hTwo",
      "Type"
    ],
    "doc": "Performs mathematical operations on two groups, and stores the result in another group."
  },
  "grpname": {
    "name": "GrpName",
    "returnType": "UNKNOWN",
    "params": [
      "hGrp"
    ],
    "doc": "Gets the name of a group from a group handle."
  },
  "grpnext": {
    "name": "GrpNext",
    "returnType": "UNKNOWN",
    "params": [
      "hGrp",
      "Value"
    ],
    "doc": "Gets the value of the next element in a group."
  },
  "grpopen": {
    "name": "GrpOpen",
    "returnType": "UNKNOWN",
    "params": [
      "sName",
      "nMode"
    ],
    "doc": "Creates a group and returns a group handle, or gets the group handle of an existing group."
  },
  "grptostr": {
    "name": "GrpToStr",
    "returnType": "UNKNOWN",
    "params": [
      "hGrp"
    ],
    "doc": "Converts a group into a string of values separated by \" , \" and \" .. \". You can then display the group on the screen or in a report."
  },
  "halt": {
    "name": "Halt",
    "returnType": "UNKNOWN",
    "params": [],
    "doc": "Stops the execution of the current Cicode task and returns to Plant SCADA."
  },
  "hextostr": {
    "name": "HexToStr",
    "returnType": "UNKNOWN",
    "params": [
      "Number",
      "Width"
    ],
    "doc": "Converts a number into a hexadecimal string."
  },
  "highbyte": {
    "name": "HighByte",
    "returnType": "UNKNOWN",
    "params": [
      "TwoByteInteger"
    ],
    "doc": "Gets the high-order byte of a two-byte integer."
  },
  "highword": {
    "name": "HighWord",
    "returnType": "UNKNOWN",
    "params": [
      "FourByteInteger"
    ],
    "doc": "Gets the high-order word of a four-byte integer."
  },
  "hwalarmque": {
    "name": "HwAlarmQue",
    "returnType": "UNKNOWN",
    "params": [],
    "doc": "Returns the handle of the hardware alarm queue."
  },
  "infoform": {
    "name": "InfoForm",
    "returnType": "UNKNOWN",
    "params": [
      "Mode"
    ],
    "doc": "Displays graphics object information for the object under the mouse pointer. If there is no object directly under the mouse pointer, it displays information for the nearest object."
  },
  "infoforman": {
    "name": "InfoFormAn",
    "returnType": "UNKNOWN",
    "params": [
      "AN [",
      "Mode]"
    ],
    "doc": "Displays graphics object information for a specified AN."
  },
  "input": {
    "name": "Input",
    "returnType": "UNKNOWN",
    "params": [
      "Title",
      "Prompt",
      "Default"
    ],
    "doc": "Displays a dialog box in which an operator can input a single value."
  },
  "inttoreal": {
    "name": "IntToReal",
    "returnType": "UNKNOWN",
    "params": [
      "Number"
    ],
    "doc": "Converts an integer into a real (floating point) number."
  },
  "inttostr": {
    "name": "IntToStr",
    "returnType": "UNKNOWN",
    "params": [
      "Number"
    ],
    "doc": "Converts a number into a string."
  },
  "iodevicecontrol": {
    "name": "IODeviceControl",
    "returnType": "UNKNOWN",
    "params": [
      "IODevice",
      "nType",
      "Data [",
      "sClusterName] [",
      "ServerName]"
    ],
    "doc": "Provides control of individual I/O devices."
  },
  "iodeviceinfo": {
    "name": "IODeviceInfo",
    "returnType": "UNKNOWN",
    "params": [
      "IODevice",
      "Type [",
      "sClusterName] [",
      "ServerName]"
    ],
    "doc": "Gets information about a specified I/O device."
  },
  "iodevicestats": {
    "name": "IODeviceStats",
    "returnType": "UNKNOWN",
    "params": [],
    "doc": "Gets statistical information for all I/O devices, and displays the information in a dialog box."
  },
  "iserror": {
    "name": "IsError",
    "returnType": "UNKNOWN",
    "params": [],
    "doc": "Gets the current error value. The error value is set when any error is detected, and is reset after this function is called."
  },
  "kercmd": {
    "name": "KerCmd",
    "returnType": "UNKNOWN",
    "params": [
      "Window",
      "sCommand"
    ],
    "doc": "Executes a command in a Kernel window."
  },
  "kernelqueuelength": {
    "name": "KernelQueueLength",
    "returnType": "UNKNOWN",
    "params": [
      "sName"
    ],
    "doc": "Obtains the number of records in a queue."
  },
  "kerneltableinfo": {
    "name": "KernelTableInfo",
    "returnType": "UNKNOWN",
    "params": [
      "sTable",
      "sRecord",
      "sField"
    ],
    "doc": "Provides a consistent method of accessing items within Kernel Table."
  },
  "kerneltableitemcount": {
    "name": "KernelTableItemCount",
    "returnType": "UNKNOWN",
    "params": [
      "sName"
    ],
    "doc": "Obtains the number of rows in a Kernel Table."
  },
  "keyallowcursor": {
    "name": "KeyAllowCursor",
    "returnType": "UNKNOWN",
    "params": [
      "nAN",
      "State"
    ],
    "doc": "Allows (or disallows) the command cursor to move to the specified AN or to all ANs."
  },
  "keybs": {
    "name": "KeyBs",
    "returnType": "UNKNOWN",
    "params": [],
    "doc": "Removes the last key from the key command line."
  },
  "keydown": {
    "name": "KeyDown",
    "returnType": "UNKNOWN",
    "params": [],
    "doc": "Moves the command cursor down the page to the closest AN."
  },
  "keyget": {
    "name": "KeyGet",
    "returnType": "UNKNOWN",
    "params": [],
    "doc": "Gets the last key code from the key command line."
  },
  "keygetcursor": {
    "name": "KeyGetCursor",
    "returnType": "UNKNOWN",
    "params": [],
    "doc": "Gets the AN at the position of the command cursor."
  },
  "keyleft": {
    "name": "KeyLeft",
    "returnType": "UNKNOWN",
    "params": [],
    "doc": "Moves the command cursor left (across the page) to the closest AN."
  },
  "keymove": {
    "name": "KeyMove",
    "returnType": "UNKNOWN",
    "params": [
      "Direction"
    ],
    "doc": "Moves the command cursor in a specified direction to the closest AN."
  },
  "keypeek": {
    "name": "KeyPeek",
    "returnType": "UNKNOWN",
    "params": [
      "Offset"
    ],
    "doc": "Gets the ascii key code from the key command line (at a specified offset), without removing the key from the key command line."
  },
  "keyput": {
    "name": "KeyPut",
    "returnType": "UNKNOWN",
    "params": [
      "KeyCode"
    ],
    "doc": "Puts an ASCII key code or Keyboard key code into the last position of the key command line."
  },
  "keyputstr": {
    "name": "KeyPutStr",
    "returnType": "UNKNOWN",
    "params": [
      "String"
    ],
    "doc": "Puts a string at the end of the key command line. The string can contain either key names or data characters."
  },
  "keyreplay": {
    "name": "KeyReplay",
    "returnType": "UNKNOWN",
    "params": [
      "sub"
    ],
    "doc": "Replays the last key sequence (except for the last key, which would execute the command)."
  },
  "keyreplayall": {
    "name": "KeyReplayAll",
    "returnType": "UNKNOWN",
    "params": [],
    "doc": "Replays the last key sequence and executes the command."
  },
  "keyright": {
    "name": "KeyRight",
    "returnType": "UNKNOWN",
    "params": [],
    "doc": "Moves the command cursor right (across the page) to the closest AN."
  },
  "keysetcursor": {
    "name": "KeySetCursor",
    "returnType": "UNKNOWN",
    "params": [
      "nAN"
    ],
    "doc": "Displays the command cursor at a specified AN."
  },
  "keysetseq": {
    "name": "KeySetSeq",
    "returnType": "UNKNOWN",
    "params": [
      "sKeySeq",
      "AN",
      "Fn"
    ],
    "doc": "Adds a keyboard sequence to the current page at runtime. The key sequence is only added to the current window."
  },
  "keyup": {
    "name": "KeyUp",
    "returnType": "UNKNOWN",
    "params": [],
    "doc": "Moves the command cursor up the page to the closest AN."
  },
  "languagefiletranslate": {
    "name": "LanguageFileTranslate",
    "returnType": "UNKNOWN",
    "params": [
      "sSourceFile",
      "sDestFile"
    ],
    "doc": "Translates an ASCII file into a local language. Use this function to translate RTF reports for viewing on client screens."
  },
  "leavecriticalsection": {
    "name": "LeaveCriticalSection",
    "returnType": "UNKNOWN",
    "params": [
      "sName"
    ],
    "doc": "Relinquishes the current thread's ownership of a critical section (shared critical resource)."
  },
  "libalarmfilterform": {
    "name": "LibAlarmFilterForm",
    "returnType": "UNKNOWN",
    "params": [
      "[INT FormType [",
      "STRING FilterSrc [",
      "STRING Title [",
      "INT Mode [",
      "STRING AppliedCallbackFn]]]]]"
    ],
    "doc": "Displays a generic alarm filter pop-up for specifying filtering criteria for either an alarm list or a named filter."
  },
  "ln": {
    "name": "Ln",
    "returnType": "UNKNOWN",
    "params": [
      "Number"
    ],
    "doc": "Calculates the natural (base e) logarithm of a number."
  },
  "log": {
    "name": "Log",
    "returnType": "UNKNOWN",
    "params": [
      "Number"
    ],
    "doc": "Calculates the base 10 logarithm of a number."
  },
  "login": {
    "name": "Login",
    "returnType": "UNKNOWN",
    "params": [
      "sUserName",
      "sPassword [",
      "bSync][",
      "sLanguage]"
    ],
    "doc": "Logs a user into the system using Plant SCADA security and gives users access to the areas and privileges assigned to them in the Users database. Not available when logged in as Windows user."
  },
  "loginform": {
    "name": "LoginForm",
    "returnType": "UNKNOWN",
    "params": [
      "[sUserName [",
      "sPassword [",
      "sLanguage]]]"
    ],
    "doc": "Displays a form in which a user can log in to the system by entering their name and password and local language."
  },
  "logout": {
    "name": "Logout",
    "returnType": "UNKNOWN",
    "params": [],
    "doc": "Logs the current user out of the Plant SCADA system."
  },
  "logoutidle": {
    "name": "LogoutIdle",
    "returnType": "UNKNOWN",
    "params": [
      "Idle"
    ],
    "doc": "Sets an idle time for logging out the current user."
  },
  "lowbyte": {
    "name": "LowByte",
    "returnType": "UNKNOWN",
    "params": [
      "TwoByteInteger"
    ],
    "doc": "Gets the low-order byte of a two-byte integer."
  },
  "lowword": {
    "name": "LowWord",
    "returnType": "UNKNOWN",
    "params": [
      "FourByteInteger"
    ],
    "doc": "Gets the low-order word of a four-byte integer."
  },
  "mailerror": {
    "name": "MailError",
    "returnType": "UNKNOWN",
    "params": [],
    "doc": "Gets the last mail error code. The error code is extracted from the MAPI mail system."
  },
  "maillogoff": {
    "name": "MailLogoff",
    "returnType": "UNKNOWN",
    "params": [],
    "doc": "Logs off from the mail system."
  },
  "maillogon": {
    "name": "MailLogon",
    "returnType": "UNKNOWN",
    "params": [
      "sName",
      "sPassword",
      "iMode"
    ],
    "doc": "Logs on to the mail system."
  },
  "mailread": {
    "name": "MailRead",
    "returnType": "UNKNOWN",
    "params": [
      "sName",
      "sSubject",
      "sNote",
      "sFileName",
      "iMode"
    ],
    "doc": "Reads a standard mail message. The mail message can contain text, an attached file, or both."
  },
  "mailsend": {
    "name": "MailSend",
    "returnType": "UNKNOWN",
    "params": [
      "sName",
      "sSubject",
      "sNote",
      "sFileName",
      "iMode"
    ],
    "doc": "Sends a standard mail message. The mail message can contain text, an attached file, or both."
  },
  "makecitectcolour": {
    "name": "MakeCitectColour",
    "returnType": "UNKNOWN",
    "params": [
      "nRed",
      "nGreen",
      "nBlue"
    ],
    "doc": "Creates a color from red, green and blue component parts."
  },
  "mapclear": {
    "name": "MapClear",
    "returnType": "UNKNOWN",
    "params": [
      "STRING sMapName"
    ],
    "doc": "Clear all entries in a map."
  },
  "mapclose": {
    "name": "MapClose",
    "returnType": "UNKNOWN",
    "params": [
      "STRING sMapName"
    ],
    "doc": "Closes a previously created map."
  },
  "mapexists": {
    "name": "MapExists",
    "returnType": "UNKNOWN",
    "params": [
      "STRING sMapName"
    ],
    "doc": "Checks for the existence of the map."
  },
  "mapkeycount": {
    "name": "MapKeyCount",
    "returnType": "UNKNOWN",
    "params": [
      "STRING sMapName"
    ],
    "doc": "Retrieves the number of keys in a map."
  },
  "mapkeydelete": {
    "name": "MapKeyDelete",
    "returnType": "UNKNOWN",
    "params": [
      "STRING sMapName",
      "STRING sKeyName"
    ],
    "doc": "Use this function to delete a  key and value from a map."
  },
  "mapkeyexists": {
    "name": "MapKeyExists",
    "returnType": "UNKNOWN",
    "params": [
      "STRING sMapName",
      "STRING sKeyName"
    ],
    "doc": "Checsk if a key exists in a map."
  },
  "mapkeyfirst": {
    "name": "MapKeyFirst",
    "returnType": "UNKNOWN",
    "params": [
      "STRING sMapName"
    ],
    "doc": "Use this function to retrieve the first property key in a cicode object."
  },
  "mapkeynext": {
    "name": "MapKeyNext",
    "returnType": "UNKNOWN",
    "params": [
      "STRING sMapName",
      "STRING sKeyName"
    ],
    "doc": "Retrieves the next key after the supplied key in a map."
  },
  "mapopen": {
    "name": "MapOpen",
    "returnType": "UNKNOWN",
    "params": [
      "STRING sMapName",
      "INT nOpenMode",
      "STRING sCloseCallback"
    ],
    "doc": "Creates a new map or to open an existing map."
  },
  "mapvalueget": {
    "name": "MapValueGet",
    "returnType": "UNKNOWN",
    "params": [
      "STRING sMapName",
      "STRING sKeyName"
    ],
    "doc": "Gets the value from a key in a map."
  },
  "mapvalueset": {
    "name": "MapValueSet",
    "returnType": "UNKNOWN",
    "params": [
      "STRING sMapName",
      "STRING sKeyName",
      "VARIANT Value INT nSetMode"
    ],
    "doc": "Sets a value of a map key."
  },
  "mapvaluesetquality": {
    "name": "MapValueSetQuality",
    "returnType": "UNKNOWN",
    "params": [
      "STRING sMapName",
      "STRING sKeyName",
      "QUALITY Quality"
    ],
    "doc": "Sets the quality of a property in a cicode object."
  },
  "max": {
    "name": "Max",
    "returnType": "UNKNOWN",
    "params": [
      "Number1",
      "Number2"
    ],
    "doc": "Gets the higher of two numbers."
  },
  "menugetchild": {
    "name": "MenuGetChild",
    "returnType": "UNKNOWN",
    "params": [
      "hParent",
      "sName"
    ],
    "doc": "Returns the handle to the child node with the specified name."
  },
  "menugetfirstchild": {
    "name": "MenuGetFirstChild",
    "returnType": "UNKNOWN",
    "params": [
      "hNode"
    ],
    "doc": "Returns the handle to the first child of a menu node."
  },
  "menugetgenericnode": {
    "name": "MenuGetGenericNode",
    "returnType": "UNKNOWN",
    "params": [
      "[bCreate]"
    ],
    "doc": "Returns the handle to the base node of the menu tree for the generic pages."
  },
  "menugetnextchild": {
    "name": "MenuGetNextChild",
    "returnType": "UNKNOWN",
    "params": [
      "hChild"
    ],
    "doc": "Returns the next node that shares the same parent."
  },
  "menugetpagenode": {
    "name": "MenuGetPageNode",
    "returnType": "UNKNOWN",
    "params": [
      "sPage [",
      "nMode]"
    ],
    "doc": "Returns the handle to the base node of the menu tree of a specified page."
  },
  "menugetparent": {
    "name": "MenuGetParent",
    "returnType": "UNKNOWN",
    "params": [
      "hNode"
    ],
    "doc": "Returns the parent node of the menu item."
  },
  "menugetprevchild": {
    "name": "MenuGetPrevChild",
    "returnType": "UNKNOWN",
    "params": [
      "hChild"
    ],
    "doc": "Returns the previous node that shares the same parent."
  },
  "menugetwindownode": {
    "name": "MenuGetWindowNode",
    "returnType": "UNKNOWN",
    "params": [
      "hWin"
    ],
    "doc": "Returns the handle to the root node for a given window."
  },
  "menunodeaddchild": {
    "name": "MenuNodeAddChild",
    "returnType": "UNKNOWN",
    "params": [
      "hParent",
      "sName",
      "sCommandName [",
      "sCommandArgs] [",
      "sSymbol] [",
      "iOrder]"
    ],
    "doc": "Dynamically add a new item to the menu at runtime."
  },
  "menunodegetcurr": {
    "name": "MenuNodeGetCurr",
    "returnType": "UNKNOWN",
    "params": [],
    "doc": "Return the item value of the specified menu node."
  },
  "menunodegetdepth": {
    "name": "MenuNodeGetDepth",
    "returnType": "UNKNOWN",
    "params": [
      "hNode"
    ],
    "doc": "Return the item value of the specified menu node."
  },
  "menunodegetexpanded": {
    "name": "MenuNodeGetExpanded",
    "returnType": "UNKNOWN",
    "params": [
      "hNode"
    ],
    "doc": "Returns the expansion state value of the specified menu node."
  },
  "menunodegetproperty": {
    "name": "MenuNodeGetProperty",
    "returnType": "UNKNOWN",
    "params": [
      "hNode",
      "iField"
    ],
    "doc": "Return the item value of the specified menu node."
  },
  "menunodegettargetpage": {
    "name": "MenuNodeGetTargetPage",
    "returnType": "UNKNOWN",
    "params": [
      "hNode"
    ],
    "doc": "Return the item value of the specified menu node."
  },
  "menunodehascommand": {
    "name": "MenuNodeHasCommand",
    "returnType": "UNKNOWN",
    "params": [
      "hNode"
    ],
    "doc": "Checks whether the menu node has a valid cicode command associated with it."
  },
  "menunodeisdisabled": {
    "name": "MenuNodeIsDisabled",
    "returnType": "UNKNOWN",
    "params": [
      "hNode"
    ],
    "doc": "Checks whether the menu node is disabled by evaluating its DisabledWhen cicode expression."
  },
  "menunodeishidden": {
    "name": "MenuNodeIsHidden",
    "returnType": "UNKNOWN",
    "params": [
      "hNode"
    ],
    "doc": "Checks whether the menu node is hidden by evaluating its HiddenWhen Cicode expression."
  },
  "menunoderemove": {
    "name": "MenuNodeRemove",
    "returnType": "UNKNOWN",
    "params": [
      "hNode"
    ],
    "doc": "Remove the menu node from the menu tree."
  },
  "menunoderuncommand": {
    "name": "MenuNodeRunCommand",
    "returnType": "UNKNOWN",
    "params": [
      "hNode"
    ],
    "doc": "Run the associated command for a menu node."
  },
  "menunodesetdisabledwhen": {
    "name": "MenuNodeSetDisabledWhen",
    "returnType": "UNKNOWN",
    "params": [
      "hNode",
      "sDisabledWhenName [",
      "sDisabledWhenArgs] [",
      "iDisabledStyle]"
    ],
    "doc": "Set the DisabledWhen expression for a newly added node."
  },
  "menunodesetexpanded": {
    "name": "MenuNodeSetExpanded",
    "returnType": "UNKNOWN",
    "params": [
      "hNode. iValue"
    ],
    "doc": "Set the expansion state value of the specified menu node in number."
  },
  "menunodesethiddenwhen": {
    "name": "MenuNodeSetHiddenWhen",
    "returnType": "UNKNOWN",
    "params": [
      "hNode",
      "sHiddenWhenName [",
      "sHiddenWhenArgs]"
    ],
    "doc": "Set the HiddenWhen expression for a newly added node."
  },
  "menunodesetproperty": {
    "name": "MenuNodeSetProperty",
    "returnType": "UNKNOWN",
    "params": [
      "hNode",
      "iField",
      "sValue"
    ],
    "doc": "Set the item value of the specified menu node."
  },
  "menureload": {
    "name": "MenuReload",
    "returnType": "UNKNOWN",
    "params": [],
    "doc": "Reload base Menu Configuration from the compiled database."
  },
  "message": {
    "name": "Message",
    "returnType": "UNKNOWN",
    "params": [
      "Title",
      "Prompt",
      "Mode"
    ],
    "doc": "Displays a message box on the screen and waits for the user to select the OK or Cancel button."
  },
  "min": {
    "name": "Min",
    "returnType": "UNKNOWN",
    "params": [
      "Number1",
      "Number2"
    ],
    "doc": "Returns the lower of two numbers."
  },
  "msgbrdcst": {
    "name": "MsgBrdcst",
    "returnType": "UNKNOWN",
    "params": [
      "Name",
      "Type",
      "Str [",
      "sClusterName]"
    ],
    "doc": "Broadcasts a message to all the clients of a server."
  },
  "msgclose": {
    "name": "MsgClose",
    "returnType": "UNKNOWN",
    "params": [
      "Name",
      "hMsg"
    ],
    "doc": "Closes a message. After the message is closed, the message post function (the callback function specified in the MsgOpen() function) is not called if a message is received."
  },
  "msggetcurr": {
    "name": "MsgGetCurr",
    "returnType": "UNKNOWN",
    "params": [],
    "doc": "Gets the handle of the client message that called the report or remote procedure that is currently running."
  },
  "msgopen": {
    "name": "MsgOpen",
    "returnType": "UNKNOWN",
    "params": [
      "Name",
      "Mode",
      "Fn [",
      "sClusterName]"
    ],
    "doc": "Opens a message session with a Plant SCADA server."
  },
  "msgread": {
    "name": "MsgRead",
    "returnType": "UNKNOWN",
    "params": [
      "Type",
      "Str"
    ],
    "doc": "Reads a message from a message session."
  },
  "msgrpc": {
    "name": "MsgRPC",
    "returnType": "UNKNOWN",
    "params": [
      "hMsg",
      "sName",
      "Arg",
      "Mode"
    ],
    "doc": "Calls a remote procedure on another Plant SCADA computer."
  },
  "msgstate": {
    "name": "MsgState",
    "returnType": "UNKNOWN",
    "params": [
      "hMsg"
    ],
    "doc": "Verifies the status of a message session."
  },
  "msgwrite": {
    "name": "MsgWrite",
    "returnType": "UNKNOWN",
    "params": [
      "hMsg",
      "Type",
      "Str"
    ],
    "doc": "Writes a message to a message session."
  },
  "multimonitorstart": {
    "name": "MultiMonitorStart",
    "returnType": "UNKNOWN",
    "params": [],
    "doc": "Displays a Plant SCADA window on each of the configured monitors when a display client starts up."
  },
  "multisignatureform": {
    "name": "MultiSignatureForm",
    "returnType": "UNKNOWN",
    "params": [],
    "doc": "Displays a form that allows up to 4 users to have their credentials verified in order to approve an operation."
  },
  "multisignaturetagwrite": {
    "name": "MultiSignatureTagWrite",
    "returnType": "UNKNOWN",
    "params": [],
    "doc": "Displays a form that allows up to four users to have their credentials verified in order to approve a write of a specific value to a specific tag."
  },
  "name": {
    "name": "Name",
    "returnType": "UNKNOWN",
    "params": [
      "[bIncludeDomain]"
    ],
    "doc": "Gets the name of the operator who is currently logged on to the display system."
  },
  "objectassociateevents": {
    "name": "ObjectAssociateEvents",
    "returnType": "UNKNOWN",
    "params": [
      "sEventClass",
      "hSource"
    ],
    "doc": "Allows you to change the ActiveX object's event class."
  },
  "objectassociatepropertywithtag": {
    "name": "ObjectAssociatePropertyWithTag",
    "returnType": "UNKNOWN",
    "params": [
      "sObject",
      "sPropertyName",
      "sTagName [",
      "sOnChangeEvent]"
    ],
    "doc": "Establishes an association between an ActiveX property and a variable tag."
  },
  "objectbyname": {
    "name": "ObjectByName",
    "returnType": "UNKNOWN",
    "params": [
      "STRING Name"
    ],
    "doc": "Retrieves an ActiveX object. This is useful when you know the object by name only."
  },
  "objecthasinterface": {
    "name": "ObjectHasInterface",
    "returnType": "UNKNOWN",
    "params": [
      "hObject",
      "sInterface"
    ],
    "doc": "Queries the ActiveX component to determine if its specific interface is supported."
  },
  "objectisvalid": {
    "name": "ObjectIsValid",
    "returnType": "UNKNOWN",
    "params": [
      "hObject"
    ],
    "doc": "Determines if the given handle for an object is a valid handle."
  },
  "objecttostr": {
    "name": "ObjectToStr",
    "returnType": "UNKNOWN",
    "params": [
      "hObject"
    ],
    "doc": "Converts an object handle to a string."
  },
  "oledatetotime": {
    "name": "OLEDateToTime",
    "returnType": "UNKNOWN",
    "params": [
      "OLEDate",
      "Local"
    ],
    "doc": "Converts an OLE DATE value (stored in a REAL) to a Plant SCADA time/date value."
  },
  "onevent": {
    "name": "OnEvent",
    "returnType": "UNKNOWN",
    "params": [
      "Type",
      "Fn"
    ],
    "doc": "Sets an event callback function for an event type. The callback function is called when the event occurs."
  },
  "packedrgb": {
    "name": "PackedRGB",
    "returnType": "UNKNOWN",
    "params": [
      "nRed",
      "nGreen",
      "nBlue"
    ],
    "doc": "Returns a packed RGB color based on specified red, green, and blue values."
  },
  "packedrgbtocitectcolour": {
    "name": "PackedRGBToCitectColour",
    "returnType": "UNKNOWN",
    "params": [
      "nPackedRGB"
    ],
    "doc": "Converts a packed RGB color into a calculated  color value."
  },
  "pagealarm": {
    "name": "PageAlarm",
    "returnType": "UNKNOWN",
    "params": [
      "[Category]"
    ],
    "doc": "Displays a category of active alarms on the alarm page."
  },
  "pageback": {
    "name": "PageBack",
    "returnType": "UNKNOWN",
    "params": [
      "[iCount]"
    ],
    "doc": "Displays the previously displayed page in the Window."
  },
  "pagedisabled": {
    "name": "PageDisabled",
    "returnType": "UNKNOWN",
    "params": [
      "[Category]"
    ],
    "doc": "Displays a category of disabled alarms on the disabled alarms page."
  },
  "pagedisplay": {
    "name": "PageDisplay",
    "returnType": "UNKNOWN",
    "params": [
      "Page",
      "[ClusterName]"
    ],
    "doc": "Displays a graphics page in the active window."
  },
  "pageexists": {
    "name": "PageExists",
    "returnType": "UNKNOWN",
    "params": [
      "STRING[sPageName]"
    ],
    "doc": "Use this function to check  if a particular page exists in your project."
  },
  "pagefile": {
    "name": "PageFile",
    "returnType": "UNKNOWN",
    "params": [
      "sName"
    ],
    "doc": "Displays a file on the page."
  },
  "pagefileinfo": {
    "name": "PageFileInfo",
    "returnType": "UNKNOWN",
    "params": [
      "sPageName",
      "nMode"
    ],
    "doc": "Returns the width or height of an unopened page."
  },
  "pagefileinfoex": {
    "name": "PageFileInfoEx",
    "returnType": "UNKNOWN",
    "params": [
      "sPage",
      "nMode"
    ],
    "doc": "Returns the width or height of an unopened page."
  },
  "pageforward": {
    "name": "PageForward",
    "returnType": "UNKNOWN",
    "params": [
      "[iCount]"
    ],
    "doc": "If PageBack() is called, PageForward() will restore the previously displayed page in the window."
  },
  "pagegetint": {
    "name": "PageGetInt",
    "returnType": "UNKNOWN",
    "params": [
      "sLabel [",
      "iWinNum]"
    ],
    "doc": "Returns the integer value associated with a variable name on a particular page."
  },
  "pagegetstr": {
    "name": "PageGetStr",
    "returnType": "UNKNOWN",
    "params": [
      "sLabel [",
      "iWinNum]"
    ],
    "doc": "Gets the string associated with a variable name on a particular page."
  },
  "pagegoto": {
    "name": "PageGoto",
    "returnType": "UNKNOWN",
    "params": [
      "Page",
      "ClusterName"
    ],
    "doc": "Displays a graphics page in the active window. The page needs to be in one of the operator's current areas."
  },
  "pagehardware": {
    "name": "PageHardware",
    "returnType": "UNKNOWN",
    "params": [],
    "doc": "Displays the active hardware alarms on the hardware alarms page."
  },
  "pagehistorydspmenu": {
    "name": "PageHistoryDspMenu",
    "returnType": "UNKNOWN",
    "params": [
      "[iType]"
    ],
    "doc": "Displays a pop-up menu which lists the page history of current window."
  },
  "pagehistoryempty": {
    "name": "PageHistoryEmpty",
    "returnType": "UNKNOWN",
    "params": [
      "[iType]"
    ],
    "doc": "Used to determine if the page history of the current window is empty."
  },
  "pagehome": {
    "name": "PageHome",
    "returnType": "UNKNOWN",
    "params": [
      "[sCluster]"
    ],
    "doc": "Displays the predefined home page in the window."
  },
  "pageinfo": {
    "name": "PageInfo",
    "returnType": "UNKNOWN",
    "params": [
      "nType"
    ],
    "doc": "Gets information about the current page."
  },
  "pagelast": {
    "name": "PageLast",
    "returnType": "UNKNOWN",
    "params": [],
    "doc": "Displays the graphics page that was last displayed. With this function, you can successively recall the last ten pages that were displayed."
  },
  "pagelistcount": {
    "name": "PageListCount",
    "returnType": "UNKNOWN",
    "params": [],
    "doc": "Gets number of pages in the page list of the current window."
  },
  "pagelistcurrent": {
    "name": "PageListCurrent",
    "returnType": "UNKNOWN",
    "params": [],
    "doc": "Gets Index of the current page in the page list of current window."
  },
  "pagelistdelete": {
    "name": "PageListDelete",
    "returnType": "UNKNOWN",
    "params": [
      "INT index"
    ],
    "doc": "Removes a page at the specific index from the page list of the current window."
  },
  "pagelistdisplay": {
    "name": "PageListDisplay",
    "returnType": "UNKNOWN",
    "params": [
      "INT index"
    ],
    "doc": "Recalls (displays) a page at the specific index in the page list of current window, and moves the current index to the page."
  },
  "pagelistinfo": {
    "name": "PageListInfo",
    "returnType": "STRING",
    "params": [
      "INT index",
      "[ INT type]"
    ],
    "doc": "Gets information of a page at the specific index in the page list of the current window."
  },
  "pagemenu": {
    "name": "PageMenu",
    "returnType": "UNKNOWN",
    "params": [],
    "doc": "Displays a menu page with page selection buttons."
  },
  "pagenext": {
    "name": "PageNext",
    "returnType": "UNKNOWN",
    "params": [],
    "doc": "Displays the next page as specified in the project."
  },
  "pagepeekcurrent": {
    "name": "PagePeekCurrent",
    "returnType": "UNKNOWN",
    "params": [],
    "doc": "Return the index in the page navigation history for the current page."
  },
  "pagepeeklast": {
    "name": "PagePeekLast",
    "returnType": "STRING",
    "params": [
      "iOffset [",
      "iType]"
    ],
    "doc": "Gets information about a Page at an offset in the page navigation history."
  },
  "pagepoplast": {
    "name": "PagePopLast",
    "returnType": "UNKNOWN",
    "params": [],
    "doc": "Gets the Page Name of the last item in the page navigation history and removes the page from the history."
  },
  "pagepopup": {
    "name": "PagePopUp",
    "returnType": "UNKNOWN",
    "params": [
      "sPage",
      "[",
      "sClusterName]"
    ],
    "doc": "Display pop up window at the mouse position."
  },
  "pageprev": {
    "name": "PagePrev",
    "returnType": "UNKNOWN",
    "params": [],
    "doc": "Displays the previous page as specified in the project."
  },
  "pageprocessanalyst": {
    "name": "PageProcessAnalyst",
    "returnType": "UNKNOWN",
    "params": [
      "sPage",
      "sPAVFile1 [",
      "iFileLocation1 [",
      "iButtonMask1 [",
      "sObjName1 [",
      "sPAVFile2 [",
      "iFileLocation2 [",
      "iButtonMask2 [",
      "sObjName2 ]]]]]]]"
    ],
    "doc": "Displays a Process Analyst page."
  },
  "pageprocessanalystpens": {
    "name": "PageProcessAnalystPens",
    "returnType": "UNKNOWN",
    "params": [
      "sPage",
      "sTag1 [",
      "sTag2..sTag8 [",
      "iButtonMask [",
      "sObjName [",
      "iPane [",
      "sPAVFile [",
      "iFileLocation ]]]]]]"
    ],
    "doc": "Display a page and add the specified pens to the first pane of the specified PA object on the page."
  },
  "pagepushlast": {
    "name": "PagePushLast",
    "returnType": "UNKNOWN",
    "params": [
      "Page"
    ],
    "doc": "Places a page at the end of the page navigation history."
  },
  "pagerecall": {
    "name": "PageRecall",
    "returnType": "UNKNOWN",
    "params": [
      "iIndex"
    ],
    "doc": "Displays the page at a specified depth in the page navigation history."
  },
  "pagerichtextfile": {
    "name": "PageRichTextFile",
    "returnType": "UNKNOWN",
    "params": [
      "nAN",
      "Filename",
      "nMode [",
      "nHeight] [",
      "nWidth]"
    ],
    "doc": "This function creates a rich edit object, and loads a copy of the rich text file Filename into that object."
  },
  "pageselect": {
    "name": "PageSelect",
    "returnType": "UNKNOWN",
    "params": [],
    "doc": "Displays a dialog box with a list of graphics pages defined in the project."
  },
  "pagesetint": {
    "name": "PageSetInt",
    "returnType": "UNKNOWN",
    "params": [
      "sLabel",
      "sVar [",
      "iWinNum]"
    ],
    "doc": "Associates an integer variable with a particular page."
  },
  "pagesetstr": {
    "name": "PageSetStr",
    "returnType": "UNKNOWN",
    "params": [
      "sLabel",
      "sVar [",
      "iWinNum]"
    ],
    "doc": "Stores a local page-based string and associates the string with the page."
  },
  "pagesoe": {
    "name": "PageSOE",
    "returnType": "UNKNOWN",
    "params": [
      "INT Category",
      "INT Fallback"
    ],
    "doc": "Displays a category of sequence of events (SOE) entries on the SOE page."
  },
  "pagesummary": {
    "name": "PageSummary",
    "returnType": "UNKNOWN",
    "params": [
      "Category"
    ],
    "doc": "Displays a category of alarm summary entries on the alarms summary page."
  },
  "pagetask": {
    "name": "PageTask",
    "returnType": "UNKNOWN",
    "params": [
      "iWinNum",
      "sFunctionName",
      "sFunctionArg"
    ],
    "doc": "PageTask() is used for running preliminary Cicode before displaying a page in a window."
  },
  "pagetransformcoords": {
    "name": "PageTransformCoords",
    "returnType": "UNKNOWN",
    "params": [
      "hPage",
      "iPageX",
      "iPageY",
      "iDisplayX",
      "iDisplayY",
      "iType"
    ],
    "doc": "Converts Page coordinates to absolute screen coordinates."
  },
  "pagetrend": {
    "name": "PageTrend",
    "returnType": "UNKNOWN",
    "params": [
      "sPage",
      "sTag1 [",
      "sTag2..sTag8]"
    ],
    "doc": "Displays a trend page with the specified trend pens."
  },
  "pagetrendex": {
    "name": "PageTrendEx",
    "returnType": "UNKNOWN",
    "params": [
      "sPage",
      "sCluster",
      "sTag1 [",
      "sTag2..sTag8]"
    ],
    "doc": "Displays a trend page of a specified cluster in a multi-cluster system with the specified trend pens."
  },
  "parameterget": {
    "name": "ParameterGet",
    "returnType": "UNKNOWN",
    "params": [
      "Section",
      "Name",
      "Default"
    ],
    "doc": "Gets the value of a system parameter."
  },
  "parameterput": {
    "name": "ParameterPut",
    "returnType": "UNKNOWN",
    "params": [
      "Section",
      "Name",
      "Value"
    ],
    "doc": "Updates a system parameter in the Citect.ini file. If the system parameter does not exist, it is added to the Citect.ini file."
  },
  "pathtostr": {
    "name": "PathToStr",
    "returnType": "UNKNOWN",
    "params": [
      "sPath"
    ],
    "doc": "Converts a  path into a string."
  },
  "pi": {
    "name": "Pi",
    "returnType": "UNKNOWN",
    "params": [],
    "doc": "Gets the value of pi (the ratio of the circumference of a circle to its diameter)."
  },
  "plotclose": {
    "name": "PlotClose",
    "returnType": "UNKNOWN",
    "params": [
      "hPlot"
    ],
    "doc": "Displays the plot on screen or sends it to the printer."
  },
  "plotdraw": {
    "name": "PlotDraw",
    "returnType": "UNKNOWN",
    "params": [
      "hPlot",
      "Type",
      "PenStyle",
      "PenCol",
      "PenWidth",
      "nFill",
      "X1",
      "Y1",
      "X2",
      "Y2"
    ],
    "doc": "Constructs drawings on your plot."
  },
  "plotgetmarker": {
    "name": "PlotGetMarker",
    "returnType": "UNKNOWN",
    "params": [
      "sSymbolName"
    ],
    "doc": "Gets the marker number of a symbol."
  },
  "plotgrid": {
    "name": "PlotGrid",
    "returnType": "UNKNOWN",
    "params": [
      "hPlot",
      "nSamples",
      "X1",
      "Y1",
      "X2",
      "Y2",
      "nHorGrid",
      "HorGridCol",
      "nVerGrid",
      "VerGridCol",
      "FrameWidth",
      "FrameCol",
      "nFill",
      "nMode"
    ],
    "doc": "Defines a frame and draws horizontal and vertical grid lines within this frame."
  },
  "plotinfo": {
    "name": "PlotInfo",
    "returnType": "UNKNOWN",
    "params": [
      "hPlot",
      "Type [",
      "sInput]"
    ],
    "doc": "Gets information about the plot."
  },
  "plotline": {
    "name": "PlotLine",
    "returnType": "UNKNOWN",
    "params": [
      "hPlot",
      "PenStyle",
      "PenCol",
      "PenWidth",
      "MarkerStyle",
      "MarkerCol",
      "nMarker",
      "Length",
      "pTable",
      "LoScale",
      "HiScale",
      "Mode"
    ],
    "doc": "Draws a line (in the plot system) for a set of data points."
  },
  "plotmarker": {
    "name": "PlotMarker",
    "returnType": "UNKNOWN",
    "params": [
      "hPlot",
      "MarkerStyle",
      "MarkerCol",
      "nMarker",
      "Length",
      "X",
      "Y"
    ],
    "doc": "Draws markers on a plotted line or at a specified point."
  },
  "plotopen": {
    "name": "PlotOpen",
    "returnType": "UNKNOWN",
    "params": [
      "nAN",
      "sOutput",
      "Mode"
    ],
    "doc": "Opens a new plot, sets its output device, and returns its plot handle."
  },
  "plotscalemarker": {
    "name": "PlotScaleMarker",
    "returnType": "UNKNOWN",
    "params": [
      "hPlot",
      "X",
      "Y",
      "nMarker",
      "PenWidth",
      "PenCol",
      "Mode"
    ],
    "doc": "Draws scale lines beside the grid on your plot (if there is one) and places markers on them."
  },
  "plotsetmarker": {
    "name": "PlotSetMarker",
    "returnType": "UNKNOWN",
    "params": [
      "MarkerNo",
      "sSymbolName"
    ],
    "doc": "Registers a symbol as a marker."
  },
  "plottext": {
    "name": "PlotText",
    "returnType": "UNKNOWN",
    "params": [
      "hPlot",
      "hFont",
      "Orientation",
      "X",
      "Y",
      "sText"
    ],
    "doc": "Prints text on a plot. You can specify the font, position, and orientation of the text."
  },
  "plotxyline": {
    "name": "PlotXYLine",
    "returnType": "UNKNOWN",
    "params": [
      "hPlot",
      "PenStyle",
      "PenCol",
      "PenWidth",
      "MarkerStyle",
      "MarkerCol",
      "nMarker",
      "Length",
      "xTable",
      "LoXScale",
      "HiXScale",
      "YTable",
      "LoYScale",
      "HiYScale",
      "Mode"
    ],
    "doc": "Plots values from two different tables. Values from one table are considered X coordinates, and values from the other are considered Y coordinates."
  },
  "pow": {
    "name": "Pow",
    "returnType": "UNKNOWN",
    "params": [
      "X",
      "Y"
    ],
    "doc": "Calculates x to the power of y."
  },
  "print": {
    "name": "Print",
    "returnType": "UNKNOWN",
    "params": [
      "String"
    ],
    "doc": "Prints a string on the current device. You should call this function only in a report."
  },
  "printfont": {
    "name": "PrintFont",
    "returnType": "UNKNOWN",
    "params": [
      "Font"
    ],
    "doc": "Changes the printing font on the current device."
  },
  "println": {
    "name": "PrintLn",
    "returnType": "UNKNOWN",
    "params": [
      "String"
    ],
    "doc": "Prints a string on the current device, followed by a newline character."
  },
  "processanalystloadfile": {
    "name": "ProcessAnalystLoadFile",
    "returnType": "UNKNOWN",
    "params": [
      "sPAVFile",
      "iFileLocation",
      "iButtonMask",
      "sObjName"
    ],
    "doc": "Loads the specified PAV file to a Process Analyst object, which is identified by parameter ObjName."
  },
  "processanalystpopup": {
    "name": "ProcessAnalystPopup",
    "returnType": "UNKNOWN",
    "params": [
      "sPage [",
      "sPAVFile [",
      "iFileLocation [",
      "iButtonMask [",
      "sObjName [",
      "iMode ]]]]]"
    ],
    "doc": "Displays a Process Analyst page (in a new page child window) at the current mouse position."
  },
  "processanalystselect": {
    "name": "ProcessAnalystSelect",
    "returnType": "UNKNOWN",
    "params": [
      "(iWindow",
      "sPage [",
      "sObjName [",
      "sClusterName [",
      "iButtonMask [",
      "sPAVFile [",
      "iFileLocation]]]]])"
    ],
    "doc": "Allows a set of pens to be selected before displaying a PA page."
  },
  "processanalystsetpen": {
    "name": "ProcessAnalystSetPen",
    "returnType": "UNKNOWN",
    "params": [
      "(iPen",
      "sTag [",
      "sObjName [",
      "iPane [",
      "iPenType]]])"
    ],
    "doc": "Allows a new pen to be added to a PA display."
  },
  "processanalystwin": {
    "name": "ProcessAnalystWin",
    "returnType": "UNKNOWN",
    "params": [
      "sPage",
      "iX",
      "iY",
      "iMode [",
      "sPAVFile [",
      "iFileLocation [",
      "iButtonMask [",
      "sObjName ]]]]"
    ],
    "doc": "Displays a Process Analyst page (in a new window) preloaded with the pre-defined Process Analyst View (PAV) file."
  },
  "processisclient": {
    "name": "ProcessIsClient",
    "returnType": "UNKNOWN",
    "params": [],
    "doc": "Determines if the currently executing process contains a client component."
  },
  "processisserver": {
    "name": "ProcessIsServer",
    "returnType": "UNKNOWN",
    "params": [
      "sServerType [",
      "sClusterName] [",
      "sServerName]"
    ],
    "doc": "Determines if the currently executing process contains a particular server component."
  },
  "processrestart": {
    "name": "ProcessRestart",
    "returnType": "UNKNOWN",
    "params": [],
    "doc": "Restarts the current process in which Cicode is running."
  },
  "productinfo": {
    "name": "ProductInfo",
    "returnType": "UNKNOWN",
    "params": [
      "iType"
    ],
    "doc": "Returns information about the Plant SCADA product."
  },
  "projectinfo": {
    "name": "ProjectInfo",
    "returnType": "UNKNOWN",
    "params": [
      "iProject",
      "iType"
    ],
    "doc": "Returns information about a particular project, which is identified by a project enumerated number."
  },
  "projectrestartget": {
    "name": "ProjectRestartGet",
    "returnType": "UNKNOWN",
    "params": [],
    "doc": "Gets the path to the project to be run the next time Plant SCADA is restarted."
  },
  "projectrestartset": {
    "name": "ProjectRestartSet",
    "returnType": "UNKNOWN",
    "params": [
      "sPath"
    ],
    "doc": "Sets the path to the project to be run the next time Plant SCADA is restarted."
  },
  "projectset": {
    "name": "ProjectSet",
    "returnType": "UNKNOWN",
    "params": [
      "sProject"
    ],
    "doc": "Sets either the name or the path of the project to be run next time Plant SCADA is restarted."
  },
  "prompt": {
    "name": "Prompt",
    "returnType": "UNKNOWN",
    "params": [
      "String"
    ],
    "doc": "Displays a message in the prompt line on the operator's computer."
  },
  "pulse": {
    "name": "Pulse",
    "returnType": "UNKNOWN",
    "params": [
      "sTag"
    ],
    "doc": "Pulses (jogs) a variable tag on, then off."
  },
  "qualitycreate": {
    "name": "QualityCreate",
    "returnType": "UNKNOWN",
    "params": [
      "INT generalQuality [",
      "INT qualitySubstatus [",
      "INT qualityLimit [",
      "INT extendedSubstatus [",
      "INT bOverride [",
      "bControlInhibit [",
      "INT datasourceErrorCode ]]]]]]"
    ],
    "doc": "Creates a quality value based on the quality fields provided."
  },
  "qualitygetpart": {
    "name": "QualityGetPart",
    "returnType": "UNKNOWN",
    "params": [
      "QUALITY Quality",
      "INT Part"
    ],
    "doc": "Extracts a requested part of the quality value from a variable tag's quality item."
  },
  "qualityisbad": {
    "name": "QualityIsBad",
    "returnType": "UNKNOWN",
    "params": [
      "QUALITY quality"
    ],
    "doc": "This function will return a value indicating whether the general part of quality is bad."
  },
  "qualityiscontrolinhibit": {
    "name": "QualityIsControlInhibit",
    "returnType": "UNKNOWN",
    "params": [
      "QUALITY quality"
    ],
    "doc": "Returns a value indicating whether the tag is in Control Inhibit Mode."
  },
  "qualityisgood": {
    "name": "QualityIsGood",
    "returnType": "UNKNOWN",
    "params": [
      "QUALITY quality"
    ],
    "doc": "This function will return a value indicating whether the general part of quality is good."
  },
  "qualityisoverrride": {
    "name": "QualityIsOverrride",
    "returnType": "UNKNOWN",
    "params": [
      "QUALITY quality"
    ],
    "doc": "Returns a value indicating whether the tag is in Override Mode."
  },
  "qualityisuncertain": {
    "name": "QualityIsUncertain",
    "returnType": "UNKNOWN",
    "params": [
      "QUALITY quality"
    ],
    "doc": "This function will return a value indicating whether the general part of quality is uncertain."
  },
  "qualitysetpart": {
    "name": "QualitySetPart",
    "returnType": "UNKNOWN",
    "params": [
      "QUALITY quality",
      "INT part",
      "INT value"
    ],
    "doc": "Sets a Quality part’s value to the QUALITY variable."
  },
  "qualitytostr": {
    "name": "QualityToStr",
    "returnType": "UNKNOWN",
    "params": [
      "QUALITY quality",
      "INT part",
      "INT localized"
    ],
    "doc": "Returns a textual representation of the quality."
  },
  "queclose": {
    "name": "QueClose",
    "returnType": "UNKNOWN",
    "params": [
      "hQue"
    ],
    "doc": "Closes a queue opened with the QueOpen() function. All data is flushed from the queue."
  },
  "quelength": {
    "name": "QueLength",
    "returnType": "UNKNOWN",
    "params": [
      "hQue"
    ],
    "doc": "Gets the current length of the queue."
  },
  "queopen": {
    "name": "QueOpen",
    "returnType": "UNKNOWN",
    "params": [
      "Name",
      "Mode"
    ],
    "doc": "Open a queue for reading and writing data elements."
  },
  "quepeek": {
    "name": "QuePeek",
    "returnType": "UNKNOWN",
    "params": [
      "hQue",
      "Type",
      "Str",
      "Mode"
    ],
    "doc": "Searches a queue for a queue element."
  },
  "queread": {
    "name": "QueRead",
    "returnType": "UNKNOWN",
    "params": [
      "hQue",
      "Type",
      "Str",
      "Mode"
    ],
    "doc": "Reads data from a queue, starting from the head of the queue."
  },
  "quewrite": {
    "name": "QueWrite",
    "returnType": "UNKNOWN",
    "params": [
      "hQue",
      "Type",
      "Str"
    ],
    "doc": "Writes an integer and string onto the end of a queue."
  },
  "radtodeg": {
    "name": "RadToDeg",
    "returnType": "UNKNOWN",
    "params": [
      "Angle"
    ],
    "doc": "Converts an angle from radians to degrees."
  },
  "rand": {
    "name": "Rand",
    "returnType": "UNKNOWN",
    "params": [
      "Maximum"
    ],
    "doc": "Generates a random number between 0 and a specified maximum number less one."
  },
  "realtostr": {
    "name": "RealToStr",
    "returnType": "UNKNOWN",
    "params": [
      "Number",
      "Width",
      "Places[",
      "Separator]"
    ],
    "doc": "Converts a floating-point number into a string."
  },
  "repgetcluster": {
    "name": "RepGetCluster",
    "returnType": "UNKNOWN",
    "params": [],
    "doc": "This function retrieves the name of the cluster a report is running on."
  },
  "repgetcontrol": {
    "name": "RepGetControl",
    "returnType": "UNKNOWN",
    "params": [
      "ReportName",
      "Type [",
      "sClusterName]"
    ],
    "doc": "Gets report control information on a report."
  },
  "report": {
    "name": "Report",
    "returnType": "UNKNOWN",
    "params": [
      "ReportName [",
      "sClusterName]"
    ],
    "doc": "Runs a report on the Report Server."
  },
  "repsetcontrol": {
    "name": "RepSetControl",
    "returnType": "UNKNOWN",
    "params": [
      "ReportName",
      "Type",
      "Data [",
      "sClusterName]"
    ],
    "doc": "Sets report control information to temporarily override the normal settings for a specified report."
  },
  "reread": {
    "name": "ReRead",
    "returnType": "UNKNOWN",
    "params": [
      "Mode"
    ],
    "doc": "ReRead is deprecated in this version of Plant SCADA."
  },
  "resetscreenprofile": {
    "name": "ResetScreenProfile",
    "returnType": "UNKNOWN",
    "params": [],
    "doc": "Moves all top level windows back to their original screen starting position as defined by the screen profile."
  },
  "round": {
    "name": "Round",
    "returnType": "UNKNOWN",
    "params": [
      "Number",
      "Places"
    ],
    "doc": "Rounds a number to a specified number of decimal places."
  },
  "schdclose": {
    "name": "SchdClose",
    "returnType": "UNKNOWN",
    "params": [
      "LONG Session"
    ],
    "doc": "The SchdClose function terminates a browsing session and cleans up the resources used by the session."
  },
  "schdconfigclose": {
    "name": "SchdConfigClose",
    "returnType": "UNKNOWN",
    "params": [
      "LONG Session"
    ],
    "doc": "The SchdConfigClose function terminates a browsing session and cleans up the resources used by the session."
  },
  "schdconfigfirst": {
    "name": "SchdConfigFirst",
    "returnType": "UNKNOWN",
    "params": [
      "LONG Session"
    ],
    "doc": "The SchdConfigFirst function places the data browse cursor at the first record."
  },
  "schdconfiggetfield": {
    "name": "SchdConfigGetField",
    "returnType": "UNKNOWN",
    "params": [
      "LONG Session",
      "STRING Field"
    ],
    "doc": "The SchdConfigGetField function returns the value of the particular field in a record to which the data browse cursor is currently referencing."
  },
  "schdconfignext": {
    "name": "SchdConfigNext",
    "returnType": "UNKNOWN",
    "params": [
      "LONG Session"
    ],
    "doc": "The SchdConfigNext function places the data browse cursor at the next available record."
  },
  "schdconfignumrecords": {
    "name": "SchdConfigNumRecords",
    "returnType": "UNKNOWN",
    "params": [
      "LONG Session"
    ],
    "doc": "The SchdConfigNumRecords function returns the number of records that match the current filter criteria."
  },
  "schdconfigopen": {
    "name": "SchdConfigOpen",
    "returnType": "UNKNOWN",
    "params": [
      "[TIMESTAMP Start] [",
      "LONG Duration] [",
      "STRING Filter] [",
      "STRING Fields] [",
      "STRING Clusters]"
    ],
    "doc": "The SchdConfigOpen function initiates a new session for browsing the schedules configured."
  },
  "schdconfigprev": {
    "name": "SchdConfigPrev",
    "returnType": "UNKNOWN",
    "params": [
      "LONG Session"
    ],
    "doc": "The SchdConfigPrev function places the data browse cursor at the previous record."
  },
  "schdfirst": {
    "name": "SchdFirst",
    "returnType": "UNKNOWN",
    "params": [
      "LONG Session"
    ],
    "doc": "The SchdFirst function places the data browse cursor at the first record."
  },
  "schdgetfield": {
    "name": "SchdGetField",
    "returnType": "UNKNOWN",
    "params": [
      "LONG Session",
      "STRING Field"
    ],
    "doc": "The SchdGetField function returns the value of the particular field in a record to which the data browse cursor is currently referencing."
  },
  "schdnext": {
    "name": "SchdNext",
    "returnType": "UNKNOWN",
    "params": [
      "LONG Session"
    ],
    "doc": "The SchdNext function places the data browse cursor at the next available record."
  },
  "schdnumrecords": {
    "name": "SchdNumRecords",
    "returnType": "UNKNOWN",
    "params": [
      "LONG Session"
    ],
    "doc": "The SchdNumRecords function returns the number of records that matchthe current filter criteria."
  },
  "schdopen": {
    "name": "SchdOpen",
    "returnType": "UNKNOWN",
    "params": [
      "STRING Equipment[",
      "TIMESTAMP Start] [",
      "LONG Duration] [",
      "STRING Filter] [",
      "STRING Fields] [",
      "STRING Clusters]"
    ],
    "doc": "The SchdOpen function initiates a new session for browsing the runtime schedules."
  },
  "schdprev": {
    "name": "SchdPrev",
    "returnType": "UNKNOWN",
    "params": [
      "LONG Session"
    ],
    "doc": "The SchdPrev function places the data browse cursor at the previous record."
  },
  "schdspecialadd": {
    "name": "SchdSpecialAdd",
    "returnType": "UNKNOWN",
    "params": [
      "STRING Cluster",
      "STRING Name"
    ],
    "doc": "The SchdSpecialAdd adds a new Special Day Group to the scheduler engine."
  },
  "schdspecialclose": {
    "name": "SchdSpecialClose",
    "returnType": "UNKNOWN",
    "params": [
      "LONG Session"
    ],
    "doc": "The SchdSpecialClose function terminates a browsing session and cleans up the resources used by the session."
  },
  "schdspecialdelete": {
    "name": "SchdSpecialDelete",
    "returnType": "UNKNOWN",
    "params": [
      "STRING Cluster",
      "LONG ID"
    ],
    "doc": "The SchdSpecialDelete function deletes an existing special day group."
  },
  "schdspecialfirst": {
    "name": "SchdSpecialFirst",
    "returnType": "UNKNOWN",
    "params": [
      "LONG Session"
    ],
    "doc": "The SchdSpecialFirst function places the data browse cursor at the first record."
  },
  "schdspecialgetfield": {
    "name": "SchdSpecialGetField",
    "returnType": "UNKNOWN",
    "params": [
      "LONG Session",
      "STRING Field"
    ],
    "doc": "The SchdSpecialGetField function returns the value of a particular field from the record currently referenced by the data browse cursor."
  },
  "schdspecialitemadd": {
    "name": "SchdSpecialItemAdd",
    "returnType": "UNKNOWN",
    "params": [
      "STRING Cluster",
      "LONG GroupID",
      "STRING Name",
      "TIMESTAMP Day"
    ],
    "doc": "The SchdSpecialItemAdd function adds a new Special Day to the scheduler engine."
  },
  "schdspecialitemaddrange": {
    "name": "SchdSpecialItemAddRange",
    "returnType": "UNKNOWN",
    "params": [
      "STRING Cluster",
      "STRING GroupID",
      "TIMESTAMP FirstDay",
      "TIMESTAMP LastDay"
    ],
    "doc": "The SchdSpecialItemAddRange function adds a range of special days in the specified special day group (category)."
  },
  "schdspecialitemclose": {
    "name": "SchdSpecialItemClose",
    "returnType": "UNKNOWN",
    "params": [
      "LONG Session"
    ],
    "doc": "This function terminates a browsing session and cleans up the resources used by the session."
  },
  "schdspecialitemdelete": {
    "name": "SchdSpecialItemDelete",
    "returnType": "UNKNOWN",
    "params": [
      "STRING Cluster",
      "LONG ID"
    ],
    "doc": "This function deletes an existing Special Day."
  },
  "schdspecialitemdeleterange": {
    "name": "SchdSpecialItemDeleteRange",
    "returnType": "UNKNOWN",
    "params": [
      "STRING Cluster",
      "STRING GroupID",
      "TIMESTAMP FirstDay",
      "TIMESTAMP LastDay"
    ],
    "doc": "The SchdSpecialItemDeleteRange function removes a range of special days in a specified special day group (category)."
  },
  "schdspecialitemfirst": {
    "name": "SchdSpecialItemFirst",
    "returnType": "UNKNOWN",
    "params": [
      "LONG Session"
    ],
    "doc": "The SchdSpecialItemFirst places the data browse cursor at the first record."
  },
  "schdspecialitemgetfield": {
    "name": "SchdSpecialItemGetField",
    "returnType": "UNKNOWN",
    "params": [
      "LONG Session",
      "STRING Field"
    ],
    "doc": "This function returns the value of the particular field in a record to which the data browse cursor is currently referencing."
  },
  "schdspecialitemmodify": {
    "name": "SchdSpecialItemModify",
    "returnType": "UNKNOWN",
    "params": [
      "STRING Cluster",
      "LONG ID",
      "STRING Name",
      "TIMESTAMP Day"
    ],
    "doc": "This function modifies an existing Special Day."
  },
  "schdspecialitemmodifyrange": {
    "name": "SchdSpecialItemModifyRange",
    "returnType": "UNKNOWN",
    "params": [
      "STRING Cluster",
      "STRING GroupID",
      "TIMESTAMP FirstDay",
      "TIMESTAMP LastDay",
      "STRING NewName",
      "TIMESTAMP NewFirstDay",
      "TIMESTAMP NewLastDay"
    ],
    "doc": "The SchdSpecialItemModifyRange function can be used to modify a range of special days in a specified special day group (category)."
  },
  "schdspecialitemnext": {
    "name": "SchdSpecialItemNext",
    "returnType": "UNKNOWN",
    "params": [
      "LONG Session"
    ],
    "doc": "This function places the data browse cursor at the next available record."
  },
  "schdspecialitemnumrecords": {
    "name": "SchdSpecialItemNumRecords",
    "returnType": "UNKNOWN",
    "params": [
      "LONG Session"
    ],
    "doc": "The SchdSpecialItemNumRecords function returns the number of records that match the current filter criteria."
  },
  "schdspecialitemopen": {
    "name": "SchdSpecialItemOpen",
    "returnType": "UNKNOWN",
    "params": [
      "STRING Filter",
      "STRING Fields [",
      "STRING Clusters]"
    ],
    "doc": "This function initiates a new session for browsing the special days."
  },
  "schdspecialitemprev": {
    "name": "SchdSpecialItemPrev",
    "returnType": "UNKNOWN",
    "params": [
      "LONG Session"
    ],
    "doc": "This function places the data browse cursor at the previous record."
  },
  "schdspecialmodify": {
    "name": "SchdSpecialModify",
    "returnType": "UNKNOWN",
    "params": [
      "STRING Cluster",
      "LONG ID",
      "STRING NewName"
    ],
    "doc": "This function modifies an existing special day group."
  },
  "schdspecialnext": {
    "name": "SchdSpecialNext",
    "returnType": "UNKNOWN",
    "params": [
      "LONG Session"
    ],
    "doc": "This function places the data browse cursor at the next available record."
  },
  "schdspecialnumrecords": {
    "name": "SchdSpecialNumRecords",
    "returnType": "UNKNOWN",
    "params": [
      "LONG Session"
    ],
    "doc": "The SchdSpecialNumRecords function returns the number of records that match the current filter criteria."
  },
  "schdspecialopen": {
    "name": "SchdSpecialOpen",
    "returnType": "UNKNOWN",
    "params": [
      "STRING Filter",
      "STRING Fields[",
      "STRING Clusters]"
    ],
    "doc": "The SchdSpecialOpen function initiates a new session for browsing the special day groups."
  },
  "schdspecialprev": {
    "name": "SchdSpecialPrev",
    "returnType": "UNKNOWN",
    "params": [
      "LONG Session"
    ],
    "doc": "The SchdSpecialPrev places the data browse cursor at the previous record."
  },
  "scheduleitemadd": {
    "name": "ScheduleItemAdd",
    "returnType": "UNKNOWN",
    "params": [
      "STRING Cluster",
      "STRING Equipment",
      "STRING State",
      "TIMESTAMP Start",
      "TIMESTAMP End",
      "STRING Desc"
    ],
    "doc": "The ScheduleItemAdd function adds a new schedule to the scheduler engine."
  },
  "scheduleitemdelete": {
    "name": "ScheduleItemDelete",
    "returnType": "UNKNOWN",
    "params": [],
    "doc": "The ScheduleItemDelete function deletes an existing schedule."
  },
  "scheduleitemmodify": {
    "name": "ScheduleItemModify",
    "returnType": "UNKNOWN",
    "params": [
      "STRING Cluster",
      "LONG ID",
      "STRING State",
      "TIMESTAMP Start",
      "TIMESTAMP End",
      "STRING Desc"
    ],
    "doc": "The ScheduleItemModify function modifies an existing schedule."
  },
  "scheduleitemsetrepeat": {
    "name": "ScheduleItemSetRepeat",
    "returnType": "UNKNOWN",
    "params": [
      "STRING Cluster",
      "LONG ID",
      "LONG Freq",
      "LONG Interval",
      "LONG Weekday",
      "LONG WeekDayMask",
      "LONG MaxRec",
      "LONG RecUntil",
      "LONG DayOrd",
      "LONG Day",
      "LONG Month",
      "LONG SpecialInc",
      "STRING GroupIds"
    ],
    "doc": "The ScheduleItemSetRepeat function adds recurrence information to an existing schedule to the scheduler engine."
  },
  "semclose": {
    "name": "SemClose",
    "returnType": "UNKNOWN",
    "params": [
      "hSem"
    ],
    "doc": "Closes a semaphore opened with SemOpen()."
  },
  "semopen": {
    "name": "SemOpen",
    "returnType": "UNKNOWN",
    "params": [
      "Name",
      "Mode"
    ],
    "doc": "Opens a semaphore for access control."
  },
  "semsignal": {
    "name": "SemSignal",
    "returnType": "UNKNOWN",
    "params": [
      "hSem"
    ],
    "doc": "Signals a semaphore. If several Cicode tasks are waiting on this semaphore, the first task is released."
  },
  "semwait": {
    "name": "SemWait",
    "returnType": "UNKNOWN",
    "params": [
      "hSem",
      "Timeout"
    ],
    "doc": "Waits on a semaphore to be signalled."
  },
  "sendkeys": {
    "name": "SendKeys",
    "returnType": "UNKNOWN",
    "params": [
      "sTitle",
      "sKeys"
    ],
    "doc": "Sends a keystroke (or string of keystrokes) to a window as if they were typed on the keyboard."
  },
  "serialkey": {
    "name": "SerialKey",
    "returnType": "UNKNOWN",
    "params": [
      "sPort"
    ],
    "doc": "Redirects all serial characters from a port to the keyboard."
  },
  "serverbrowseclose": {
    "name": "ServerBrowseClose",
    "returnType": "UNKNOWN",
    "params": [
      "iSession"
    ],
    "doc": "The ServerBrowseClose function terminates an active data browse session and cleans up resources associated with the session."
  },
  "serverbrowsefirst": {
    "name": "ServerBrowseFirst",
    "returnType": "UNKNOWN",
    "params": [
      "iSession"
    ],
    "doc": "The ServerBrowseFirst function places the data browse cursor at the first record."
  },
  "serverbrowsegetfield": {
    "name": "ServerBrowseGetField",
    "returnType": "UNKNOWN",
    "params": [
      "iSession",
      "sFieldName"
    ],
    "doc": "The ServerBrowseGetField function retrieves the value of the specified field from the record the data browse cursor is currently referencing."
  },
  "serverbrowsenext": {
    "name": "ServerBrowseNext",
    "returnType": "UNKNOWN",
    "params": [
      "iSession"
    ],
    "doc": "The ServerBrowseNext function moves the data browse cursor forward one record."
  },
  "serverbrowsenumrecords": {
    "name": "ServerBrowseNumRecords",
    "returnType": "UNKNOWN",
    "params": [
      "iSession"
    ],
    "doc": "The ServerBrowseNumRecords function returns the number of records that match the filter criteria."
  },
  "serverbrowseopen": {
    "name": "ServerBrowseOpen",
    "returnType": "UNKNOWN",
    "params": [
      "STRING Filter",
      "STRING Fields",
      "STRING Clusters"
    ],
    "doc": "The ServerBrowseOpen function initiates a new browse session and returns a handle to the new session that can be used in subsequent data browse function calls."
  },
  "serverbrowseprev": {
    "name": "ServerBrowsePrev",
    "returnType": "UNKNOWN",
    "params": [
      "iSession"
    ],
    "doc": "The ServerBrowsePrev function moves the data browse cursor back one record."
  },
  "serverdumpkernel": {
    "name": "ServerDumpKernel",
    "returnType": "UNKNOWN",
    "params": [
      "iMode",
      "sName",
      "sServer [",
      "sCluster]"
    ],
    "doc": "Dumps Kernel data to the KERNEL.DAT file (written to the Logs folder) either on a local server or on a remote server."
  },
  "servergetproperty": {
    "name": "ServerGetProperty",
    "returnType": "UNKNOWN",
    "params": [
      "STRING Server",
      "STRING Property [",
      "STRINGCluster]"
    ],
    "doc": "This function returns information about a specified server and can be called from any client."
  },
  "serverinfo": {
    "name": "ServerInfo",
    "returnType": "UNKNOWN",
    "params": [
      "STRING Name",
      "INT Type [",
      "STRING ClusterName]"
    ],
    "doc": "Gets status information on clients and servers."
  },
  "serverinfoex": {
    "name": "ServerInfoEx",
    "returnType": "UNKNOWN",
    "params": [
      "STRING Name",
      "INT Type",
      "STRING Component [",
      "STRING ClusterName] [",
      "STRING ServerName]"
    ],
    "doc": "Gets status information on clients and servers from a specified component in a multiprocess runtime environment."
  },
  "serverisonline": {
    "name": "ServerIsOnline",
    "returnType": "UNKNOWN",
    "params": [
      "STRING ServerName[",
      "STRING Clusters][",
      "INT bLocal]"
    ],
    "doc": "The ServerIsOnline function checks if the given server can be contacted by the client for giving the online/offline status of the server."
  },
  "serverreload": {
    "name": "ServerReload",
    "returnType": "UNKNOWN",
    "params": [
      "STIRNG Server [",
      "STRING Cluster] [",
      "INT Sync]"
    ],
    "doc": "This function  can only be called for Alarm, Report and Trend Servers and reloads the server specified by cluster and server name."
  },
  "serverrestart": {
    "name": "ServerRestart",
    "returnType": "UNKNOWN",
    "params": [
      "STRING sServerName",
      "STRING sCluster = \"\""
    ],
    "doc": "Allows you to restart any specific alarm, report, trend or I/O server from any Cicode node in a system, without affecting other server processes running on the same machine."
  },
  "serverrpc": {
    "name": "ServerRPC",
    "returnType": "UNKNOWN",
    "params": [
      "sServerName",
      "sName",
      "sArg",
      "iMode [",
      "sClusterName]"
    ],
    "doc": "Calls a remote procedure on the Plant SCADA server specified by the ServerName argument."
  },
  "servicegetlist": {
    "name": "ServiceGetList",
    "returnType": "STRING",
    "params": [],
    "doc": "Determines the service type(s), cluster name(s), and service name(s) of all services currently running in the component that called this function."
  },
  "setarea": {
    "name": "SetArea",
    "returnType": "UNKNOWN",
    "params": [
      "Area"
    ],
    "doc": "Sets the current viewable areas. You can pass a single area number, or a group of areas to set multiple areas."
  },
  "setevent": {
    "name": "SetEvent",
    "returnType": "UNKNOWN",
    "params": [
      "nType",
      "hFn"
    ],
    "doc": "Sets an event callback function by specifying a function handle."
  },
  "setlogging": {
    "name": "SetLogging",
    "returnType": "UNKNOWN",
    "params": [
      "Section",
      "Name",
      "Value",
      "Persist"
    ],
    "doc": "Adjusts logging parameters while online."
  },
  "shutdown": {
    "name": "Shutdown",
    "returnType": "UNKNOWN",
    "params": [
      "[sDest] [",
      "sProject] [",
      "Mode] [",
      "sClusterName] [",
      "CallEvent]"
    ],
    "doc": "Terminates Plant SCADA's operation."
  },
  "shutdownform": {
    "name": "ShutdownForm",
    "returnType": "UNKNOWN",
    "params": [],
    "doc": "Displays a dialog box to verify that the user really wants to shut down the Plant SCADA system."
  },
  "shutdownmode": {
    "name": "ShutdownMode",
    "returnType": "UNKNOWN",
    "params": [],
    "doc": "Gets the mode of the last Shutdown function call."
  },
  "sign": {
    "name": "Sign",
    "returnType": "UNKNOWN",
    "params": [
      "Number"
    ],
    "doc": "Gets the sign of a number."
  },
  "sin": {
    "name": "Sin",
    "returnType": "UNKNOWN",
    "params": [
      "Angle"
    ],
    "doc": "Calculates the trigonometric sine of an angle."
  },
  "sleep": {
    "name": "Sleep",
    "returnType": "UNKNOWN",
    "params": [
      "Seconds"
    ],
    "doc": "Suspends the current Cicode task for a specified number of seconds."
  },
  "sleepms": {
    "name": "SleepMS",
    "returnType": "UNKNOWN",
    "params": [
      "Milliseconds"
    ],
    "doc": "Suspends the current Cicode task for a specified number of milliseconds."
  },
  "soearchive": {
    "name": "SOEArchive",
    "returnType": "UNKNOWN",
    "params": [
      "STRING Path[",
      "STRING ClusterName]"
    ],
    "doc": "Use this function to archive event journals."
  },
  "soedismount": {
    "name": "SOEDismount",
    "returnType": "UNKNOWN",
    "params": [
      "[",
      "STRING ClusterName]"
    ],
    "doc": "Use this function to dismount archive volume."
  },
  "soeeventadd": {
    "name": "SOEEventAdd",
    "returnType": "UNKNOWN",
    "params": [
      "TIMESTAMP TimeStamp",
      "STRING Message[",
      "STRING Tag",
      "STRING Cluster]"
    ],
    "doc": "Use this function to insert an event into the Event Journal."
  },
  "soemount": {
    "name": "SOEMount",
    "returnType": "UNKNOWN",
    "params": [
      "STRING sPath [",
      "STRING ClusterName]"
    ],
    "doc": "Use this function to mount an archive volume."
  },
  "spcalarms": {
    "name": "SPCAlarms",
    "returnType": "UNKNOWN",
    "params": [
      "sSPCTag",
      "AlarmType"
    ],
    "doc": "Returns the status of the specified SPC alarm."
  },
  "spcclientinfo": {
    "name": "SPCClientInfo",
    "returnType": "UNKNOWN",
    "params": [
      "sSPCTag",
      "iType"
    ],
    "doc": "Returns SPC data for the given SPC tag."
  },
  "spcgethistogramtable": {
    "name": "SPCGetHistogramTable",
    "returnType": "UNKNOWN",
    "params": [
      "sSPCTag",
      "iNoBars",
      "TableVariable"
    ],
    "doc": "Returns an array containing the frequencies of particular ranges for the given SPC tag."
  },
  "spcgetsubgrouptable": {
    "name": "SPCGetSubgroupTable",
    "returnType": "UNKNOWN",
    "params": [
      "sSPCTag",
      "iSubgroup",
      "TableVariable"
    ],
    "doc": "Returns an array containing the specified subgroup's elements with the mean, range and standard deviation."
  },
  "spcplot": {
    "name": "SPCPlot",
    "returnType": "UNKNOWN",
    "params": [
      "sPort",
      "nAN [",
      "sTitle] [",
      "sComment] [",
      "nMode]"
    ],
    "doc": "This function is designed to work only on an SPCXRSChart page."
  },
  "spcprocessxrsget": {
    "name": "SPCProcessXRSGet",
    "returnType": "UNKNOWN",
    "params": [
      "sSPCTag",
      "XVariable",
      "RVariable",
      "SVariable [",
      "sClusterName]"
    ],
    "doc": "Gets the process mean, range, and standard deviation overrides for the specified SPC tag."
  },
  "spcprocessxrsset": {
    "name": "SPCProcessXRSSet",
    "returnType": "UNKNOWN",
    "params": [
      "sSPCTag",
      "rMean",
      "rRange",
      "rStdDev [",
      "sClusterName]"
    ],
    "doc": "Sets the process mean, range and standard deviation overrides for the specified SPC tag."
  },
  "spcsetlimit": {
    "name": "SPCSetLimit",
    "returnType": "UNKNOWN",
    "params": [
      "nAN",
      "Type",
      "Value",
      "Setting"
    ],
    "doc": "Sets the upper or lower control limits of X-bar, range, or standard deviation charts."
  },
  "spcspeclimitget": {
    "name": "SPCSpecLimitGet",
    "returnType": "UNKNOWN",
    "params": [
      "sSPCTag",
      "LSLVariable",
      "USLVariable [",
      "sClusterName]"
    ],
    "doc": "Gets the process Upper and Lower Specification Limits (USL and LSL) for the specified SPC tag."
  },
  "spcspeclimitset": {
    "name": "SPCSpecLimitSet",
    "returnType": "UNKNOWN",
    "params": [
      "sSPCTag",
      "rLSL",
      "rUSL [",
      "sClusterName]"
    ],
    "doc": "Sets the process Upper and Lower Specification Limits (USL and LSL) for the specified SPC tag."
  },
  "spcsubgroupsizeget": {
    "name": "SPCSubgroupSizeGet",
    "returnType": "UNKNOWN",
    "params": [
      "sSPCTag",
      "SizeVariable [",
      "sClusterName]"
    ],
    "doc": "Gets the subgroup size for the specified SPC tag."
  },
  "spcsubgroupsizeset": {
    "name": "SPCSubgroupSizeSet",
    "returnType": "UNKNOWN",
    "params": [
      "sSPCTag",
      "iSize [",
      "sClusterName]"
    ],
    "doc": "Sets a new subgroup size for the specified SPC tag."
  },
  "sqlappend": {
    "name": "SQLAppend",
    "returnType": "UNKNOWN",
    "params": [
      "hGeneral",
      "String"
    ],
    "doc": "Appends a query string to the SQL buffer."
  },
  "sqlbegintran": {
    "name": "SQLBeginTran",
    "returnType": "UNKNOWN",
    "params": [
      "hSQL"
    ],
    "doc": "Starts a database transaction. When you make a transaction, your changes are not written to the database until you call the SQLCommit() function."
  },
  "sqlcall": {
    "name": "SQLCall",
    "returnType": "UNKNOWN",
    "params": [
      "hGeneral",
      "sSelect"
    ],
    "doc": "Executes an SQL query on a database. The function returns the number of rows affected by the executed query."
  },
  "sqlcancel": {
    "name": "SQLCancel",
    "returnType": "UNKNOWN",
    "params": [
      "hConnection"
    ],
    "doc": "This function cancels both the current operation on the given connection and all other pending operations on the given connection."
  },
  "sqlclose": {
    "name": "SQLClose",
    "returnType": "UNKNOWN",
    "params": [
      "hSQL"
    ],
    "doc": "Closes a SQL connection between the DB connection object specified by the function's parameter and a database."
  },
  "sqlcommit": {
    "name": "SQLCommit",
    "returnType": "UNKNOWN",
    "params": [
      "hSQL"
    ],
    "doc": "Commits (to the database) all changes made within a transaction."
  },
  "sqlconnect": {
    "name": "SQLConnect",
    "returnType": "UNKNOWN",
    "params": [
      "sConnect"
    ],
    "doc": "Creates an internal database connection object and tries to connect it to a database specified by the connection string."
  },
  "sqlcreate": {
    "name": "SQLCreate",
    "returnType": "UNKNOWN",
    "params": [
      "sConnect"
    ],
    "doc": "Creates an internal DB connection object and returns a handle to the object for use by the other DB functions."
  },
  "sqldisconnect": {
    "name": "SQLDisconnect",
    "returnType": "UNKNOWN",
    "params": [
      "hSQL"
    ],
    "doc": "Closes the SQL connection to a database and disposes the DB connection object specified by the function parameter."
  },
  "sqldispose": {
    "name": "SQLDispose",
    "returnType": "UNKNOWN",
    "params": [
      "hSQL"
    ],
    "doc": "Closes the SQL connection to a database and disposes the DB connection object specified by the function parameter."
  },
  "sqlend": {
    "name": "SQLEnd",
    "returnType": "UNKNOWN",
    "params": [
      "hGeneral"
    ],
    "doc": "SQLEnd() releases the memory that was allocated when the last query was executed via SQLExec."
  },
  "sqlerrmsg": {
    "name": "SQLErrMsg",
    "returnType": "UNKNOWN",
    "params": [
      "hGeneral"
    ],
    "doc": "Returns an error message from either a particular data object or entire data system."
  },
  "sqlexec": {
    "name": "SQLExec",
    "returnType": "UNKNOWN",
    "params": [
      "hGeneral",
      "sSelect"
    ],
    "doc": "Executes an SQL query on a database."
  },
  "sqlfieldinfo": {
    "name": "SQLFieldInfo",
    "returnType": "UNKNOWN",
    "params": [
      "hGeneral",
      "hField",
      "sName",
      "Width"
    ],
    "doc": "Gets information about the fields or columns selected by a SQL query."
  },
  "sqlgetfield": {
    "name": "SQLGetField",
    "returnType": "UNKNOWN",
    "params": [
      "hGeneral",
      "sField",
      "nRowIndex"
    ],
    "doc": "Gets field or column data from a database field."
  },
  "sqlgetrecordset": {
    "name": "SQLGetRecordset",
    "returnType": "UNKNOWN",
    "params": [
      "hGeneral",
      "sSelect"
    ],
    "doc": "Executes an SQL query on a database and returns a handle to any resulting disconnected recordset."
  },
  "sqlgetscalar": {
    "name": "SQLGetScalar",
    "returnType": "STRING",
    "params": [
      "hGeneral",
      "sSelect",
      "isNull"
    ],
    "doc": "Executes an SQL query on a database."
  },
  "sqlinfo": {
    "name": "SQLInfo",
    "returnType": "UNKNOWN",
    "params": [
      "hGeneral",
      "Type"
    ],
    "doc": "Gets information about a database connection, recordset or query properties."
  },
  "sqlisnullfield": {
    "name": "SQLIsNullField",
    "returnType": "UNKNOWN",
    "params": [
      "hGeneral",
      "sField",
      "nRowIndex=-1"
    ],
    "doc": "Checks presence of null value in field from a recordset."
  },
  "sqlnext": {
    "name": "SQLNext",
    "returnType": "UNKNOWN",
    "params": [
      "hGeneral"
    ],
    "doc": "Gets the next database record from an SQL query."
  },
  "sqlnofields": {
    "name": "SQLNoFields",
    "returnType": "UNKNOWN",
    "params": [
      "hGeneral"
    ],
    "doc": "When the hGeneral is the connection handle, the function returns the number of fields or columns that were returned by the last SQL statement."
  },
  "sqlnumchange": {
    "name": "SQLNumChange",
    "returnType": "UNKNOWN",
    "params": [
      "hSQL"
    ],
    "doc": "Gets the number of records that were modified in the last SQL Insert, Update, or Delete statement."
  },
  "sqlnumfields": {
    "name": "SQLNumFields",
    "returnType": "UNKNOWN",
    "params": [
      "hGeneral"
    ],
    "doc": "When hGeneral is the connection handle, the function returns the number of fields or columns that were returned by the last SQL statement."
  },
  "sqlopen": {
    "name": "SQLOpen",
    "returnType": "UNKNOWN",
    "params": [
      "hSQL"
    ],
    "doc": "Opens an SQL connection between the DB connection object specified by the function's parameter and the database defined by the connection string given before as the parameter to either SQLCreate or SQLConnect function."
  },
  "sqlparamsclearall": {
    "name": "SQLParamsClearAll",
    "returnType": "UNKNOWN",
    "params": [
      "hSQL"
    ],
    "doc": "Remove all parameters associated with a particular connection object."
  },
  "sqlparamssetasint": {
    "name": "SQLParamsSetAsInt",
    "returnType": "UNKNOWN",
    "params": [
      "hSQL",
      "ParamName",
      "ParamValue"
    ],
    "doc": "Adds or replace a parameterized query parameter and its value in the specified connection."
  },
  "sqlparamssetasreal": {
    "name": "SQLParamsSetAsReal",
    "returnType": "UNKNOWN",
    "params": [
      "hSQL",
      "ParamName",
      "ParamValue"
    ],
    "doc": "Adds or replaces a parameterized query's parameter and its value in the specified connection."
  },
  "sqlparamssetasstring": {
    "name": "SQLParamsSetAsString",
    "returnType": "UNKNOWN",
    "params": [
      "hSQL",
      "ParamName",
      "ParamValue",
      "nStrType"
    ],
    "doc": "Adds or replaces a parameterized query's parameter and its value in the specified connection."
  },
  "sqlprev": {
    "name": "SQLPrev",
    "returnType": "UNKNOWN",
    "params": [
      "hGeneral"
    ],
    "doc": "Gets the previous database record from an SQL query."
  },
  "sqlquerycreate": {
    "name": "SQLQueryCreate",
    "returnType": "UNKNOWN",
    "params": [
      "hSQL"
    ],
    "doc": "The function creates a new query and returns its handle."
  },
  "sqlquerydispose": {
    "name": "SQLQueryDispose",
    "returnType": "UNKNOWN",
    "params": [
      "hQuery"
    ],
    "doc": "The function disposes the query which handle is given as the argument."
  },
  "sqlrollback": {
    "name": "SQLRollBack",
    "returnType": "UNKNOWN",
    "params": [
      "hSQL"
    ],
    "doc": "Rolls back (discards) all changes made to the database within the current transaction."
  },
  "sqlrowcount": {
    "name": "SQLRowCount",
    "returnType": "UNKNOWN",
    "params": [
      "hGeneral"
    ],
    "doc": "Gets the number of rows in the recordset."
  },
  "sqlset": {
    "name": "SQLSet",
    "returnType": "UNKNOWN",
    "params": [
      "hGeneral",
      "sString"
    ],
    "doc": "Sets a query string in the SQL buffer."
  },
  "sqltraceoff": {
    "name": "SQLTraceOff",
    "returnType": "UNKNOWN",
    "params": [
      "hSQL"
    ],
    "doc": "Turns off the debug trace. Use this function to stop tracing function calls that are made to the database."
  },
  "sqltraceon": {
    "name": "SQLTraceOn",
    "returnType": "UNKNOWN",
    "params": [
      "sFileName",
      "hSQL",
      "nTraceLevel"
    ],
    "doc": "Turns on a debug trace. Use this function to begin tracing function calls that are made to the database."
  },
  "sqrt": {
    "name": "Sqrt",
    "returnType": "UNKNOWN",
    "params": [
      "Number"
    ],
    "doc": "Gets the square root of a number."
  },
  "strcalcwidth": {
    "name": "StrCalcWidth",
    "returnType": "UNKNOWN",
    "params": [
      "sText",
      "iFont"
    ],
    "doc": "Retrieves the pixel width of a string using a particular font."
  },
  "strclean": {
    "name": "StrClean",
    "returnType": "UNKNOWN",
    "params": [
      "String"
    ],
    "doc": "Removes control characters from a string."
  },
  "strfill": {
    "name": "StrFill",
    "returnType": "UNKNOWN",
    "params": [
      "String",
      "Length"
    ],
    "doc": "Fills a string with a number of occurrences of another string."
  },
  "strformat": {
    "name": "StrFormat",
    "returnType": "UNKNOWN",
    "params": [
      "Variable",
      "Width",
      "DecPlaces",
      "EngUnits"
    ],
    "doc": "Converts a variable into a formatted string."
  },
  "strgetchar": {
    "name": "StrGetChar",
    "returnType": "UNKNOWN",
    "params": [
      "String",
      "iOffset"
    ],
    "doc": "Gets a single character from a string or buffer. Use this function to read a string, character by character."
  },
  "strleft": {
    "name": "StrLeft",
    "returnType": "UNKNOWN",
    "params": [
      "String",
      "N"
    ],
    "doc": "Gets the left-most characters from a string."
  },
  "strlength": {
    "name": "StrLength",
    "returnType": "UNKNOWN",
    "params": [
      "String"
    ],
    "doc": "Gets the length of a string."
  },
  "strlower": {
    "name": "StrLower",
    "returnType": "UNKNOWN",
    "params": [
      "String"
    ],
    "doc": "Converts a string to lowercase."
  },
  "strmid": {
    "name": "StrMid",
    "returnType": "UNKNOWN",
    "params": [
      "String",
      "Offset",
      "Characters"
    ],
    "doc": "Gets characters from the middle of a string."
  },
  "strpad": {
    "name": "StrPad",
    "returnType": "UNKNOWN",
    "params": [
      "String",
      "PadString",
      "Length"
    ],
    "doc": "Pads a string with a number of occurrences of another string."
  },
  "strright": {
    "name": "StrRight",
    "returnType": "UNKNOWN",
    "params": [
      "String",
      "N"
    ],
    "doc": "Gets the rightmost characters from a string."
  },
  "strsearch": {
    "name": "StrSearch",
    "returnType": "UNKNOWN",
    "params": [
      "Offset",
      "String",
      "Substring"
    ],
    "doc": "Searches for a string within a string, commencing at a specified offset."
  },
  "strsetchar": {
    "name": "StrSetChar",
    "returnType": "UNKNOWN",
    "params": [
      "sText",
      "iOffset",
      "Char"
    ],
    "doc": "Sets a single character into a string or buffer."
  },
  "strtochar": {
    "name": "StrToChar",
    "returnType": "UNKNOWN",
    "params": [
      "String"
    ],
    "doc": "Gets the ASCII code of the first character in a string."
  },
  "strtodate": {
    "name": "StrToDate",
    "returnType": "UNKNOWN",
    "params": [
      "String"
    ],
    "doc": "Converts a \"date\" string into a time/date variable."
  },
  "strtofmt": {
    "name": "StrToFmt",
    "returnType": "UNKNOWN",
    "params": [
      "hFmt",
      "String"
    ],
    "doc": "Converts a string into field data for a format template."
  },
  "strtogrp": {
    "name": "StrToGrp",
    "returnType": "UNKNOWN",
    "params": [
      "hGrp",
      "Str"
    ],
    "doc": "Converts a string into a group and places it into a group number."
  },
  "strtohex": {
    "name": "StrToHex",
    "returnType": "UNKNOWN",
    "params": [
      "String"
    ],
    "doc": "Converts a hexadecimal string into an integer."
  },
  "strtoint": {
    "name": "StrToInt",
    "returnType": "UNKNOWN",
    "params": [
      "String"
    ],
    "doc": "Converts a string into an integer."
  },
  "strtolines": {
    "name": "StrToLines",
    "returnType": "UNKNOWN",
    "params": [
      "String",
      "MaxChars",
      "nLines"
    ],
    "doc": "Converts a string into separate lines that contain no more than the number of characters specified in the MaxChars argument."
  },
  "strtolocaltext": {
    "name": "StrToLocalText",
    "returnType": "UNKNOWN",
    "params": [],
    "doc": "Converts a native string into the local version of that string."
  },
  "strtoperiod": {
    "name": "StrToPeriod",
    "returnType": "UNKNOWN",
    "params": [
      "String"
    ],
    "doc": "Converts a string into a time period."
  },
  "strtoreal": {
    "name": "StrToReal",
    "returnType": "UNKNOWN",
    "params": [
      "String"
    ],
    "doc": "Converts a string into a floating-point number."
  },
  "strtotime": {
    "name": "StrToTime",
    "returnType": "UNKNOWN",
    "params": [
      "String"
    ],
    "doc": "Converts a \"time\" string into a time/date variable."
  },
  "strtotimestamp": {
    "name": "StrToTimestamp",
    "returnType": "UNKNOWN",
    "params": [
      "STRING String [",
      "INT Format [",
      "INT UTC]]"
    ],
    "doc": "This function  converts timestamp in a STRING format into a TIMESTAMP format."
  },
  "strtovalue": {
    "name": "StrToValue",
    "returnType": "UNKNOWN",
    "params": [
      "String"
    ],
    "doc": "Converts a string into a floating-point number."
  },
  "strtrim": {
    "name": "StrTrim",
    "returnType": "STRING",
    "params": [
      "String"
    ],
    "doc": "Removes leading and trailing spaces from a string. Internal spaces are not removed from the string."
  },
  "strtruncfont": {
    "name": "StrTruncFont",
    "returnType": "UNKNOWN",
    "params": [
      "sText",
      "sFont [",
      "iLength] [",
      "iLengthMode]"
    ],
    "doc": "Returns the truncated string using a particular font (specified by name) or the specified number of characters."
  },
  "strtruncfonthnd": {
    "name": "StrTruncFontHnd",
    "returnType": "UNKNOWN",
    "params": [
      "sText",
      "hFont [",
      "iLength] [",
      "iLengthMode]"
    ],
    "doc": "Returns the truncated string using a particular font (specified by font number) or the specified number of characters."
  },
  "strupper": {
    "name": "StrUpper",
    "returnType": "UNKNOWN",
    "params": [
      "String"
    ],
    "doc": "Converts a string to uppercase."
  },
  "strword": {
    "name": "StrWord",
    "returnType": "UNKNOWN",
    "params": [
      "String"
    ],
    "doc": "Gets the first word from a string. The word is removed from the string to allow the function to be repeated."
  },
  "subscriptionaddcallback": {
    "name": "SubscriptionAddCallback",
    "returnType": "UNKNOWN",
    "params": [
      "iHandle",
      "sCallback"
    ],
    "doc": "Adds a function callback to a tag subscription."
  },
  "subscriptiongetattribute": {
    "name": "SubscriptionGetAttribute",
    "returnType": "STRING",
    "params": [
      "iHandle",
      "sAttribute [",
      "iOffset]"
    ],
    "doc": "Reads the specified attribute value of a subscribed tag."
  },
  "subscriptiongetinfo": {
    "name": "SubscriptionGetInfo",
    "returnType": "STRING",
    "params": [
      "iHandle",
      "sAttribute"
    ],
    "doc": "Reads the specified text information about a subscribed tag."
  },
  "subscriptiongetquality": {
    "name": "SubscriptionGetQuality",
    "returnType": "UNKNOWN",
    "params": [
      "iHandle"
    ],
    "doc": "Reads quality of a subscribed tag."
  },
  "subscriptiongettag": {
    "name": "SubscriptionGetTag",
    "returnType": "UNKNOWN",
    "params": [
      "iHandle",
      "sOffset"
    ],
    "doc": "Reads a value, quality and timestamps of a subscribed tag."
  },
  "subscriptiongettimestamp": {
    "name": "SubscriptionGetTimestamp",
    "returnType": "UNKNOWN",
    "params": [
      "iHandle",
      "sAttribute"
    ],
    "doc": "Reads the specified timestamp of a subscribed tag."
  },
  "subscriptiongetvalue": {
    "name": "SubscriptionGetValue",
    "returnType": "UNKNOWN",
    "params": [
      "iHandle",
      "sOffset"
    ],
    "doc": "Reads a value of a subscribed tag."
  },
  "subscriptionremovecallback": {
    "name": "SubscriptionRemoveCallback",
    "returnType": "UNKNOWN",
    "params": [
      "iHandle",
      "sCallback"
    ],
    "doc": "Removes a function callback from a tag subscription."
  },
  "switchconfig": {
    "name": "SwitchConfig",
    "returnType": "UNKNOWN",
    "params": [
      "nApp"
    ],
    "doc": "Switches focus to a specific Plant SCADA configuration application."
  },
  "systime": {
    "name": "SysTime",
    "returnType": "UNKNOWN",
    "params": [],
    "doc": "Gets the  internal system millisecond counter. The counter is not based on time, but counts from 0 up to the maximum integer value and then back to 0."
  },
  "systimedelta": {
    "name": "SysTimeDelta",
    "returnType": "UNKNOWN",
    "params": [
      "Start"
    ],
    "doc": "Calculates the time difference between a start time and the current time, and updates the start time to the current time."
  },
  "tablelookup": {
    "name": "TableLookup",
    "returnType": "UNKNOWN",
    "params": [
      "Table",
      "Size",
      "Value"
    ],
    "doc": "Searches for a value in a table, and returns the position (offset) of the value in the table."
  },
  "tablemath": {
    "name": "TableMath",
    "returnType": "UNKNOWN",
    "params": [
      "Table",
      "Size",
      "Command [",
      "Mode]"
    ],
    "doc": "Performs mathematical operations on a table of real (floating-point) numbers."
  },
  "tableshift": {
    "name": "TableShift",
    "returnType": "UNKNOWN",
    "params": [
      "Table",
      "Size",
      "Count"
    ],
    "doc": "Shifts table items in a table by a number of positions."
  },
  "tagbrowseclose": {
    "name": "TagBrowseClose",
    "returnType": "UNKNOWN",
    "params": [
      "LONG Session"
    ],
    "doc": "The TagBrowseClose function terminates an active data browse session and cleans up resources associated with the session."
  },
  "tagbrowsefirst": {
    "name": "TagBrowseFirst",
    "returnType": "UNKNOWN",
    "params": [
      "LONG Session"
    ],
    "doc": "The TagBrowseFirst function places the data browse cursor at the first record."
  },
  "tagbrowsegetfield": {
    "name": "TagBrowseGetField",
    "returnType": "UNKNOWN",
    "params": [
      "LONG Session",
      "STRING FieldName"
    ],
    "doc": "The TagBrowseGetField function retrieves the value of the specified field from the record the data browse cursor is currently referencing."
  },
  "tagbrowsenext": {
    "name": "TagBrowseNext",
    "returnType": "UNKNOWN",
    "params": [
      "LONG Session"
    ],
    "doc": "The TagBrowseNext function moves the data browse cursor forward one record."
  },
  "tagbrowsenumrecords": {
    "name": "TagBrowseNumRecords",
    "returnType": "UNKNOWN",
    "params": [
      "LONG Session"
    ],
    "doc": "The TagBrowseNumRecords function gets the number of records for a given browsing session."
  },
  "tagbrowseopen": {
    "name": "TagBrowseOpen",
    "returnType": "UNKNOWN",
    "params": [
      "STRING Filter",
      "STRING Fields",
      "STRING Sort[",
      "STRING Clusters]"
    ],
    "doc": "The TagBrowseOpen function initiates a new browse session and returns a handle to the new session that can be used in subsequent data browse function calls."
  },
  "tagbrowseprev": {
    "name": "TagBrowsePrev",
    "returnType": "UNKNOWN",
    "params": [
      "LONG Session"
    ],
    "doc": "The TagBrowsePrev function moves the data browse cursor back one record."
  },
  "tagdebug": {
    "name": "TagDebug",
    "returnType": "UNKNOWN",
    "params": [],
    "doc": "Displays a dialog which allows you to select from a list of the configured variable tags in your system."
  },
  "tagdebugform": {
    "name": "TagDebugForm",
    "returnType": "UNKNOWN",
    "params": [],
    "doc": "The TagDebugForm Cicode function displays a dialog that allows you to select a variable tag and perform some basic read/write operations on it."
  },
  "tageventformat": {
    "name": "TagEventFormat",
    "returnType": "UNKNOWN",
    "params": [],
    "doc": "Returns a handle to the format of the data used by the TagEventQueue()."
  },
  "tageventqueue": {
    "name": "TagEventQueue",
    "returnType": "UNKNOWN",
    "params": [],
    "doc": "Opens the tag update event queue. The I/O server writes events into this queue as they are processed."
  },
  "taggetproperty": {
    "name": "TagGetProperty",
    "returnType": "STRING",
    "params": [
      "STRING Name",
      "STRING Property [",
      "INT CachedMode] [",
      "STRING ClusterName]"
    ],
    "doc": "This function reads a property of a variable tag from the data source. This function replaces TagInfo."
  },
  "taggetscale": {
    "name": "TagGetScale",
    "returnType": "UNKNOWN",
    "params": [
      "STRING Name",
      "INT Percent",
      "INT EngUnits [",
      "INT CachedMode] [",
      "STRING ClusterName]"
    ],
    "doc": "Gets the value of a tag at a specified scale from the datasource."
  },
  "taginfo": {
    "name": "TagInfo",
    "returnType": "UNKNOWN",
    "params": [
      "STRING Name",
      "INT Type [",
      "STRING ClusterName] [",
      "INT CachedMode]"
    ],
    "doc": "Gets information about a variable tag. This function allows you to develop generic Cicode and Super Genies."
  },
  "taginfoex": {
    "name": "TagInfoEx",
    "returnType": "UNKNOWN",
    "params": [
      "STRING Name",
      "INT Type [",
      "STRING ClusterName] [",
      "INT CachedMode]"
    ],
    "doc": "This function replaces TagInfo and is identical in operation. It supports online changes."
  },
  "tagramp": {
    "name": "TagRamp",
    "returnType": "UNKNOWN",
    "params": [
      "STRING Tag",
      "INT PercentInc"
    ],
    "doc": "This function will increment a Tag by the amount defined by iPercentInc. It is often used for incrementing a tag while a button is held down."
  },
  "tagrdbreload": {
    "name": "TagRDBReload",
    "returnType": "UNKNOWN",
    "params": [],
    "doc": "Works in conjunction with the TagInfo function. Reloads the variable tag database so when TagInfo is called it picks up all online changes to the tag database."
  },
  "tagread": {
    "name": "TagRead",
    "returnType": "UNKNOWN",
    "params": [
      "STRING Tag [",
      "INT nOffset [",
      "STRING ClusterName]]"
    ],
    "doc": "Reads a variable from an I/O device or a local variable."
  },
  "tagreadex": {
    "name": "TagReadEx",
    "returnType": "UNKNOWN",
    "params": [
      "STRING Tag [",
      "INT Offset [",
      "STRING ClusterName]]"
    ],
    "doc": "Reads the value, quality or timestamp of a particular tag from the I/O device."
  },
  "tagresolve": {
    "name": "TagResolve",
    "returnType": "UNKNOWN",
    "params": [
      "STRING TagName"
    ],
    "doc": "This function can be used to increment a reference count on a tag to keep it resolved, making it readily available to a client."
  },
  "tagscalestr": {
    "name": "TagScaleStr",
    "returnType": "UNKNOWN",
    "params": [
      "STRING Tag",
      "INT Percent",
      "INT EngUnits [",
      "STRING ClusterName] [",
      "INT CachedMode]"
    ],
    "doc": "Gets the value of a tag at a specified scale."
  },
  "tagsetoverridebad": {
    "name": "TagSetOverrideBad",
    "returnType": "UNKNOWN",
    "params": [
      "STRING Tag [",
      "INT Synch [",
      "STRING ClusterName]]"
    ],
    "doc": "Sets a quality Override element for a specified tag to Bad Non Specific."
  },
  "tagsetoverridegood": {
    "name": "TagSetOverrideGood",
    "returnType": "UNKNOWN",
    "params": [
      "STRING Tag [",
      "INT Synch [",
      "STRING ClusterName]]"
    ],
    "doc": "Sets a quality Override element for a specified tag to Good Non Specific."
  },
  "tagsetoverridequality": {
    "name": "TagSetOverrideQuality",
    "returnType": "UNKNOWN",
    "params": [
      "STRING Tag",
      "QUALITY qualityNew [",
      "INT Synch [",
      "STRING ClusterName]]"
    ],
    "doc": "Sets a quality of Override element for a specified tag."
  },
  "tagsetoverrideuncertain": {
    "name": "TagSetOverrideUncertain",
    "returnType": "UNKNOWN",
    "params": [
      "STRING Tag [",
      "INT Synch [",
      "STRING ClusterName]]"
    ],
    "doc": "Sets a quality Override element for a specified tag to Uncertain Non Specific."
  },
  "tagsubscribe": {
    "name": "TagSubscribe",
    "returnType": "UNKNOWN",
    "params": [
      "STRING TagName [",
      "INT PollTime] [",
      "STRING ScaleMode] [",
      "REAL Deadband] [",
      "STRING Callback] [",
      "INT Lightweight] [",
      "INT NoUpdateForDuplicateValues]"
    ],
    "doc": "Subscribes a tag so that Cicode functions can be called when a tag's value changes."
  },
  "tagunresolve": {
    "name": "TagUnresolve",
    "returnType": "UNKNOWN",
    "params": [
      "INT iHandle"
    ],
    "doc": "This function is used to decrement a reference count implemented on a tag by TagResolve."
  },
  "tagunsubscribe": {
    "name": "TagUnsubscribe",
    "returnType": "UNKNOWN",
    "params": [
      "INT Handle"
    ],
    "doc": "Unsubscribes the tag subscription specified by the integer subscription handle that was returned from the TagSubscribe function."
  },
  "tagwrite": {
    "name": "TagWrite",
    "returnType": "UNKNOWN",
    "params": [
      "STRING Tag",
      "STRING sValue [",
      "INT Offset] [",
      "INT Synch] [",
      "STRING ClusterName]"
    ],
    "doc": "Writes to an I/O device variable by specifying the variable tag name or the variable tag name and the name of the requested element having read/write access."
  },
  "tagwriteeventque": {
    "name": "TagWriteEventQue",
    "returnType": "UNKNOWN",
    "params": [],
    "doc": "Opens the tag write event queue. The TagWriteEventQue is a queue of data containing details of tag value changes initiated by the process."
  },
  "tagwriteintarray": {
    "name": "TagWriteIntArray",
    "returnType": "UNKNOWN",
    "params": [
      "STRING Tag",
      "INT Length",
      "VAR LONG Values",
      "INT Offset",
      "INT Sync",
      "STRING ClusterName"
    ],
    "doc": "This function writes an array of integers to a tag."
  },
  "tagwriterealarray": {
    "name": "TagWriteRealArray",
    "returnType": "UNKNOWN",
    "params": [
      "STRING Tag",
      "INT Length",
      "VAR REAL Value [",
      "INT Offset] [",
      "INT Sync] [",
      "STRING ClusterName]"
    ],
    "doc": "This function writes an array of REAL values to a variable tag."
  },
  "tan": {
    "name": "Tan",
    "returnType": "UNKNOWN",
    "params": [
      "Angle"
    ],
    "doc": "Calculates the trigonometric tangent of an angle."
  },
  "taskcall": {
    "name": "TaskCall",
    "returnType": "UNKNOWN",
    "params": [
      "sName",
      "sArgs"
    ],
    "doc": "Calls a Cicode function by specifying the function name and providing an arguments string."
  },
  "taskcluster": {
    "name": "TaskCluster",
    "returnType": "UNKNOWN",
    "params": [],
    "doc": "Gets the name of the cluster context in which the current task is executing."
  },
  "taskgetsignal": {
    "name": "TaskGetSignal",
    "returnType": "UNKNOWN",
    "params": [
      "Hnd"
    ],
    "doc": "Retrieves a value that indicates the signal that is currently set for a specific task."
  },
  "taskhnd": {
    "name": "TaskHnd",
    "returnType": "UNKNOWN",
    "params": [
      "[sName]"
    ],
    "doc": "Gets the task handle of a specific task. You can then use the task handle with other task functions to control the task."
  },
  "taskkill": {
    "name": "TaskKill",
    "returnType": "UNKNOWN",
    "params": [
      "hTask"
    ],
    "doc": "Kills a task. The Cicode task will be stopped and will not run again."
  },
  "tasknew": {
    "name": "TaskNew",
    "returnType": "UNKNOWN",
    "params": [
      "sName",
      "sArg",
      "Mode [",
      "sClusterName]"
    ],
    "doc": "Creates a new Cicode task and returns the task handle."
  },
  "tasknewex": {
    "name": "TaskNewEx",
    "returnType": "UNKNOWN",
    "params": [
      "sName",
      "sArg",
      "Mode",
      "SubscriptionRate [",
      "sClusterName]"
    ],
    "doc": "Creates a new Cicode task with an individual subscription rate and returns the task handle."
  },
  "taskresume": {
    "name": "TaskResume",
    "returnType": "UNKNOWN",
    "params": [
      "hTask"
    ],
    "doc": "Resumes a task that was suspended by the TaskSuspend() function. After a task is resumed, it runs on the next time-slice."
  },
  "tasksetsignal": {
    "name": "TaskSetSignal",
    "returnType": "UNKNOWN",
    "params": [
      "Hnd",
      "nSignal"
    ],
    "doc": "Manually applies a signal to a specified task."
  },
  "tasksuspend": {
    "name": "TaskSuspend",
    "returnType": "UNKNOWN",
    "params": [
      "hTask"
    ],
    "doc": "Suspends a task. The task will stop running and will start again only when TaskResume() is called."
  },
  "testrandomwave": {
    "name": "TestRandomWave",
    "returnType": "UNKNOWN",
    "params": [
      "[Period] [",
      "Low] [",
      "High] [",
      "Offset]"
    ],
    "doc": "Generates a random wave. The height of the wave is restricted by minimum and maximum values."
  },
  "testsawwave": {
    "name": "TestSawWave",
    "returnType": "UNKNOWN",
    "params": [
      "[Period] [",
      "Low] [",
      "High] [",
      "Offset]"
    ],
    "doc": "Generates a saw wave. The height of the wave is restricted by minimum and maximum values."
  },
  "testsinwave": {
    "name": "TestSinWave",
    "returnType": "UNKNOWN",
    "params": [
      "[Period] [",
      "Low] [",
      "High] [",
      "Offset]"
    ],
    "doc": "Generates a sine wave. The height of the wave is restricted by minimum and maximum values."
  },
  "testsquarewave": {
    "name": "TestSquareWave",
    "returnType": "UNKNOWN",
    "params": [
      "[Period] [",
      "Low] [",
      "High] [",
      "Offset]"
    ],
    "doc": "Generates a square wave. The height of the wave is restricted by minimum and maximum values."
  },
  "testtriangwave": {
    "name": "TestTriangWave",
    "returnType": "UNKNOWN",
    "params": [
      "[Period] [",
      "Low] [",
      "High] [",
      "Offset]"
    ],
    "doc": "Generates a triangular wave. The height of the wave is restricted by minimum and maximum values."
  },
  "timecurrent": {
    "name": "TimeCurrent",
    "returnType": "UNKNOWN",
    "params": [],
    "doc": "Gets the current system time/date in time/date variable format."
  },
  "timehour": {
    "name": "TimeHour",
    "returnType": "UNKNOWN",
    "params": [
      "Time"
    ],
    "doc": "Gets the hour value from a time/date variable."
  },
  "timeinfo": {
    "name": "TimeInfo",
    "returnType": "UNKNOWN",
    "params": [
      "nInfo"
    ],
    "doc": "Returns the time format currently used on the Plant SCADA Server."
  },
  "timeinttotimestamp": {
    "name": "TimeIntToTimestamp",
    "returnType": "UNKNOWN",
    "params": [
      "INT TimeInt [",
      "INT Millisecond [",
      "INT UTC]]"
    ],
    "doc": "Converts a time INTEGER which is represented as a number of seconds since 01/01/1970 to a TIMESTAMP."
  },
  "timemidnight": {
    "name": "TimeMidNight",
    "returnType": "UNKNOWN",
    "params": [
      "Time"
    ],
    "doc": "Returns the number of seconds between midnight on January 1, 1970, and the midnight immediately prior to the specified time/date."
  },
  "timemin": {
    "name": "TimeMin",
    "returnType": "UNKNOWN",
    "params": [
      "Time"
    ],
    "doc": "Gets the minutes value from a time/date variable."
  },
  "timesec": {
    "name": "TimeSec",
    "returnType": "UNKNOWN",
    "params": [
      "Time"
    ],
    "doc": "Gets the seconds value from a time/date variable."
  },
  "timeset": {
    "name": "TimeSet",
    "returnType": "UNKNOWN",
    "params": [
      "Time"
    ],
    "doc": "Sets the new system time. You can set the time only on the computer which this function is called."
  },
  "timestampadd": {
    "name": "TimestampAdd",
    "returnType": "UNKNOWN",
    "params": [
      "TIMESTAMP Timestamp",
      "INT Offset [",
      "INT Part]"
    ],
    "doc": "Adds an offset to a TIMESTAMP variable."
  },
  "timestampcreate": {
    "name": "TimestampCreate",
    "returnType": "UNKNOWN",
    "params": [
      "INT Year",
      "INT Month",
      "INT Day",
      "INT Hour",
      "INT Minute",
      "INT Second",
      "INT Millisecond [",
      "INT bUtc]"
    ],
    "doc": "Returns a TIMESTAMP variable created from the parts."
  },
  "timestampcurrent": {
    "name": "TimestampCurrent",
    "returnType": "UNKNOWN",
    "params": [],
    "doc": "Return the current system date and time as a TIMESTAMP variable."
  },
  "timestampdifference": {
    "name": "TimestampDifference",
    "returnType": "UNKNOWN",
    "params": [],
    "doc": "Returns the difference between two TIMESTAMP variables as a number of milliseconds."
  },
  "timestampformat": {
    "name": "TimestampFormat",
    "returnType": "UNKNOWN",
    "params": [
      "TIMESTAMP Timestamp",
      "STRING Format [",
      "INT UTC]"
    ],
    "doc": "Formats a TIMESTAMP variable into a string."
  },
  "timestampgetpart": {
    "name": "TimestampGetPart",
    "returnType": "UNKNOWN",
    "params": [
      "TIMESTAMP Timestamp",
      "INT Part [",
      "INT bUtc]"
    ],
    "doc": "Returns one part (year, month, day, etc) of the TIMESTAMP variable."
  },
  "timestampsub": {
    "name": "TimestampSub",
    "returnType": "UNKNOWN",
    "params": [
      "TIMESTAMP Timestamp",
      "INT Offset [",
      "INT Part]"
    ],
    "doc": "Subtracts an offset from a TIMESTAMP variable."
  },
  "timestamptostr": {
    "name": "TimestampToStr",
    "returnType": "UNKNOWN",
    "params": [
      "Timestamp",
      "INT Format [",
      "INT UTC]"
    ],
    "doc": "Converts a TIMESTAMP variable into a string."
  },
  "timestamptotimeint": {
    "name": "TimestampToTimeInt",
    "returnType": "UNKNOWN",
    "params": [
      "TIMESTAMP Timestamp [",
      "INT UTC]"
    ],
    "doc": "Converts a TIMESTAMP variable into a time INTEGER which is represented as a number of seconds since 01/01/1970."
  },
  "timetooledate": {
    "name": "TimeToOLEDate",
    "returnType": "UNKNOWN",
    "params": [
      "Time",
      "Local"
    ],
    "doc": "Converts a time/date value to an OLE DATE value (this should be stored in a REAL)."
  },
  "timetostr": {
    "name": "TimeToStr",
    "returnType": "UNKNOWN",
    "params": [
      "Time",
      "Format [",
      "UTC]"
    ],
    "doc": "Converts a time/date variable into a string. Use this function for calculating time differences or run times, and so on."
  },
  "timeutcoffset": {
    "name": "TimeUTCOffset",
    "returnType": "UNKNOWN",
    "params": [
      "Time"
    ],
    "doc": "Determines the local time bias from UTC that was in force at a specified time."
  },
  "time": {
    "name": "Time",
    "returnType": "UNKNOWN",
    "params": [
      "[Format]"
    ],
    "doc": "Gets the current time in string format."
  },
  "toggle": {
    "name": "Toggle",
    "returnType": "UNKNOWN",
    "params": [
      "sTag"
    ],
    "doc": "Toggles a digital tag on or off. If the variable tag is ON (1), this function will turn it OFF."
  },
  "tracemsg": {
    "name": "TraceMsg",
    "returnType": "UNKNOWN",
    "params": [
      "String"
    ],
    "doc": "Displays a message in the Kernel and Debugger debug windows."
  },
  "trenddspcursorcomment": {
    "name": "TrendDspCursorComment",
    "returnType": "UNKNOWN",
    "params": [
      "nAN"
    ],
    "doc": "Displays the Trend Comment for the currently selected pen on the displayed trend graph."
  },
  "trenddspcursorscale": {
    "name": "TrendDspCursorScale",
    "returnType": "UNKNOWN",
    "params": [
      "nAN",
      "Percent"
    ],
    "doc": "Displays a scale value for the current pen in the current pen font."
  },
  "trenddspcursortag": {
    "name": "TrendDspCursorTag",
    "returnType": "UNKNOWN",
    "params": [
      "AN [",
      "Mode]"
    ],
    "doc": "Displays the trend tag name of the current pen in the pen font."
  },
  "trenddspcursortime": {
    "name": "TrendDspCursorTime",
    "returnType": "UNKNOWN",
    "params": [
      "nAN",
      "Format"
    ],
    "doc": "Displays the cursor time of the current pen in the current pen font."
  },
  "trenddspcursorvalue": {
    "name": "TrendDspCursorValue",
    "returnType": "UNKNOWN",
    "params": [
      "nAN"
    ],
    "doc": "Display the cursor value of the current pen in the current pen font."
  },
  "trendgetan": {
    "name": "TrendGetAn",
    "returnType": "UNKNOWN",
    "params": [],
    "doc": "Gets the AN number of the trend beneath the current mouse position."
  },
  "trendpopup": {
    "name": "TrendPopUp",
    "returnType": "UNKNOWN",
    "params": [
      "sPage",
      "sTag1 [",
      "sTag2..sTag8]"
    ],
    "doc": "Displays a pop-up trend with the specified trend pens."
  },
  "trendrun": {
    "name": "TrendRun",
    "returnType": "UNKNOWN",
    "params": [
      "iPageType"
    ],
    "doc": "Initializes the cursor and rubber-band features on a trend page."
  },
  "trendsetdate": {
    "name": "TrendSetDate",
    "returnType": "UNKNOWN",
    "params": [
      "nAN",
      "Value"
    ],
    "doc": "Sets the end date for all pens on a trend. Samples taken after this date will not be displayed."
  },
  "trendsetscale": {
    "name": "TrendSetScale",
    "returnType": "UNKNOWN",
    "params": [
      "nAN",
      "Percent [",
      "Value]"
    ],
    "doc": "Sets the scale of the current pen or of all pens on a trend."
  },
  "trendsetspan": {
    "name": "TrendSetSpan",
    "returnType": "UNKNOWN",
    "params": [
      "AN [",
      "Value]"
    ],
    "doc": "Sets the span time of the trend. The span time is the time period covered in the trend window."
  },
  "trendsettime": {
    "name": "TrendSetTime",
    "returnType": "UNKNOWN",
    "params": [
      "AN [",
      "Value]"
    ],
    "doc": "Sets the end time for all the pens on a trend. Samples taken after this time will not be displayed."
  },
  "trendsettimebase": {
    "name": "TrendSetTimebase",
    "returnType": "UNKNOWN",
    "params": [
      "AN [",
      "Value]"
    ],
    "doc": "Sets a new sampling period for a trend."
  },
  "trendwin": {
    "name": "TrendWin",
    "returnType": "UNKNOWN",
    "params": [
      "sPage",
      "X",
      "Y",
      "Mode",
      "sTag1 [",
      "sTag2..sTag8]"
    ],
    "doc": "Displays a trend page (in a new window) with the specified trend pens."
  },
  "trendzoom": {
    "name": "TrendZoom",
    "returnType": "UNKNOWN",
    "params": [
      "SourceAN",
      "TimeZoom",
      "ScaleZoom [",
      "DestAn]"
    ],
    "doc": "Zooms\" a specified trend in either one or both axes."
  },
  "trnaddhistory": {
    "name": "TrnAddHistory",
    "returnType": "UNKNOWN",
    "params": [
      "FileName [",
      "sClusterName]"
    ],
    "doc": "Adds an old (backed up) trend history file to the trend system so that its data can be used."
  },
  "trnbrowseclose": {
    "name": "TrnBrowseClose",
    "returnType": "UNKNOWN",
    "params": [],
    "doc": "The TrnBrowseClose function terminates an active data browse session and cleans up all resources associated with the session."
  },
  "trnbrowsefirst": {
    "name": "TrnBrowseFirst",
    "returnType": "UNKNOWN",
    "params": [
      "iSession"
    ],
    "doc": "The TrnBrowseFirst function places the data browse cursor at the first record."
  },
  "trnbrowsegetfield": {
    "name": "TrnBrowseGetField",
    "returnType": "UNKNOWN",
    "params": [
      "INT Session",
      "STRING FieldName"
    ],
    "doc": "The TrnBrowseGetField function retrieves the value of the specified field from the record the data browse cursor is currently referencing."
  },
  "trnbrowsenext": {
    "name": "TrnBrowseNext",
    "returnType": "UNKNOWN",
    "params": [
      "iSession"
    ],
    "doc": "The TrnBrowseNext function moves the data browse cursor forward one record."
  },
  "trnbrowsenumrecords": {
    "name": "TrnBrowseNumRecords",
    "returnType": "UNKNOWN",
    "params": [
      "iSession"
    ],
    "doc": "The TrnBrowseNumRecords function returns the number of records that match the filter criteria."
  },
  "trnbrowseopen": {
    "name": "TrnBrowseOpen",
    "returnType": "UNKNOWN",
    "params": [
      "STRING Filter",
      "STRING Fields [",
      "STRING Clusters]"
    ],
    "doc": "The TrnBrowseOpen function initiates a new browse session and returns a handle to the new session that can be used in subsequent data browse function calls."
  },
  "trnbrowseprev": {
    "name": "TrnBrowsePrev",
    "returnType": "UNKNOWN",
    "params": [
      "iSession"
    ],
    "doc": "The TrnBrowsePrev function moves the data browse cursor back one record."
  },
  "trnclientinfo": {
    "name": "TrnClientInfo",
    "returnType": "UNKNOWN",
    "params": [
      "nAN",
      "Pen",
      "Type",
      "Data",
      "Error"
    ],
    "doc": "Gets information about the trend that is being displayed at the AN point."
  },
  "trncompareplot": {
    "name": "TrnComparePlot",
    "returnType": "UNKNOWN",
    "params": [
      "sPort",
      "sTitle",
      "sComment",
      "AN",
      "iMode",
      "nSamples",
      "iTime1",
      "rPeriod1",
      "iTime2",
      "rPeriod2",
      "Tag1......Tag8",
      "rLoScale1",
      "rHiScale1",
      "......rLoScale8",
      "rHiScale8"
    ],
    "doc": "Prints two trends, one overlaid on the other."
  },
  "trndelete": {
    "name": "TrnDelete",
    "returnType": "UNKNOWN",
    "params": [
      "nAN"
    ],
    "doc": "Deletes a trend that is displayed on a current page."
  },
  "trndelhistory": {
    "name": "TrnDelHistory",
    "returnType": "UNKNOWN",
    "params": [
      "FileName [",
      "sClusterName]"
    ],
    "doc": "Removes a trend history file that has been added to the trend system by the TrnAddHistory() function."
  },
  "trnecho": {
    "name": "TrnEcho",
    "returnType": "UNKNOWN",
    "params": [
      "nAN",
      "nMode"
    ],
    "doc": "Enables and disables the echo of the trend display."
  },
  "trneventgettable": {
    "name": "TrnEventGetTable",
    "returnType": "UNKNOWN",
    "params": [
      "Tag",
      "EventNo",
      "Period",
      "Length",
      "Table",
      "TimeTable",
      "Mode [",
      "sClusterName]"
    ],
    "doc": "Stores event trend data in an event table and the associated time stamp in a time table, for a specified trend tag."
  },
  "trneventgettablems": {
    "name": "TrnEventGetTableMS",
    "returnType": "UNKNOWN",
    "params": [
      "Tag",
      "EventNo",
      "Period",
      "Length",
      "Table",
      "TimeTable",
      "Mode",
      "MSTimeTable [",
      "sClusterName]"
    ],
    "doc": "Stores event trend data and time data (including milliseconds) for a specified trend tag."
  },
  "trneventsettable": {
    "name": "TrnEventSetTable",
    "returnType": "UNKNOWN",
    "params": [
      "Tag",
      "EventNo",
      "Period",
      "Length",
      "Table",
      "TimeTable [",
      "sClusterName]"
    ],
    "doc": "Adds new event to a trend, or overwrites existing points with new values."
  },
  "trneventsettablems": {
    "name": "TrnEventSetTableMS",
    "returnType": "UNKNOWN",
    "params": [
      "Tag",
      "EventNo",
      "Period",
      "Length",
      "Table",
      "TimeTable",
      "MSTimeTable [",
      "sClusterName]"
    ],
    "doc": "Sets event trend data and time data (including milliseconds) for a specified trend tag."
  },
  "trnexportclip": {
    "name": "TrnExportClip",
    "returnType": "UNKNOWN",
    "params": [
      "Time",
      "Period",
      "Length",
      "Mode",
      "ClipMode",
      "sTag1 ... sTag8",
      "iDisplayMode1 ... iDisplayMode 8"
    ],
    "doc": "Exports trend data to the Windows Clipboard."
  },
  "trnexportcsv": {
    "name": "TrnExportCSV",
    "returnType": "UNKNOWN",
    "params": [
      "Filename",
      "Time",
      "Period",
      "Length",
      "Mode",
      "sTag1 ... sTag8",
      "iDisplayMode1 ... iDisplayMode 8"
    ],
    "doc": "Exports trend data to a file in CSV (Comma Separated Variable) format."
  },
  "trnexportdbf": {
    "name": "TrnExportDBF",
    "returnType": "UNKNOWN",
    "params": [
      "Filename",
      "Time",
      "Period",
      "Length",
      "Mode",
      "sTag1 ... sTag8",
      "iDisplayMode1 ... iDisplayMode 8"
    ],
    "doc": "Exports trend data to a file in dBASE III format."
  },
  "trnexportdde": {
    "name": "TrnExportDDE",
    "returnType": "UNKNOWN",
    "params": [
      "sApplication",
      "sDocument",
      "sTopic",
      "Time",
      "Period",
      "Length",
      "Mode",
      "DDEMode",
      "sTag1 ... sTag8",
      "iDisplayMode1 ... iDisplayMode 8"
    ],
    "doc": "Exports trend data via DDE."
  },
  "trnflush": {
    "name": "TrnFlush",
    "returnType": "UNKNOWN",
    "params": [
      "Name [",
      "sClusterName]"
    ],
    "doc": "Writes acquired trend data to disk without waiting for the trend buffer to be filled."
  },
  "trngetbufevent": {
    "name": "TrnGetBufEvent",
    "returnType": "UNKNOWN",
    "params": [
      "nAN",
      "Pen",
      "Offset"
    ],
    "doc": "Gets the event number of a trend at an offset for a specified pen."
  },
  "trngetbuftime": {
    "name": "TrnGetBufTime",
    "returnType": "UNKNOWN",
    "params": [
      "nAN",
      "Pen",
      "Offset"
    ],
    "doc": "Gets the time and date of a trend at an offset for a specified pen."
  },
  "trngetbufvalue": {
    "name": "TrnGetBufValue",
    "returnType": "UNKNOWN",
    "params": [
      "nAN",
      "Pen",
      "Offset"
    ],
    "doc": "Gets the value of a trend at an offset for a specified pen."
  },
  "trngetcluster": {
    "name": "TrnGetCluster",
    "returnType": "UNKNOWN",
    "params": [
      "nAN"
    ],
    "doc": "Gets the cluster name of a trend graph on a page."
  },
  "trngetcursorevent": {
    "name": "TrnGetCursorEvent",
    "returnType": "UNKNOWN",
    "params": [
      "nAN",
      "Pen"
    ],
    "doc": "Gets the event number of a trend, at the trend cursor position for a specified pen."
  },
  "trngetcursormstime": {
    "name": "TrnGetCursorMSTime",
    "returnType": "UNKNOWN",
    "params": [
      "nAN",
      "Pen"
    ],
    "doc": "Gets the time (in milliseconds from the previous midnight) at a trend cursor for a specified pen."
  },
  "trngetcursorpos": {
    "name": "TrnGetCursorPos",
    "returnType": "UNKNOWN",
    "params": [
      "nAN"
    ],
    "doc": "Gets the offset of a trend cursor from its origin, in samples."
  },
  "trngetcursortime": {
    "name": "TrnGetCursorTime",
    "returnType": "UNKNOWN",
    "params": [
      "nAN",
      "Pen"
    ],
    "doc": "Gets the time and date at a trend cursor for a specified pen."
  },
  "trngetcursorvalue": {
    "name": "TrnGetCursorValue",
    "returnType": "UNKNOWN",
    "params": [
      "nAN",
      "Pen"
    ],
    "doc": "Gets the value at a trend cursor for a specified pen."
  },
  "trngetcursorvaluestr": {
    "name": "TrnGetCursorValueStr",
    "returnType": "UNKNOWN",
    "params": [
      "nAN",
      "Pen",
      "EngUnits"
    ],
    "doc": "Gets the value at a trend cursor for a specified pen."
  },
  "trngetdefscale": {
    "name": "TrnGetDefScale",
    "returnType": "UNKNOWN",
    "params": [
      "Tag",
      "LoScale",
      "HiScale [",
      "sClusterName]"
    ],
    "doc": "Gets the default engineering zero and full scales of a trend tag."
  },
  "trngetdisplaymode": {
    "name": "TrnGetDisplayMode",
    "returnType": "UNKNOWN",
    "params": [
      "nAN",
      "PenNumber"
    ],
    "doc": "Returns the display mode of the selected trend pen."
  },
  "trngetevent": {
    "name": "TrnGetEvent",
    "returnType": "UNKNOWN",
    "params": [
      "nAN",
      "Pen",
      "Percent"
    ],
    "doc": "Gets the event number of the trend at a percentage along the trend, using the current event as the base point."
  },
  "trngetformat": {
    "name": "TrnGetFormat",
    "returnType": "UNKNOWN",
    "params": [
      "nAN",
      "Pen",
      "Width",
      "DecPlaces"
    ],
    "doc": "Gets the format of a trend tag being plotted by a specified pen."
  },
  "trngetgatedvalue": {
    "name": "TrnGetGatedValue",
    "returnType": "UNKNOWN",
    "params": [],
    "doc": "Returns the internally stored value for <GATED>."
  },
  "trngetinvalidvalue": {
    "name": "TrnGetInvalidValue",
    "returnType": "UNKNOWN",
    "params": [],
    "doc": "Returns the internally stored value for <INVALID>."
  },
  "trngetmode": {
    "name": "TrnGetMode",
    "returnType": "UNKNOWN",
    "params": [
      "nAN",
      "Pen"
    ],
    "doc": "Gets the mode (real-time or historical trending) of the trend pen."
  },
  "trngetmstime": {
    "name": "TrnGetMSTime",
    "returnType": "UNKNOWN",
    "params": [
      "nAN",
      "Pen",
      "Percent"
    ],
    "doc": "Gets the time (in milliseconds from the previous midnight) of the trend (plotted by a specified pen) at a percentage along the trend, using the time and date of the right-most sample displayed."
  },
  "trngetpen": {
    "name": "TrnGetPen",
    "returnType": "UNKNOWN",
    "params": [
      "nAN",
      "Pen [",
      "Mode]"
    ],
    "doc": "Gets the trend tag being plotted by a specified pen."
  },
  "trngetpencomment": {
    "name": "TrnGetPenComment",
    "returnType": "UNKNOWN",
    "params": [
      "nAN",
      "Pen"
    ],
    "doc": "Retrieves the comment of a pen."
  },
  "trngetpenfocus": {
    "name": "TrnGetPenFocus",
    "returnType": "UNKNOWN",
    "params": [
      "nAN"
    ],
    "doc": "Gets the number of the pen currently in focus."
  },
  "trngetpenno": {
    "name": "TrnGetPenNo",
    "returnType": "UNKNOWN",
    "params": [
      "nAN",
      "Tag"
    ],
    "doc": "Gets the pen number of a pen name."
  },
  "trngetperiod": {
    "name": "TrnGetPeriod",
    "returnType": "UNKNOWN",
    "params": [
      "nAN"
    ],
    "doc": "Gets the current display period of a trend."
  },
  "trngetscale": {
    "name": "TrnGetScale",
    "returnType": "UNKNOWN",
    "params": [
      "nAN",
      "Pen",
      "Percent"
    ],
    "doc": "Gets the display scale of the trend tag being plotted by a specified pen."
  },
  "trngetscalestr": {
    "name": "TrnGetScaleStr",
    "returnType": "UNKNOWN",
    "params": [
      "nAN",
      "Pen",
      "Percent",
      "EngUnits"
    ],
    "doc": "Gets the scale of the trend tag being plotted by a specified pen."
  },
  "trngetspan": {
    "name": "TrnGetSpan",
    "returnType": "UNKNOWN",
    "params": [
      "nAN"
    ],
    "doc": "Gets the span time of a trend (if the span was set by the TrnSetSpan() function)."
  },
  "trngettable": {
    "name": "TrnGetTable",
    "returnType": "UNKNOWN",
    "params": [
      "Tag",
      "Time",
      "Period",
      "Length",
      "Table",
      "DisplayMode [",
      "Milliseconds] [",
      "sClusterName]"
    ],
    "doc": "This function allows you to tabulate values from a specific section of trend. The values in the table (possibly an array variable) are arranged by time."
  },
  "trngettime": {
    "name": "TrnGetTime",
    "returnType": "UNKNOWN",
    "params": [
      "nAN",
      "Pen",
      "Percent"
    ],
    "doc": "Gets the time and date of the trend (plotted by a specified pen) at a percentage along the trend, using the time and date of the right-most sample displayed."
  },
  "trngetunits": {
    "name": "TrnGetUnits",
    "returnType": "UNKNOWN",
    "params": [
      "nAN",
      "Pen"
    ],
    "doc": "Gets the data units for the trend tag plotted by a specified Pen."
  },
  "trninfo": {
    "name": "TrnInfo",
    "returnType": "UNKNOWN",
    "params": [
      "Tag",
      "Type [",
      "sClusterName]"
    ],
    "doc": "Gets the configured values of a trend tag."
  },
  "trnisvalidvalue": {
    "name": "TrnIsValidValue",
    "returnType": "UNKNOWN",
    "params": [
      "TrendValue"
    ],
    "doc": "Determines whether a logged trend value is <VALID>, <GATED> or <INVALID>."
  },
  "trnnew": {
    "name": "TrnNew",
    "returnType": "UNKNOWN",
    "params": [
      "nAN",
      "Trend [",
      "Tag1 ... Tag8] [",
      "sClusterName]"
    ],
    "doc": "Creates a new trend at run time."
  },
  "trnplot": {
    "name": "TrnPlot",
    "returnType": "UNKNOWN",
    "params": [
      "sPort",
      "nSamples",
      "iTime",
      "rPeriod",
      "sTitle",
      "AN",
      "Tag1......Tag8",
      "iMode",
      "sComment",
      "rLoScale1",
      "rHiScale1",
      "......rLoScale8",
      "rHiScale8"
    ],
    "doc": "Prints the trend line of one or more trend tags."
  },
  "trnprint": {
    "name": "TrnPrint",
    "returnType": "UNKNOWN",
    "params": [
      "sPort",
      "sTitle",
      "AN",
      "iModeColor",
      "iDisplayForm"
    ],
    "doc": "Prints the trend that is displayed on the screen (at nAN) using the current display mode for each trend."
  },
  "trnsamplesconfigured": {
    "name": "TrnSamplesConfigured",
    "returnType": "UNKNOWN",
    "params": [
      "nAN"
    ],
    "doc": "Gets the number of samples configured for the currently displayed trend."
  },
  "trnscroll": {
    "name": "TrnScroll",
    "returnType": "UNKNOWN",
    "params": [
      "nAN",
      "Pen",
      "nScroll [",
      "nMode]"
    ],
    "doc": "Scrolls the trend pen by a specified percentage (of span), or number of samples."
  },
  "trnselect": {
    "name": "TrnSelect",
    "returnType": "UNKNOWN",
    "params": [
      "Window",
      "Page",
      "AN [",
      "sClusterName]"
    ],
    "doc": "Sets up a page for a trend. This function allows you to set up a trend before the trend page is displayed."
  },
  "trnsetcursor": {
    "name": "TrnSetCursor",
    "returnType": "UNKNOWN",
    "params": [
      "nAN",
      "Samples"
    ],
    "doc": "Moves the trend cursor by a specified number of samples."
  },
  "trnsetcursorpos": {
    "name": "TrnSetCursorPos",
    "returnType": "UNKNOWN",
    "params": [
      "nAN",
      "Position"
    ],
    "doc": "Moves the trend cursor to a specified x-axis point, offset from the trend cursor origin."
  },
  "trnsetdisplaymode": {
    "name": "TrnSetDisplayMode",
    "returnType": "UNKNOWN",
    "params": [
      "nAN",
      "PenNumber",
      "DisplayMode"
    ],
    "doc": "Specifies how raw trend samples are displayed on the screen."
  },
  "trnsetevent": {
    "name": "TrnSetEvent",
    "returnType": "UNKNOWN",
    "params": [
      "nAN",
      "Pen",
      "Event"
    ],
    "doc": "Sets the start event of a trend pen. This function only operates on an event-based trend."
  },
  "trnsetpen": {
    "name": "TrnSetPen",
    "returnType": "UNKNOWN",
    "params": [
      "nAN",
      "Pen",
      "Tag"
    ],
    "doc": "Sets the trend tag of a trend pen. The trend pen changes to the specified tag and the trend is refreshed."
  },
  "trnsetpenfocus": {
    "name": "TrnSetPenFocus",
    "returnType": "UNKNOWN",
    "params": [
      "nAN",
      "Pen"
    ],
    "doc": "Sets the focus to a specified pen."
  },
  "trnsetperiod": {
    "name": "TrnSetPeriod",
    "returnType": "UNKNOWN",
    "params": [
      "nAN",
      "Period"
    ],
    "doc": "Sets the display period (time base) of a trend."
  },
  "trnsetscale": {
    "name": "TrnSetScale",
    "returnType": "UNKNOWN",
    "params": [
      "nAN",
      "Pen",
      "Percent",
      "Scale"
    ],
    "doc": "Sets a new scale for a trend pen."
  },
  "trnsetspan": {
    "name": "TrnSetSpan",
    "returnType": "UNKNOWN",
    "params": [
      "nAN",
      "Span"
    ],
    "doc": "Sets the span time of a trend. The span time is the total time displayed in the trend window."
  },
  "trnsettable": {
    "name": "TrnSetTable",
    "returnType": "UNKNOWN",
    "params": [
      "Tag",
      "Time",
      "Period",
      "Length",
      "Table [",
      "Milliseconds] [",
      "sClusterName]"
    ],
    "doc": "Writes trend tag data from a table to the trend logging system."
  },
  "trnsettime": {
    "name": "TrnSetTime",
    "returnType": "UNKNOWN",
    "params": [
      "nAN",
      "Pen",
      "Time"
    ],
    "doc": "Sets the end time and date of a trend pen."
  },
  "usercreate": {
    "name": "UserCreate",
    "returnType": "UNKNOWN",
    "params": [
      "sName",
      "sFullName",
      "sPassword",
      "sType"
    ],
    "doc": "Creates a record for a new user.  Not available for a Windows user."
  },
  "usercreateform": {
    "name": "UserCreateForm",
    "returnType": "UNKNOWN",
    "params": [],
    "doc": "Displays a form to create a record for a new user. Not available for a Windows user."
  },
  "userdelete": {
    "name": "UserDelete",
    "returnType": "UNKNOWN",
    "params": [
      "sName"
    ],
    "doc": "Deletes the record for a user.  Not available for a Windows user."
  },
  "usereditform": {
    "name": "UserEditForm",
    "returnType": "UNKNOWN",
    "params": [],
    "doc": "Displays a form to allow the user to create or delete any user record in the database. Not available for a Windows user."
  },
  "userinfo": {
    "name": "UserInfo",
    "returnType": "UNKNOWN",
    "params": [
      "nType"
    ],
    "doc": "Gets information about the operator who is currently logged-in to the system."
  },
  "userlogin": {
    "name": "UserLogin",
    "returnType": "UNKNOWN",
    "params": [
      "sUserName",
      "sPassword",
      "[sLanguage]"
    ],
    "doc": "Logs a user into the Plant SCADA system, using either Windows integrated security or Plant SCADA security."
  },
  "userpassword": {
    "name": "UserPassword",
    "returnType": "UNKNOWN",
    "params": [
      "sName [",
      "sPassword] [",
      "sOldPassword]"
    ],
    "doc": "Changes the password for the user.  Not available for a Windows user."
  },
  "userpasswordexpirydays": {
    "name": "UserPasswordExpiryDays",
    "returnType": "UNKNOWN",
    "params": [
      "sUserName [",
      "sPassword]"
    ],
    "doc": "Returns the number of days left before the user's password is due to expire. Not available for a Windows user."
  },
  "userpasswordform": {
    "name": "UserPasswordForm",
    "returnType": "UNKNOWN",
    "params": [],
    "doc": "Display a form to allow users to change their own passwords. Not available for a Windows user."
  },
  "usersetstr": {
    "name": "UserSetStr",
    "returnType": "UNKNOWN",
    "params": [
      "sName",
      "sField",
      "sData"
    ],
    "doc": "Sets the value of the given field for the given user record in the project configuration (users.dbf ) on the local machine."
  },
  "userupdaterecord": {
    "name": "UserUpdateRecord",
    "returnType": "UNKNOWN",
    "params": [],
    "doc": "Triggers a recompile of the local project configuration, then notifies the running system that user configuration has been modified and needs to be reloaded."
  },
  "userverify": {
    "name": "UserVerify",
    "returnType": "UNKNOWN",
    "params": [
      "sName",
      "sPassword [",
      "sAccess] [",
      "sPrivGlobal] [",
      "sPriv1..sPriv8]"
    ],
    "doc": "Verifies a given user by authenticating the user's credential, verifies the user privileges and areas against those specified in the functions parameters."
  },
  "variablequality": {
    "name": "VariableQuality",
    "returnType": "UNKNOWN",
    "params": [
      "Variable"
    ],
    "doc": "Extracts the quality from a given variable."
  },
  "variabletimestamp": {
    "name": "VariableTimestamp",
    "returnType": "UNKNOWN",
    "params": [
      "Variable",
      "INT Type"
    ],
    "doc": "Extracts the timestamp from a given variable."
  },
  "verifyprivilegeform": {
    "name": "VerifyPrivilegeForm",
    "returnType": "UNKNOWN",
    "params": [
      "sOperationDescription",
      "sLogDevice",
      "sAccess",
      "sGlobalPriv",
      "sPriv1",
      "sPriv2",
      "sPriv3",
      "sPriv4",
      "sPriv5",
      "sPriv6",
      "sPriv7",
      "sPriv8"
    ],
    "doc": "Displays a form that allows a single user to enter their credentials."
  },
  "verifyprivilegetagwrite": {
    "name": "VerifyPrivilegeTagWrite",
    "returnType": "UNKNOWN",
    "params": [
      "sTagName",
      "sValueToWrite",
      "sLogDevice",
      "sAccess",
      "sGlobalPriv",
      "sPriv1",
      "sPriv2",
      "sPriv3",
      "sPriv4",
      "sPriv5",
      "sPriv6",
      "sPriv7",
      "sPriv8"
    ],
    "doc": "Displays a form that allows any single user to enter their credentials in order to approve a write of a specific value to a specific tag."
  },
  "version": {
    "name": "Version",
    "returnType": "UNKNOWN",
    "params": [
      "nType"
    ],
    "doc": "Gets the version number of the Plant SCADA software in use."
  },
  "whoami": {
    "name": "WhoAmI",
    "returnType": "UNKNOWN",
    "params": [],
    "doc": "Displays the user name and full name of the user currently logged-in to the system."
  },
  "wincopy": {
    "name": "WinCopy",
    "returnType": "UNKNOWN",
    "params": [
      "[xScale] [",
      "yScale] [",
      "bSwapBlackWhite] [",
      "sMap]"
    ],
    "doc": "Copies the graphics image of the active window to the Windows Clipboard."
  },
  "winfile": {
    "name": "WinFile",
    "returnType": "UNKNOWN",
    "params": [
      "sFile [",
      "xScale] [",
      "yScale] [",
      "bSwapBlackWhite] [",
      "sMap]"
    ],
    "doc": "Writes the graphics image of the active window to a file."
  },
  "winfree": {
    "name": "WinFree",
    "returnType": "UNKNOWN",
    "params": [],
    "doc": "Removes the active display window."
  },
  "wingetclicked": {
    "name": "WinGetClicked",
    "returnType": "UNKNOWN",
    "params": [],
    "doc": "Gets the number of the Plant SCADA window that has most recently been clicked on using the left mouse button."
  },
  "wingetfirstchild": {
    "name": "WinGetFirstChild",
    "returnType": "UNKNOWN",
    "params": [
      "Window"
    ],
    "doc": "Gets the window number of the first child of a parent window."
  },
  "wingetfocus": {
    "name": "WinGetFocus",
    "returnType": "UNKNOWN",
    "params": [],
    "doc": "Gets the number of the Plant SCADA window that has the keyboard focus."
  },
  "wingetname": {
    "name": "WinGetName",
    "returnType": "STRING",
    "params": [
      "[iWinNum]"
    ],
    "doc": "Gets the name previously associated with a particular window number using WinSetName."
  },
  "wingetnextchild": {
    "name": "WinGetNextChild",
    "returnType": "UNKNOWN",
    "params": [
      "Window"
    ],
    "doc": "Gets the window number of the next child in a child link."
  },
  "wingetparent": {
    "name": "WinGetParent",
    "returnType": "UNKNOWN",
    "params": [
      "[WinNum]",
      "[GetRoot]"
    ],
    "doc": "Retrieves the Window Number of the specified window's parent or root window."
  },
  "wingetwndhnd": {
    "name": "WinGetWndHnd",
    "returnType": "UNKNOWN",
    "params": [],
    "doc": "Gets the window handle for the current window."
  },
  "wingoto": {
    "name": "WinGoto",
    "returnType": "UNKNOWN",
    "params": [
      "Window"
    ],
    "doc": "Changes the active window. The specified window is placed in front of all other windows and all keyboard commands will apply to this window."
  },
  "winmode": {
    "name": "WinMode",
    "returnType": "UNKNOWN",
    "params": [
      "Mode"
    ],
    "doc": "Sets the display mode of the active Plant SCADA window."
  },
  "winmove": {
    "name": "WinMove",
    "returnType": "UNKNOWN",
    "params": [
      "X",
      "Y",
      "Width",
      "Height"
    ],
    "doc": "Moves the active window to a new location and sizes the window in a single operation."
  },
  "winnew": {
    "name": "WinNew",
    "returnType": "UNKNOWN",
    "params": [
      "Page",
      "ClusterName"
    ],
    "doc": "Opens a new display window, with a specified page displayed."
  },
  "winnewat": {
    "name": "WinNewAt",
    "returnType": "UNKNOWN",
    "params": [
      "Page",
      "X",
      "Y",
      "Mode[",
      "sClusterName]"
    ],
    "doc": "Opens a new display window at a specified location, with a selected page displayed."
  },
  "winnewpinat": {
    "name": "WinNewPinAt",
    "returnType": "UNKNOWN",
    "params": [
      "Page",
      "X",
      "Y[",
      "Mode][",
      "Width][",
      "Height][",
      "sClusterName]"
    ],
    "doc": "Opens a new display window at a specified location, relative to the current active window, with a selected page displayed."
  },
  "winnext": {
    "name": "WinNext",
    "returnType": "UNKNOWN",
    "params": [],
    "doc": "Makes the next window (in order of creation) active."
  },
  "winnumber": {
    "name": "WinNumber",
    "returnType": "UNKNOWN",
    "params": [
      "[sName]"
    ],
    "doc": "Gets the window number of the active Plant SCADA window."
  },
  "winpos": {
    "name": "WinPos",
    "returnType": "UNKNOWN",
    "params": [
      "X",
      "Y"
    ],
    "doc": "Moves the active window to a new location."
  },
  "winprev": {
    "name": "WinPrev",
    "returnType": "UNKNOWN",
    "params": [],
    "doc": "Makes the previous window (in order of creation) active."
  },
  "winprint": {
    "name": "WinPrint",
    "returnType": "UNKNOWN",
    "params": [
      "sPort [",
      "xScale] [",
      "yScale] [",
      "bSwapBlackWhite] [",
      "sMap]"
    ],
    "doc": "Sends the graphics image of the active window to a printer."
  },
  "winprintfile": {
    "name": "WinPrintFile",
    "returnType": "UNKNOWN",
    "params": [
      "sFile",
      "sPort [",
      "xScale] [",
      "yScale] [",
      "bSwapBlackWhite] [",
      "fromColor] [",
      "toColor]"
    ],
    "doc": "Prints a file to the system printer."
  },
  "winselect": {
    "name": "WinSelect",
    "returnType": "UNKNOWN",
    "params": [
      "Window"
    ],
    "doc": "Selects a window to make active. This function only affects the output of Cicode functions."
  },
  "winsetname": {
    "name": "WinSetName",
    "returnType": "UNKNOWN",
    "params": [
      "sName [",
      "iWinNum]"
    ],
    "doc": "Associates a name with a particular window by its window number."
  },
  "winsize": {
    "name": "WinSize",
    "returnType": "UNKNOWN",
    "params": [
      "Width",
      "Height",
      "Mode"
    ],
    "doc": "Sizes the active window. The origin of the window does not move."
  },
  "winstyle": {
    "name": "WinStyle",
    "returnType": "UNKNOWN",
    "params": [
      "Style",
      "Mode"
    ],
    "doc": "Switches on and off scrolling and scrollbar features for existing windows."
  },
  "wintitle": {
    "name": "WinTitle",
    "returnType": "UNKNOWN",
    "params": [
      "sTitle"
    ],
    "doc": "If a window title has been set with the [Page]WinTitle parameter, Plant SCADA uses this title when it refreshes the page (overriding the window title set with the WinTitle() function)."
  },
  "wndfind": {
    "name": "WndFind",
    "returnType": "UNKNOWN",
    "params": [
      "sTitle"
    ],
    "doc": "Gets the Windows handle of any window of any application, so that the window can be manipulated."
  },
  "wndgetfileprofile": {
    "name": "WndGetFileProfile",
    "returnType": "UNKNOWN",
    "params": [
      "sGroup",
      "sName",
      "sDefault",
      "sFile"
    ],
    "doc": "Gets a profile string from any .ini file."
  },
  "wndhelp": {
    "name": "WndHelp",
    "returnType": "UNKNOWN",
    "params": [
      "sHelpFile",
      "Command",
      "Data"
    ],
    "doc": "Invokes the Windows Help application (WinHlp32.EXE) to display a specific topic from a specific help file."
  },
  "wndinfo": {
    "name": "WndInfo",
    "returnType": "UNKNOWN",
    "params": [
      "iType"
    ],
    "doc": "Gets information on the window system (such as the width and height of the various elements displayed by Windows)."
  },
  "wndmonitorinfo": {
    "name": "WndMonitorInfo",
    "returnType": "UNKNOWN",
    "params": [
      "iMonitor",
      "iType"
    ],
    "doc": "Returns information about a particular monitor."
  },
  "wndmonitorinfoex": {
    "name": "WndMonitorInfoEx",
    "returnType": "UNKNOWN",
    "params": [
      "sMonitor",
      "iType"
    ],
    "doc": "Returns information about a particular monitor."
  },
  "wndputfileprofile": {
    "name": "WndPutFileProfile",
    "returnType": "UNKNOWN",
    "params": [
      "sGroup",
      "sName",
      "sData",
      "sFile"
    ],
    "doc": "Puts a profile string into any .INI file."
  },
  "wndshow": {
    "name": "WndShow",
    "returnType": "UNKNOWN",
    "params": [
      "hWnd",
      "nMode"
    ],
    "doc": "Sets the display mode of any window of any application."
  },
  "wndviewer": {
    "name": "WndViewer",
    "returnType": "UNKNOWN",
    "params": [
      "sViewerFile",
      "Command",
      "Data"
    ],
    "doc": "Invokes the Microsoft Multimedia application."
  },
  "xmlclose": {
    "name": "XMLClose",
    "returnType": "UNKNOWN",
    "params": [
      "INT hDoc"
    ],
    "doc": "Use this function to delete an XML document in memory."
  },
  "xmlcreate": {
    "name": "XMLCreate",
    "returnType": "UNKNOWN",
    "params": [
      "STRING sRootElement",
      "STRING sNamespace = \"\""
    ],
    "doc": "Use this function to create  a new XML document in memory."
  },
  "xmlgetattribute": {
    "name": "XMLGetAttribute",
    "returnType": "UNKNOWN",
    "params": [
      "INT hDoc",
      "INT hNode",
      "STRING sAttributeName"
    ],
    "doc": "Retrieves the attribute value of the node from an XML document in memory."
  },
  "xmlgetattributecount": {
    "name": "XMLGetAttributeCount",
    "returnType": "UNKNOWN",
    "params": [
      "INT hDoc",
      "INT hNode"
    ],
    "doc": "Gets number of attribute of specified XML node."
  },
  "xmlgetattributename": {
    "name": "XMLGetAttributeName",
    "returnType": "UNKNOWN",
    "params": [
      "INT hDoc",
      "INT hNode",
      "INT iAttribute"
    ],
    "doc": "Gets name of specified XML Node’s attribute by using attribute index."
  },
  "xmlgetattributevalue": {
    "name": "XMLGetAttributeValue",
    "returnType": "UNKNOWN",
    "params": [
      "INT hDoc",
      "INT hNode",
      "INT iAttribute"
    ],
    "doc": "Gets the value of the specified XML node's attribute by using attribute index."
  },
  "xmlgetchild": {
    "name": "XMLGetChild",
    "returnType": "UNKNOWN",
    "params": [
      "INT hDoc",
      "INT hNode",
      "INT iChild"
    ],
    "doc": "Retrieves the child node for the specified parent node in XML document in memory."
  },
  "xmlgetchildcount": {
    "name": "XMLGetChildCount",
    "returnType": "UNKNOWN",
    "params": [
      "INT hDoc",
      "INT hNode"
    ],
    "doc": "Retrieves the total number of child nodes for the specified parent node in an XML document in memory."
  },
  "xmlgetparent": {
    "name": "XMLGetParent",
    "returnType": "UNKNOWN",
    "params": [
      "INT hDoc",
      "INT hNode"
    ],
    "doc": "Gets the parent of specified node."
  },
  "xmlgetroot": {
    "name": "XMLGetRoot",
    "returnType": "UNKNOWN",
    "params": [
      "INT hDoc"
    ],
    "doc": "Gets the root element of the specified XML document."
  },
  "xmlnodeaddchild": {
    "name": "XMLNodeAddChild",
    "returnType": "UNKNOWN",
    "params": [],
    "doc": "Creates an element node with the specified Name and Namespace and appends the node to the end of the list of child nodes of specified parent node in the XML document."
  },
  "xmlnodefind": {
    "name": "XMLNodeFind",
    "returnType": "UNKNOWN",
    "params": [
      "INT hDoc",
      "STRING sQuery"
    ],
    "doc": "Use this function to select the first XML node that matches the XPath expression."
  },
  "xmlnodegetname": {
    "name": "XMLNodeGetName",
    "returnType": "UNKNOWN",
    "params": [
      "INT hDoc",
      "INT hNode"
    ],
    "doc": "Gets the name of the specified node."
  },
  "xmlnodegetvalue": {
    "name": "XMLNodeGetValue",
    "returnType": "UNKNOWN",
    "params": [
      "INT hDoc",
      "INT hNode"
    ],
    "doc": "Gets the value of the specified node."
  },
  "xmlnoderemove": {
    "name": "XMLNodeRemove",
    "returnType": "UNKNOWN",
    "params": [
      "INT hDoc",
      "INT hNode"
    ],
    "doc": "Removes the specified XML node from its parent and XML document."
  },
  "xmlnodesetvalue": {
    "name": "XMLNodeSetValue",
    "returnType": "UNKNOWN",
    "params": [
      "INT hDoc",
      "INT hNode",
      "STRING sValue"
    ],
    "doc": "Sets the value of the specified node."
  },
  "xmlopen": {
    "name": "XMLOpen",
    "returnType": "UNKNOWN",
    "params": [
      "STRING sFilePath"
    ],
    "doc": "Reads an XML file from disk to create XML document."
  },
  "xmlsave": {
    "name": "XMLSave",
    "returnType": "UNKNOWN",
    "params": [
      "INT hDoc",
      "STRING sFilePath"
    ],
    "doc": "Use this function to save  XML document on disk."
  },
  "xmlsetattribute": {
    "name": "XMLSetAttribute",
    "returnType": "UNKNOWN",
    "params": [
      "INT hDoc",
      "INT hNode",
      "STRING sName",
      "STRING sValue"
    ],
    "doc": "Use this function to set the value of specified attribute of the node in the XML document. If the attribute does not exist, it will be created."
  },
  "_objectcallmethod": {
    "name": "_ObjectCallMethod",
    "returnType": "UNKNOWN",
    "params": [
      "hObject",
      "sMethod",
      "vParameters"
    ],
    "doc": "Calls a specific method for an ActiveX object."
  },
  "_objectgetproperty": {
    "name": "_ObjectGetProperty",
    "returnType": "UNKNOWN",
    "params": [
      "hObject",
      "sProperty"
    ],
    "doc": "Gets a specific property of an ActiveX object."
  },
  "_objectsetproperty": {
    "name": "_ObjectSetProperty",
    "returnType": "UNKNOWN",
    "params": [
      "hObject",
      "sProperty",
      "vValue"
    ],
    "doc": "Sets a specific property of an ActiveX object."
  }
}